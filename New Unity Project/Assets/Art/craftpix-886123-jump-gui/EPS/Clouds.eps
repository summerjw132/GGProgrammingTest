%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Clouds.eps
%%Creator: Adobe Illustrator(R) 21.1
%%For: ABCDetective
%%CreationDate: 5/31/2018
%%BoundingBox: 0 0 1443 1207
%%HiResBoundingBox: 0 0 1442.2465 1206.5700
%%CropBox: 0 0 1442.2465 1206.5700
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.1.0 x326 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 108 8%%BeginData: 21362 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD59FFA8CAA7CAA7A8A7CAA7A8A7CAA7A8A7CFA8FD6AFFA8A8A7A7
%A7CAA8CFA8CFCACFA8FFCACFA8CFA8CAA7A8A7A7A7CFFD63FFA8CAA7A8A7
%CFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCACAA7A7A7FD1AFFA8
%FFA8FFA8CFA8A8A8CAA8A8A7A8A7A8A7A8A7A8A7A8A7A8A7A8A7A8A7A8A7
%A8A8CAA8CAA8CFA8FFA8FFCAFD1AFFCAA1A7A7CFA8CFA8CFA8CFA8CFA8CF
%A8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8A8A1A7A7FD15FFA8A7A8A7A8A7
%CAA7CAA7CAA8CAA7CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CAA7CFA8
%CAA7CAA7CAA7CAA7A8A7CFFD16FFA8A8A7CFCFFFCFFFCAFFCFFFCAFFCFFF
%CFFFCFFFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFA8A8A1CFFD11FFA8A7A7
%CFA8CFA8CFA8CFCACFA8CFCACFA8CFA8CFA8FFCACFA8FFCACFA8FFCACFA8
%CFCACFA8CFCACFA8CFCACFA8CFA8CAA1A7FD14FFA1A7A8FFA8CFA8CFA8CF
%A8FFA8CFA8FFCACFA8FFCACFA8FFCACFA8FFA8CFA8FFA8CFA8CFA8CFA8CF
%A1A7A8FD0FFFA7A7FFCACFA8CFCACFA8FFCACFA8FFCFCFA8FFCFFFCAFFCF
%FFCAFFCFFFCAFFCFCFCAFFCFCFA8FFCACFA8CFCACFA8CFCACFA1A8FD11FF
%CA7DCFCFFFA8FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFA7A7A7FD0DFFA7A7CFA8CFA8CFA8CFA8CF
%A8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CF
%A8CFA8CFA8CFA8CFA8CF7CA8FD0FFFA77DCFA8CFA8CFA8CFA8CFA8CFA8CF
%A8FFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8CFA8CFA8CFA8CFA8FF
%A8A17DFD0CFFA1CFCACFCACFCAFFCFCFCAFFCFFFCAFFCFFFCAFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFCAFFCACFCACFA1FD
%0EFFA8A7FFCAFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF
%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFA8A1FD0AFFA1A8CACFA8
%CFA8CFA8CFA8CFA8CFA8CFA8FFA8CFA8FFCACFA8FFCACFA8FFCACFA8FFA8
%CFA8FFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8A7A8FD0CFFA1A1FFA8CFA8CF
%A8CFA8FFCACFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCACFA8FFA8CFA8CFA8CFA8A87CFD09FFA7A8CFCACFA8CFCACFA8FFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFCFA8FFCACFA8CFCACFA7A8FD0BFFA7A7FFA8FFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFCFCFA87DFD08FF7DCFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8
%CFA8FFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8CFA8CFA8CFA8CFA8
%CFA8CFA8CFA8CA7DFD0AFFA87CCFA8CFA8CFA8CFA8CFA8CFA8FFA8CFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8CFA8FFA8CFA8CFA8CF
%A8CFA8CFA8A77DFD06FFCAA7CAFFCACFCAFFCFFFCAFFCFFFCAFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFF
%CAFFCACFA8A8FD0AFF7DFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF
%FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCF
%FFCAFFCFA7A8FD06FFA1CFA8CFA8CFA8CFA8CFA8FFA8CFA8FFCACFA8FFCA
%FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCACFA8FFA8CFA8CFA8CFA8
%CFA8CAA1FD09FF7DA8A8CFA8CFA8FFA8CFA8FFCAFFA8FFCAFFA8FFCAFFA8
%FFCFFFA8FFCFFFA8FFCFFFA8FFCAFFA8FFCAFFA8FFCACFA8FFCACFA8FFA8
%CFA8FFA77DCFFD04FFA8A7CFCFA8FFCACFA8FFCFFFCAFFCFFFCAFFCFFFCF
%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFFCFFFA8FFCF
%CFA8FFA8A8FD08FFA8A7CFCFA8FFCFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFF
%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFCFFFCFFFCFFFCAFFCFFF
%CAFFCFCFA8FFA1A8FD04FFCF7DCFA8CFA8CFA8CFA8CFA8CFA8FFA8CFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8CFA8FFA8CFA8CFA8CF
%A8CFA8CFA8CFA1FD08FFA1A7CFA8CFA8CFA8CFA8FFA8CFA8FFA8FFA8FFA8
%FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFA8FFA8FFA8FFA8FFA8CFA8
%FFA8CFA8CFA8CFA8CA7CFD04FFA8A7CFCFCAFFCFFFCAFFCFFFCFFFCFFFCF
%FFCFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFCFFFCFFFCFFFCFFFCF
%FFCAFFCFFFCAFFCAA8FD08FF7DFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFF
%FFFFCFFD13FFCFFFFFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFA7A8FFFFFF
%CF7DCFA8CFA8CFA8CFA8FFA8CFA8FFCAFFA8FFCAFFA8FFCFFFA8FFCFFFA8
%FFCFFFA8FFCFFFA8FFCAFFA8FFCACFA8FFA8CFA8CFA8CFA8CFA1FD07FFA1
%A7A8CFA8CFA8FFA8CFA8FFCAFFA8FFCAFFA8FFCFFFA8FFCFFFA8FFCFFFCA
%FFCFFFA8FFCFFFA8FFCFFFA8FFCAFFA8FFCAFFA8FFCACFA8FFA8CFA8FFA7
%A7FFFFFFA8A7CAFFCACFA8FFCFFFCAFFCFFFCAFFCFFFCFFFFFFFCFFFFFFF
%CFFFFFFFCFFFFFFFCFFFFFFFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFA8A8
%FD07FFA7A7FFA8FFCFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFFFFFFCFFD0FFF
%CFFFFFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFFCFCFCACF7DFD04FF7DCFA8CF
%A8CFA8CFA8CFA8FFA8CFA8FFA8FFA8FFCAFFA8FFCAFFA8FFCFFFA8FFCAFF
%A8FFA8FFA8FFA8FFA8FFA8CFA8CFA8CFA8CFA8CA7DFD07FF7CCFA8CFA8CF
%A8CFA8FFA8CFA8FFA8FFA8FFA8FFA8FFCAFFA8FFCFFFA8FFFFFFA8FFCFFF
%A8FFCAFFA8FFCAFFA8FFA8FFA8FFA8CFA8FFA8CFA8CFA8CFA87DFFFFFFA8
%A7CAFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFD13FFCFFFFFFFCFFFCFFFCF
%FFCFFFCAFFCFFFA8A8FD07FFA7CAFFCAFFCFFFCAFFCFFFCFFFCFFFCFFFFF
%FFCFFD17FFCFFFFFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFF7DFD04FF7DCFA8
%CFA8CFA8FFA8CFA8FFCAFFA8FFCAFFA8FFCFFFA8FFFFFFCAFFFFFFCAFFCF
%FFA8FFCFFFA8FFCAFFA8FFCACFA8FFA8CFA8CFA8CA7DFD07FF7CCFA8CFA8
%CFA8CFA8FFCACFA8FFCAFFA8FFCFFFA8FFCFFFCAFFFFFFCFFD07FFCAFFCF
%FFA8FFCFFFA8FFCAFFA8FFCACFA8FFA8CFA8CFA8CFA8A1FFFFFFA8A7CFCF
%A8FFCFFFCAFFCFFFCAFFCFFFCFFFFFFFCFFD0FFFCFFFFFFFCFFFCFFFCAFF
%CFFFCAFFCFFFA8FFA8A7FD07FFA1A8FFCFFFCAFFCFFFCAFFCFFFCFFFCFFF
%CFFFFFFFCFFD13FFCFFFFFFFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCFCF7CFF
%FFFFCA7CCFA8CFA8CFA8CFA8FFA8CFA8FFA8FFA8FFCAFFA8FFCFFFA8FFFF
%FFA8FFCFFFA8FFCAFFA8FFCAFFA8FFA8FFA8FFA8CFA8CFA8CFA8CF7DFD07
%FF7CCAA8CFA8CFA8CFA8CFA8FFA8FFA8FFA8FFA8FFCAFFA8FFCFFFA8FFFF
%FFA8FFFFFFA8FFCFFFA8FFCAFFA8FFA8FFA8FFA8FFA8FFA8CFA8CFA8CFA8
%CFA87CFFFFFFA8A7CFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFD17FFCFFFCFFF
%CFFFCFFFCFFFCFFFCAFFCAA7FD07FFA7A7FFCFFFCAFFCFFFCFFFCFFFCFFF
%CFFFCFFD1BFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFCF7DFFFFFFCA7CCFA8
%CFA8CFA8CFA8FFCAFFA8FFCAFFA8FFCFFFA8FFFFFFCFFD07FFCAFFCFFFA8
%FFCFFFA8FFCAFFA8FFCACFA8CFA8CFA8CF7DFD07FFA1A1CACFA8CFA8FFA8
%CFA8FFCAFFA8FFCAFFA8FFCFFFA8FFCFFFCAFFFFFFCFFFFFFFCFFFFFFFA8
%FFCFFFA8FFCAFFA8FFCAFFA8FFCACFA8FFA8CFA8FFA7A7FFFFFFA8A7CAFF
%CFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFD13FFCFFFFFFFCFFFCFFFCAFFCFFF
%CAFFCFCFA8A7FD08FF7CCFCAFFCFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFFFF
%FFCFFD0FFFCFFFFFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFFCFCFCFA7A8FFFF
%FFCF7CCFA8CFA8CFA8CFA8CFA8FFA8FFA8FFA8FFA8FFCAFFA8FFCFFFA8FF
%FFFFA8FFCFFFA8FFCAFFA8FFA8FFA8FFA8CFA8CFA8CFA8CFA8CA7DFD08FF
%7DA7CFA8CFA8CFA8CFA8CFA8FFA8FFA8FFA8FFA8FFCAFFA8FFCAFFA8FFCF
%FFA8FFCFFFA8FFCAFFA8FFCAFFA8FFA8FFA8FFA8CFA8CFA8CFA8CFA8CF7D
%FD04FFA8A7CAFFCFFFCAFFCFFFCFFFCFFFCFFFFFFFCFFD13FFCFFFFFFFCF
%FFCFFFCFFFCFFFCAFFCFFFA8A8FD08FFA8A1CFFFCFFFCAFFCFFFCFFFCFFF
%CFFFCFFFCFFD17FFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFA7CAFD05FF7C
%CFA8CFA8CFA8FFA8CFA8FFCAFFA8FFCAFFA8FFCFFFA8FFFFFFCAFFFFFFCA
%FFCFFFA8FFCFFFA8FFCAFFA8FFCACFA8FFA8CFA8CFA8CA7DFD09FF7CA8A8
%CFA8CFA8FFA8CFA8FFCAFFA8FFCAFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCF
%FFA8FFCFFFA8FFCAFFA8FFCAFFA8FFCACFA8FFA8CFA8CFA8A7A8FD04FFA8
%A7CFCFA8FFCFFFCAFFCFFFCAFFCFFFCFFFFFFFCFFFFFFFCFFD0BFFCFFFFF
%FFCFFFCFFFCAFFCFFFCAFFCFCFA8FFA8A7FD0AFF7CCFCAFFCFFFCAFFCFFF
%CAFFCFFFCFFFCFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF
%CFFFCFFFCFFFCAFFCFFFCAFFCFCFCACAA8FD05FFA87CCFA8CFA8CFA8CFA8
%CFA8CFA8FFA8FFA8FFA8FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFA8
%FFA8FFA8CFA8FFA8CFA8CFA8CFA8CA7DFD0AFFA87CCFA8CFA8CFA8CFA8CF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFA8FFA8FF
%A8FFA8FFA8CFA8CFA8CFA8CFA8CAA7FD06FFA8A7CFCFCAFFCFFFCAFFCFFF
%CFFFCFFFCFFFFFFFCFFD0FFFCFFFFFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFF
%A8A7FD0BFFA77DFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFFFFFCFFFFFFF
%CFFFFFFFCFFFFFFFCFFFFFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFCFA7FD
%07FFA87CCFA8CFA8CFA8CFA8FFA8CFA8FFCAFFA8FFCAFFA8FFCFFFA8FFCF
%FFA8FFCFFFA8FFCFFFA8FFCAFFA8FFCACFA8FFA8CFA8CFA8CFA8CF7DFD0C
%FF7D7DFFCACFA8FFA8CFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCFFF
%A8FFCAFFA8FFCAFFA8FFCACFA8FFCACFA8FFA8CFA8CFA7FD08FFA8A1CAFF
%CACFA8FFCFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFFFFFFCFFFFFFFCFFFFFFF
%CFFFCFFFCFFFCFFFCAFFCFFFCAFFCFCFA8FFCACFA8A7FD0DFFA17DFFCFFF
%CAFFCFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCAFFCFFFCAFFCFFFCAFFCFCAA1FD0AFF7CCFA8CFA8CFA8CFA8CFA8CF
%A8CFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8CF
%A8CFA8CFA8CFA8CFA8CFA8A87CFD0EFFA776CFCACFA8CFA8CFA8FFA8CFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8CFA8FFA8CFA8CFA8
%CFA8A8A1FD0BFFA1A7FFCFCFCAFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFFFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFFCFFF
%A1A8FD0FFFCF7CA8CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFA8A7A8FD0CFFA77DCACFA8CF
%A8CFA8CFA8FFA8CFA8FFCACFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CACFA8FFCACFA8FFA8CFA8CFA8CFA8CFCA7DA8FD11FF7D7DA7FFCACFA8FF
%A8CFA8FFCACFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCACFA8FFCACFA8FFA8CF
%CACF7DA1A8FD0EFF7CCACACFCACFA8FFCFFFCAFFCFFFCAFFCFFFCAFFCFFF
%CAFFCFFFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFA8FFCACFCFA8
%7DFD13FFA8A17DCFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF
%CAFFCFFFCAFFCFFFCAFFCAA77DCFFD10FFA876CFA8CFA8CFA8CFA8CFA8CF
%A8CFA8FFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8CFA8CF
%A8CFA8CFA8CFCAA87CFD16FFA87DA1A1CFA8FFA8CFA8CFA8CFA8FFA8CFA8
%FFA8CFA8FFA8CFA8CFA8CFA8CFA8CFA8A77DFD13FFA87CCFCFFFCAFFCFFF
%CAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCAFFCFCFCAFFCAA77CFD19FFA8A87DA7A7CFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFA8FFCFFFCAFFA7FD15FFA87CA7A7A8A7CFA7CAA7
%CAA8CAA8CFA8CFA8FFA8CFA8FFCACFA8FFA8CFA8CFA8CAA8CAA7A77DCFCA
%CFA8CFA8CFA87C7CFD1DFFA8A87DA17DA8A7A8A8CFA8CFA8FFCACFA8CFA7
%A77DA17C76A7FFA8CFA8CAA8FD16FFA8FFA8CAFD04A8A7CFA8A8A7CFA8A8
%A7A8A7A8A1A8A7A8A7A8A1A77DA8A1A77DA7A17D76FFCFCFA8CFCACF7DFD
%23FFA8A87DA77DA77DA77DA77DA17DA7A1A8A8FF7D7CCFFFCFCFA8CFFD23
%FFA9FFFFFFA8FFA8FFA8FFA8FFA8FD0AFF7D7CFFA8CFA8CFA8A8A8FD27FF
%A8FFA8FFA8FD09FF52A1CACFA8CFA8FD3BFF7DA1FFCAFFCACFA8FD37FF52
%A8CFCFCACFFD3BFFA87C7DCFA8CFA8CFA8FD37FF52A7CACFA8CFFD3CFF7D
%7DCFCACFCACFA8FD37FF7DA7A7CFCAFD3DFFA87CA7A8CFA8CAA8FD37FFA8
%A8A7A8A7CAA8FD3CFFA1A8A7CFCAFD3DFFCFFD2AFFA8CAA8A8A7CAA8FD0D
%FFA8A8A7A8A7CAFD57FFA8CAA7A7A7A8A8CFFD05FFCFA7A8A7CAA7CAA7A7
%A7CFFFFFFFCFA8CFA8FD09FFA8FD54FFA8A87DA7A7CAA8CAA7CAA7A7A8FF
%A8A7A1CFA8CFA8CFA8CFA8CAA1A7A7A8A7A7A1A77DA7A8FD5AFFA8A7A7CF
%CAFFCFCFCAFFCFFFCACFA8A8A8FFCFCFCAFFCFCFCAFFCFFFA7CFCFFFCAFF
%CFCFA7A7CAFD58FFA8A1A7CFA8CFA8CFA8CFA8CFA8CFA8CAA8CFA8CFA8CF
%A8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA7A7CFFD56FFA8A7A8CFA8CFCACF
%A8FFCACFA8FFCFCFCAFFCFCFA8FFCFCFA8FFCFCFA8FFCFCFA8FFCACFA8CF
%CACFA1CAFD56FFA1A7CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CF
%A8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CA7DA8A1A8A8FD1BFFA8CFA8CA
%A8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8FD19FFCAA1
%FFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFCFCACFCACFA7A7A8FD17FFA8A7A1FD04A7A8A7A8A7A8
%A7A8A7A8A7A8A7A8A7A8A7A8A7A8A7A8A7A7A1A7A1A7A7FD16FF7DA8A8CF
%A8CFA8CFA8CFA8CFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8FFA8CF
%A8CFA8CFA8CFA8CFA8CFA8CFA7A1A8FD13FFA8A77CA7A7CAA8CFA8CFA8CF
%A8CFA8CFCACFA8CFCACFA8CFCACFA8CFA8CFA8CFA8CFA8CFA7A77CA7A8FD
%13FFA7CACFA8FFCFCFA8FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFCFA8FFCFCFA8CFCACFA7A1FD12FFA1A7A7CFCAFF
%CACFA8FFCFCFA8FFCFCFCAFFCFFFCAFFCFFFCAFFCFCFA8FFCFCFA8FFCACF
%CAFFCFCFA1A7A7FD12FF7CCFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8FFA8CF
%A8FFA8CFA8FFA8CFA8FFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CF7CA8
%FD10FF7CA1A7CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8
%CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA7A17CFD0EFFA8A8A7CACFFFCAFFCF
%FFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF
%FFCFFFCAFFCFFFCAFFCFCFCFCAA1FD0FFF7CA7CAFFCACFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFCA
%FFCFA77CFD0CFF7DA7A7CFA8CFA8CFA8CFA8CFA8FFCACFA8FFCAFFA8FFCA
%FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCACFA8FFA8CFA8CFA8CFA8CFA8CFA1
%A7FD0EFF7CA7CACFA8CFA8CFA8CFA8CFA8CFA8CFA8FFA8CFA8FFCACFA8FF
%CACFA8FFA8CFA8FFA8CFA8CFA8CFA8CFA8CFA8CFCAA77CFD0AFF7CA8CAFF
%CFCFA8FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFA8FFCFA7A8FD0DFF7CA7CACFCACF
%A8FFCFCFA8FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF
%CFFFCAFFCFCFA8FFCACFA8CFCFA77CFD07FFA876A8CACFA8CFA8CFA8CFA8
%CFA8FFA8CFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8CFA8FFA8CFA8CFA8CFA8CF7CA8FD0CFF7DA1A8CFA8CFA8CFA8CFA8CF
%A8CFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8CFA8CFA8CF
%A8CFA8CFA8CFA8CFA87C7DFD06FF7CCFCFCFCAFFCFFFCAFFCFFFCFFFCFFF
%CFFFCFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCAFFCFCF7CFD0BFFA8A1A8FFCAFFCFCFCAFFCFFFCAFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFF
%CFCFCAFFCAFFA7A1CFFD04FF7DA7A8CFA8CFA8CFA8CFA8FFA8CFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCAFFA8FFCAFFA8FF
%CACFA8FFA8CFA8CFCAA876FD0AFFA17CCFA8CFA8CFA8CFA8CFA8CFA8FFCA
%CFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCACFA8FFCACFA8FFA8CFA8
%CFA8CFA8CFA8CF7CA7FFFFFFA87DCFCFA8FFCFCFCAFFCFFFCAFFCFFFCAFF
%CFFFCFFFCFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFCFFFCFFFCFFF
%CAFFCFFFCAFFCFFFA8FFCFA77DFD09FF7CCACACFCACFA8FFCFFFCAFFCFFF
%CAFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFF
%CFFFA8FFCACFA8CFCFCA7CFFFFFF7D7DCFA8CFA8CFA8CFA8CFA8CFA8FFA8
%CFA8FFA8FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFA8FFA8
%FFA8CFA8FFA8CFA8CFA8CFA8CFA87CA8FD07FFA17DA8CFA8CFA8CFA8CFA8
%CFA8FFA8CFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8CFA8
%FFA8CFA8CFA8CFA8CFA8CFA8CFA87CA7FFFF7CCFCFCFCAFFCFFFCAFFCFFF
%CFFFCFFFCFFFCFFFCFFD13FFCFFFFFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFF
%CFFF7DA8FD07FFA7A1FFCAFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFFFFF
%CFFFFFFFCFFFFFFFCFFFFFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFF
%CFFF7DA8FF7DA1A8CFA8CFA8CFA8CFA8FFA8CFA8FFCAFFA8FFCAFFA8FFCF
%FFA8FFCFFFCAFFFFFFCAFFFFFFA8FFCFFFA8FFCFFFA8FFCAFFA8FFCACFA8
%FFA8CFA8CFCAA876FD07FF7CA8CACFA8CFA8CFA8FFA8CFA8FFCAFFA8FFCA
%FFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCAFFA8FFCACFA8FFA8CFA8
%CFA8CFA8CFCAA77CFFA1A7CFA8FFCACFA8FFCFFFCAFFCFFFCAFFCFFFCFFF
%FFFFCFFD13FFCFFFFFFFCFFFCFFFCAFFCFFFCAFFCFCFA8FFCA7CA8FD06FF
%7DA7FFCACFA8FFCFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFFFFFFCFFFFFFFCF
%FFFFFFCFFFFFFFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCACFA8FFA77DFF52A8
%A8CFA8CFA8CFA8CFA8CFA8FFA8CFA8FFA8FFA8FFCAFFA8FFCFFFA8FFFFFF
%A8FFFFFFA8FFCFFFA8FFCAFFA8FFA8FFA8FFA8CFA8FFA8CFA8CFA8CFA8CF
%7CA8FD06FF76CAA8CFA8CFA8CFA8CFA8FFA8CFA8FFA8FFA8FFCAFFA8FFCA
%FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFA8FFA8FFA8CFA8CFA8CFA8CFA8CFA8
%CA76FF7CCACFCAFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFD1BFFCFFFCFFF
%CFFFCFFFCAFFCFFFCAFFCFA1A1FD05FFCF7DA8FFCFFFCAFFCFFFCFFFCFFF
%CFFFCFFFCFFD13FFCFFFFFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFFCA7DA852
%CFA8CFA8CFA8CFA8FFA8CFA8FFCAFFA8FFCAFFA8FFCFFFA8FFCFFFCFFD07
%FFCFFFFFFFA8FFCFFFA8FFCAFFA8FFCAFFA8FFA8CFA8CFA8CFA8FF7CA7FD
%06FF76CAA8CFA8CFA8FFA8CFA8FFCAFFA8FFCAFFA8FFCFFFA8FFCFFFCAFF
%FFFFCAFFCFFFA8FFCFFFA8FFCAFFA8FFCACFA8FFA8CFA8CFA8CFA8CF76FF
%7CA8FFCACFA8FFCFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFFFFFFCFFD0FFFCF
%FFFFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFFCFCFCA7DA8FD05FFA87DA8CFA8
%FFCFFFCAFFCFFFCAFFCFFFCFFFFFFFCFFD0FFFCFFFFFFFCFFFCFFFCAFFCF
%FFCAFFCFFFA8FFCACFA87DCA52A7A8CFA8CFA8CFA8CFA8CFA8CFA8FFA8FF
%A8FFA8FFA8FFCAFFA8FFCFFFA8FFFFFFA8FFCFFFA8FFCAFFA8FFCAFFA8FF
%A8FFA8FFA8CFA8CFA8CFA8CFA8CF52A8FD05FFCF52CFA8CFA8CFA8CFA8CF
%A8CFA8FFA8FFA8FFCAFFA8FFCFFFA8FFFFFFA8FFFFFFA8FFCAFFA8FFCAFF
%A8FFA8CFA8FFA8CFA8CFA8CFA8CFA8CA52FFA17CFFCFCFCAFFCFFFCAFFCF
%FFCFFFCFFFCFFFFFFFCFFD17FFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFA7
%7CFD06FFA87DCAFFCAFFCFFFCAFFCFFFCFFFCFFFCFFD17FFCFFFCFFFCFFF
%CFFFCFFFCFFFCAFFCFFFA87DCAA876A7CFA8CFA8CFA8CFA8FFA8CFA8FFCA
%FFA8FFCAFFA8FFCFFFA8FFCFFFCAFFFFFFCAFFCFFFA8FFCFFFA8FFCFFFA8
%FFCAFFA8FFCACFA8FFA8CFA8CFCF7D7CFD07FF76CFA8CFA8CFA8CFA8FFCA
%FFA8FFCAFFA8FFCFFFA8FFFFFFCFFD07FFCFFFCFFFA8FFCFFFA8FFCAFFA8
%FFCACFA8FFA8CFA8CFA8CA76FFFF7CA7CFCFCACFA8FFCFFFCAFFCFFFCAFF
%CFFFCFFFCFFFCFFFFFFFCFFD07FFCFFFFFFFCFFFFFFFCFFFCFFFCFFFCFFF
%CAFFCFFFCAFFCFCFCACF52CFFD06FFA87CA8FFCFCFCAFFCFFFCAFFCFFFCF
%FFCFFFCFFD13FFCFFFFFFFCFFFCFFFCAFFCFFFCAFFCFCFA8FFA87CA8FF7D
%7CCFA8CFA8CFA8CFA8CFA8CFA8CFA8FFA8FFA8FFA8FFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFA8FFA8FFA8FFA8FFA8CFA8CFA8CFA8CFA8CF7C7D
%FD08FF52CAA8CFA8CFA8CFA8CFA8FFA8FFA8FFA8FFA8FFCAFFA8FFCFFFA8
%FFFFFFA8FFCFFFA8FFCAFFA8FFA8FFA8FFA8CFA8CFA8CFA8CFA8CFA8CF52
%CFFF7CA7CFFFCFCFCAFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFFFFFCFFF
%FFFFCFFD07FFCFFFFFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFA77CFD08
%FFCA7CA8FFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFD13FFCFFFFFFFCFFFCF
%FFCFFFCFFFCAFFCFFFCAFFA87CA8FF7D7CCFA8CFA8CFA8CFA8CFA8FFA8CF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCFFFA8FFCFFFA8FFCFFFA8FFCAFFA8FF
%CAFFA8FFCACFA8FFA8CFA8CFCFA17CFD09FF52CAA8CFA8CFA8CFA8CFA8FF
%CAFFA8FFCAFFA8FFCFFFA8FFCFFFCAFFFFFFCAFFCFFFA8FFCFFFA8FFCAFF
%A8FFCACFA8FFA8CFA8CFA8CFA8CA52FFFF7D7CCFCFA8CFCACFA8FFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFFFFFFCFFFFFFFCFFFCFFFCFFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFCFA8FF7CA1FD09FF7CA7CFA8FFCFCFCAFFCF
%FFCAFFCFFFCFFFCFFFCFFFFFFFCFFD07FFCFFFFFFFCFFFFFFFCFFFCFFFCA
%FFCFFFCAFFCFCFA8FFCAFFA77CFFFFCF4BA8A8CFA8CFA8CFA8CFA8CFA8CF
%A8CFA8FFA8CFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8CF
%A8FFA8CFA8CFA8CFA8CFA8CFA87C7DFD09FF52A7CACFA8CFA8CFA8CFA8CF
%A8FFA8FFA8FFA8FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFA8FFA8FF
%A8CFA8FFA8CFA8CFA8CFA8CFCAA176FFFFFFA176FFCAFFCFCFCAFFCFFFCA
%FFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF
%FFCFFFCFFFCAFFCFFFCAFFCFFFCACF52FD0AFFA77CFFCAFFCFFFCAFFCFFF
%CFFFCFFFCFFFCFFFCFFFFFFFCFFD0BFFCFFFFFFFCFFFCFFFCFFFCFFFCAFF
%CFFFCAFFCFFF76A8FFFFFFA8767CCFA8CFA8CFA8CFA8CFA8CFA8CFA8FFA8
%CFA8FFCACFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCACFA8FFCACFA8FFA8CFA8
%CFA8CFA8CFA8CF7C7CFD0AFFA876A8CFA8CFA8CFA8FFA8CFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCFFFA8FFCFFFA8FFCAFFA8FFCAFFA8FFCACFA8FFA8CF
%A8CFA8CFA8CFA876A8FD04FFA8767CCFCACFCACFA8FFCFCFA8FFCFFFCAFF
%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF
%A8FFCFCFA8FFA852A8FD0BFF52A7CFCFA8FFCFCFCAFFCFFFCAFFCFFFCAFF
%CFFFCFFFCFFFCFFFFFFFCFFFFFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFFCFCF
%A8FFCACFCFA776FD06FFA87652A7A8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CF
%A8CFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CF
%A8CFA8767CFD0CFFA851CFA8CFA8CFA8CFA8CFA8CFA8FFA8CFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8CFA8FFA8CFA8CFA8CFA8CFA8CFA8CFA8
%CA51A8FD08FFA8767D7DA7A7FFCFCFCAFFCFFFCAFFCFFFCAFFCFFFCFFFCF
%FFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA7C76FD0E
%FF7D7DFFCAFFCFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF
%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCAFFCFFF7C7DFD0BFFA8A87D
%7D52CFA8CFA8CFA8CFA8CFA8CFA8FFA8CFA8FFA8CFA8FFCACFA8FFA8CFA8
%CFA8CFA8CFA8CFA8CFA8CFA8FFA87652FD0FFFA852A7CFA8CFA8CFA8CFA8
%CFA8FFCACFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCACFA8FFA8CFA8
%FFA8CFA8CFA8CFA8FFA752A8FD0FFF7D7CFFCACFA8FFCACFA8FFCFCFCAFF
%CFFFCAFFCFFFCFFFCFFFCAFFCFFFCAFFCFCFA8FFCACFA8CFCFFFA1767DFD
%11FF7D76A8FFA8FFCACFA8FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF
%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFA8FFCAFFA776A7FD10FFA8527DFF
%A8CFA8CFA8CFA8CFA8CFA8FFA8CFA8FFCAA876A1A8CFA8CFA8CFA8CFA8CF
%A8CFA8CFCACA5252A8FD13FF7C76A7CFA8CFA8CFA8CFA8CFA8CFA8CFA8FF
%A8CFA8FFA8CFA8FFA8CFA8FFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA752
%7DFD12FFA8767CCFCFFFCFFFCFFFCAA77CA1A7CAA8CAA1A17DFFA8A17DCF
%CFFFCAFFCFFFCAFFCFFFA8A152A1FFFFA8CAA7CFA8FD0FFF7D76A7FFCFCF
%CAFFCFFFCAFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFF
%CFFFCAFFCFCFCAFFA7767DFD14FFA87D527C7CA7A1A17C7DA8FFA1A17C7D
%7CA7A8FD04FFA87CA1A1CAA8CFA8CFA7A776527CFFFFCFA1CAA7CAA7A87D
%A8FD0EFFA7527CCFCFCFA8CFA8CFA8CFA8CFA8FFA8CFA8FFA8CFA8FFA8CF
%A8FFA8CFA8CFA8CFA8CFA8CFA8CFCFCA7676A8FD18FFA1A17CA17DA8FD10
%FFA8A87D7D767D767C76A8FFFFA8CAA7CFCAFFCACFCACFA1A8FD0FFF7D52
%A1A8FFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFA8FFCF
%CFA8FFCACFA8A1527DFD33FFA8FFA8FFA8FFFFFF7DA7A7CFA8CFA8CFA8CF
%A8CF7CFD10FFA87C7C767D7DA7A7A8A7A8A7A8A7CAA7A8A7CAA7A8A7CAA7
%A8A7CAA8CFA8CFA8CFA8CFCAA152FD3CFF7DA8CFFFCFCFCAFFCFCFCAFFCA
%A1CAFD13FF7DA87DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA1CF
%FFCFCFCAFFCAFFA7A8FD3BFFA87CA8CFA8CFA8CFA8CFA8CFA8A77DFD2BFF
%7DA1CACFA8CFA8CFA8CA7DFD3CFF76A8CFCFA8FFCACFA8FFCAFF7CA8FD2C
%FF7DA1CAFFCACFA8CFCFA8CBFD3BFFCA52A1A7CFA8CFA8CFA8FFA776A8FD
%2DFF7D7DA7CFA8CFA8CFA7A8FD3DFFA7A17DA8A8CFA8CA7D7CA7FD2FFFA8
%A1A7CFCACFCACFA8FD3FFFCAFD047D7CA8A8FD31FFA8A87DA8A8CFA8CFA8
%FD48FFA8A8A7CFFD2EFFA8A8A7CFCFCFA8FD46FFA7A1A7CA7CA8FD2FFFCF
%A8CAA8CAA8FD45FFA1A8FFCFA87DFD33FFA8FD46FF7DA1CACF7CA1FD7BFF
%7C7D767DFD7DFFA8A8FD3DFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreateDate>2018-05-31T15:02:41+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2017 (Windows)</xmp:CreatorTool>
         <xmp:ModifyDate>2018-05-31T15:02:41+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2018-05-31T15:02:41+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>216</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA2AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqptdWyirTIo8&#xA;SwGCwtKTappqmjXcKnwMiD+ODjHemipnW9FU0a/tgR1Bmj/rg8SPeF4StbX9DUVOoW30Sof1HHxI&#xA;94XhK3/Eeg/8t8H/AAYx8SPenhLv8R6D/wAt8H/Brj4ke9eEr/07on/Vwtv+R0f9cfEj3hHCVy6z&#xA;o7/ZvrdqdaSof44eOPevCVRdR09hVbqJh4iRT/HHiHetFWWWJzRXVj7EHJWhdirsVdirsVdirsVW&#xA;yyxRRtJK6xxqKs7EBQPcnElUnk8zQyErptvJen/fv93D/wAjG6/7EHKTmHTdmId6g9xr8/27mO0X&#xA;+S3Tm3/By1H/AAuVnJIsuEKbacJN7i5uZ/Z5nA/4FCi/hkTZ6pW/oPSj9q2Rz4uOR+9q4OELbv0H&#xA;pP8Ayxxf8AMeELbho1iv90rwkdDFJJHT/gWGNLa9bfUod7bUp1/yZuM6/wDDDl/w2SEpDqigqLrW&#xA;t23+9Vol3GOslq3F6f8AGOQ7/Q2TGY9QjgCY6frumX7mKGbjcD7VtIDHKP8AYNQ/dlscglyYmJCP&#xA;ybF2KuxV2KpFrmsXP1kaXpzBboqHubmgIhQ9Nu7t2GUZclbDm2Qj1KWrotgfinQ3Mp3aWdjIxPia&#xA;5i1bZaoukaYOlpD/AMi1P8MNLasun2QNRbxA+IRf6YaRaqtpbA1ESA+IUYaRa/0Iv5F+4YaW3ehF&#xA;/Iv3DDSLd6EX8i/cMFJtxt4v5F+4Y0tqZsrX/fKf8CP6YKW1JtM08ihtYiPAxr/TBwptRfRtLPW0&#xA;h+hFH6hgpNqf1CazPr6TIbadd/RJJhkp+y6Hb6RhiTHkg782RaNqsep2QnVTHKjGO4hPWORftKcz&#xA;IT4hbTIUUdk0OxV2KpTquvx2s31Kzj+t6iRX0QaJGD0aVv2R7dTlU8gG3VlGNpZ+j5bqQT6pN9bl&#xA;BqkVKQR/6kfT/ZNU5jkk82zlyR4XDSFwXDSrguNK3xw0h3HGla440lorgpWiuClQd7plneKBcRhm&#xA;X7Eg2dT4qw3GAhIKjFqer6PQXRfUdMHWbrcxDxb/AH4Pfrk45SOe4QYgsktLy1vLdLm1lWaCQVR1&#xA;NQcyQQeTWRSthQ4kAVOwHU4qw3RCZ7aTUH/vr+Rp2PgpNEX5BAM15Nm3ITIDCheBhQvC5KkLguGl&#xA;XBcNK3xxpDuONK0VxpK0rgpVpXBSrCMilYRgSoaUxtfMpRdotQgZmXt6sBFG+lHyzAfVTGfJk+Zb&#xA;U7FUi1/WbiOZNK00j9IzrzklIqtvF09Rh3Y9FGVZclbDmzjG90Pp+nwWUPpxVZmPKWVzV5GPVnbu&#xA;TmMAzJRgGSQvC5JVwXDSFwGGlbpjSuphpXUwUq0rgpWiuBVhXAlYRgVJ5VudDuG1LT1L2bHlqFgv&#xA;Rh3liHZx3HfGMjE+SSLZbaXdvd20VzbOJIJlDxuOhBzLBtpIbuf95pf9Rv1YlQxLy5voVgf+KE/V&#xA;mAHIKaKMkGKoBkgheFySrwuGkLgMNK7jhpDuONK0RgpLRXBSqZXIpWEYFWMMiUoWID/Emmf6lyR/&#xA;wK5PF9Sy5MnzLaULq2pQaZptzfz/AN3boXI6FiPsqPdjsMEjQtIFljmiWk8cD3d58Wo3zevdt4Mf&#xA;soPZF+EDMLnu3FMwMkxVFGSVeBhQuAyVIXBcNKuC4aQ7jjStFcaS0RgpVpGRISsIyKrGGBKmRkUp&#xA;foEp0rXJNIO1jfhriwHZJV3miHsR8Y+nLMMqNImLFsnuv95pv9Rv1ZkFqDEvK+/l7Tj/AMu8f/Ec&#xA;wQ3lNlGSCFRRkghUAyQQvAyQCFwXJUq7jjSHccaVaVwUlYRgIVaRkSlTYZFKmwyJSgk28zaWPGO5&#xA;/wCIpksX1IlyZRmW1MY86yetJo+l/s3l2JJV7NHbKZWU/wCyC5TnO1NmNGLlDJeoySFQDCELwMkF&#xA;XgZJC8DJIXBcNIb440q0jGlWkZFKwjAlYRkSlYwyKVMjIlUj80v9Ws4NTGz6bcw3APSq8wjivgUc&#xA;4Lo2yDMLv/eWb/Ub9RzMLQGJeUzXy3ph/wCXeP8A4iMwg3lOVyQYqi5IIVBkgq9RkghUAyQQvC5K&#xA;kNFcaVYwyJSsYZEpUzkSlTbIlKm2RKoAH/nadJHjHdf8RTJYvqWXJlOZTUxTzXyHmjy21aIfrqU3&#xA;3YxKw/BTlGfo2Q6pgMpDJUXJIVFyQQvGSCF4yQQqDJBC9RhVcQKYVWNgVTORKVjZEpWHIlKm2RVT&#xA;bIlKQ+d24+VtR2JLRhQB1qzBR+JyJZR5syu/95Jv+MbfqOZpaAxDyga+WNLP/LtH/wARGYQbyna5&#xA;IMVVckELxkwqouSDFUXJBCopGSVzEYqptkSqk2RLJYcgUqbZEqpNkSlLif8AnbNHH/Fd3/xFMli+&#xA;pZcmV5lNTGPP8LR6XbatGCW0i6jupAOph3jmH/APy+jKswsM4HdFxsrKGUgqwqCOhBzHDNUXJIVB&#xA;kgheMkELwckqoDhQuDZJDfLFWicCqZOBKwnIpWHIlKxsiqm2RSk+uwG+m03SgKi8u43nH/FFsfXk&#xA;P3oq/M4xFlN0GV3n+8k//GN/+InMstIYf5MNfKukn/l1i/4iMwg3lPFOSDFVU5IIXg5IKqKckELw&#xA;claFwbDaHFsbVaTgSpsciUrCciUqbHIlKm2RKpYx/wCdu0Uf8VXn/EEyWL6llyZbmU1LJoYpoXhl&#xA;UPFKpSRDuGVhQg/MYqwvRfW0m8k8t3jlntlL6ZO3+7rOtFFf54q8G+g98xJR4TTdd7p8DgQqKckq&#xA;8HCELgckheGyVq2Gw2hvljatFsFqtJwJWE4CVWk5FKmxyKVNmABJNANyTgKu0KzM1zJq8q0MiejY&#xA;g9oKhmf2MrAH/VC965fijW7GR6JvcRtJbyxr9p0ZRXxIplrBhPkhw3lPSadVtkVh4Mo4sPoIzAcg&#xA;p+pyQYqinJIXg5IIXg4QVXBslaF3LDau5Y2q0tgtVpORJSsJyKqbHAUqbHIlKWE1856Io3IgvXI8&#xA;FCxCv3sMni+pEuTL8ymp2KpX5h0CDWLNYzIba8gb1bG9QAyQyj9oV6qejL0IyMo2ExNJHp+rXCXY&#xA;0nWIxa6uoJSn9zcqvWS3Y9fFkPxL38cxiCObbzTgHFC8HCheDhtWwclat8sbQ7ljau5Y2rROC0rS&#xA;cFqsJwJUppooo2lldY4kBZ3YhVAHUknYDIqpWVpJqpEsyNHpg3WNwVa492U7rF7Hd/8AV+1bDH1K&#xA;DJkGXtbsVYNZRtouu3eiTfDbXMkl7o7nYNHKec8I/wAqKRiafykZiZI0W6JsJ2DkAqoDkkLw2FV4&#xA;bDaFwbDau5YbV3LG1aLYLVaWwWqwtgSsJyKVN2ABJNANyTgKUN5Vh+v6ldeYNjatGLPTG/nhVucs&#xA;w/yZJAAviEB75kYY1uwmejKMua3Yq7FUHq2j6bq1obW/hE0VQympV0cdHjdaMjDsymuAgFINMdls&#xA;vM2i/YVtd01ehBVL+NfcErHPTxHFvZjlEsRHJmJAq+m67pmoM0dtOPrEf99ayAxzxn/LicK6/SMg&#xA;mkxDY2rYbDaG+WG1b5Y2rXLBatFsbVaWwWlLL/U7tbxNO06za91CSMyhS6xQxxhuPOWQ1IFeyqx9&#xA;sQCeSozT/LMrSpd63OL65Qh4rZFKWkLDcFYySXYfzuT/AJIXL44wGJkn2WMHYq7FUBrOiWGsWgtr&#xA;xT8DCSCaM8JYpV+zJG43VhX+u2CUQeaQaSyHQ/MFuhT69BeAD928sTRSHw9QozIT7qi/LKDg82fG&#xA;vNl5hBULb2jCnxE3Mq7+w9Bv14+CV4g2lr5j35W1mN/hpdSmo9/9HGPhFeINRJrpH7ywRT2Czhv1&#xA;quPhleINO+uKxUaWzgftLNFQ/eQcfDK2GvW17/q0P/yPg/5qw8BWwtefzCF+DR2Zuwa4hUfeCceA&#xA;rYU/U82MtV0eJWr0kvFG3twjkweGVsKLDz67FY9J0+MdpJb+Uin+qlqTj4ZXiCG0nW79tUu9F1qC&#xA;K01e3AmjSF2eKa3fpLEzqjNxaqt8OxyuQIZJwTkbSksflubW9eu11O/mbSIFheLSY+McUgcMD6zq&#xA;PUdS8Z+Amn0bZbigCxlKmboiooRAFRQAqgUAA6ADMlqbxV2KuxV2KuxVA6poWj6qirqNnFcmPeJ3&#xA;X40PijijIfdTgMQeaQSEpbyjd29P0XrN1boOkF1xvYvvkpP/AMlcrOIMuNTNn52g6Jp1+B+0JJ7M&#xA;n5KUux9HL6cj4RTxBo3PmlDR9CZ/eG6gYf8AJQxbYPDktha175l4nj5enLdgbi0A+/1TjwSWwtJ8&#xA;8zErDpNnbjtJc3rH6eEUD1/4IY+GVsKGoaF+Yc1hcSQ6tZW14kbNbW1vaswaQCqq8s7tsTttHh8I&#xA;rxBV8t6/BrelR3iKYZwTFeWrbPDcR7SRODuCrePbKWVJhYRhNfSboJrZ4mJp9pHV0A96M5+jLcJ3&#xA;Yy5J/mQ1uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVJPM/le31uCKRJTZ6rZkyadqMYBeFyKEEH7c&#xA;b9HQ7EZGUQQyjKkjs9Xu4bldN12AWOqH4YmBJtrmn7VvIep7mM/GPCm+YkoENoN8k6tZhb3Kzb8S&#xA;OEgFT8J3rQdaH+OHHOiiQtPQQQCDUHcEZmNLsVdirsVdirsVdirsVdirsVdirsVdirF9Y8ozjVH1&#xA;zQJEtdSmAF9ayVFvdqoPH1OILJIO0ig+4OVTx2zjPvWR6i0bKb2GTTrmNgQLgUTl/kSqfTevgrVp&#xA;1AyipRNs9iyK11C3uKLXhKRX0yev+qf2hmTCYk1GNInJodirsVdirsVU57iC3iaaeRYok3Z3IUD6&#xA;TgJpaSZ/NltISLC1nvB2lVRHEfk8hX9WUnOOm7MYy5fMd/WsmluF78Jo2b7jx/Xg/MeSfD80xsNW&#xA;s70lIyyTKKvBKpSQDxoeo9xtlsZiXJgYkIa98wQRStb2kTXtyho6oQsaHweQ7A+wqcjPKBtzZCFo&#xA;JtU8yMaqtnGOyESyH/ggU/VlXjS8mXAHLrWvQms9rBcp39BmjcD2WTkD9+IznqF4AjYvM+jyQlzK&#xA;0cini9syt64bw9MAsfmNstGaNWw4CpN5ptlP+8V4U/nEQ/Vy5fhkfHj5p8Mq8N7oWu28lsRHdR/7&#xA;utZk3FD+1G48csjOMuSCCEP/AIaMApYXkkUf7MNxW5RR/klmWX75CB2GQlhBSJo7TYL+DnHcGNoR&#xA;T0WQsW/yqggUHgKnJwiQKRI2jcmxdirsVdirsVdirsVdirsVdirsVdirsVdiqmLe3EnqCJBJ15hR&#xA;yqeu+NKqYq7FXYq7FUNqOoW2n2U15ctxihWpp1J6BR7k7DBKQAspAtiyW91qkq32rCp+1b2PWOFT&#xA;0qP2n8ScwZSMju3AVyTIKAKDoO2NKuC4aVZNaxzAcqqy7pIhKup6VVhuMaQuhtooYliiQJGuwUYg&#xA;La/jhpXccaVb6S8i1ByIoWpvQdq4KW2iuCkpfqdhI4F3aH0tRt/iglXqafsN4q3TBy3CptZebNEn&#xA;tLaaa8hgknRWaN3A4seqmvSh8czI5Ykc2owKcI6OgdGDIwqrKagg9wRljFvFXYq7FXYq7FXEgAkm&#xA;gHU4qom+sgaG4jBHUc1/rg4gmmvr9j/y0Rf8Gv8AXHiC076/Y/8ALRF/wa/1x4gtO+v2P/LRF/wa&#xA;/wBceILTvr9j/wAtEX/Br/XHiC076/Y/8tEX/Br/AFx4gtO+v2P/AC0Rf8Gv9ceILSsjo68kYMp6&#xA;EGo/DChvFXYq7FXYq7FWN+aqzajo9k39y8ktzIvibdRxH/BSVzHznkGzGrBcppkvC4aVcFw0hsLh&#xA;pW+GNK3wxpWuGNK0VxpVpXBSrSuCkqUsMciGORA8ZFCjAEEfI5GkpXp00mga1b2yMTo+pP6SxMSR&#xA;DOd14V7P4ZPFOjXREhYZrmY0uxV2KtSSJGjSSMERAWZmNAANySTirFbvzZe38zW+gxAxqaSahMDw&#xA;B/yF7/57ZjTz9Itox96FOhG5PPU7ua9furMVjHyVemUGzzZ8uSITQNIXpaRn5iv6648IRa8aHpP/&#xA;ACyRf8CMPCFtv9B6T/yxxf8AAjDwhbb/AEHpP/LHF/wIx4QttfoPSf8Alji/4EY8IW3HQ9J/5ZIv&#xA;+BGDhC2sbQtJIobSP6FA/VjwhbQ7eXLJG9SzeWzl7SQSMp/EnBVck2vj13X9H3v1/SNgPtXEY4zI&#xA;PFh0P+e+WRzEc92JgDyZTYahZ6hbLc2kolhfow6g+BHUHMuMgRYaiKRGFC2WWOKNpZWCRoCzuxoA&#xA;BuSScVYm2u6nrjt+jXNjpCkqLzj+/noaExBhRE/yiK5jTzE8m0Qrmr22l2sMomo8twAQJ5neV/i6&#xA;/E5alfbKko0DJIXhcNKvC4aQ2Fw0rfHDSt8caVrjjStFcFKtK4KVYVwJWEZFKS+YvTaTSrdmVHmv&#xA;4ODOaAcDyY1PsKDxwAbhPRmuZzQ7FXYqwfVtQn8xanJp1s5TRrNgLqVdvWkB+wD/ACj+3wzDy5OI&#xA;0OTdGNbprb28UESxRIEjQUVR0AyACVYLhpC8LkqQuC4aVdxxpXccNK7jgpVpXGlWlcFKtK4KSsK5&#xA;GkpBci48u3v6W09SbJyBqFmv2Sp/bUdqf57VxjIxNpItnNrdQXdtFc27h4ZlDxuO4OZwN7uOQxHz&#xA;ZePqusw+WoWItYlW61d1PVK/u4f9kdz7ZRmn0bYDqmkaIiKiAKigBVGwAHQDKQyVFGEIVFGSQqAZ&#xA;JC4DDSFwXJUq4LhpDfHGlaK40laVwUqwjIkJWEZFVjDAlBanp1tqFnJaXK8o5B1GxUjcMp7EHIkJ&#xA;Bb8m6zdXCXOkak3LVNLYI8h/3dCw/dy79yPtf25kYp2KLCcaZJlrBIfO2ryaZoEzwki6uSLa2p15&#xA;ydx7hQSMryyqLOAsoDRdNj07TobVQOSrWRh3c7sfvzDAbSUxAyQYrwMkheFySrwuGkNhcNK3xw0h&#xA;3HBSVpXBSrSuClUyuRSsIwJUpY0kRkcBkcFWU9CDsRkSlL/IlzJZ3mo+XpWLC0b17Qk7+jJ1H0Ej&#xA;6Scu08ujHIOqXeTZfrw1PWmPJ9SvJGVuv7qI8I1/2IrlRNm2fLZkq4hiqLkghUUZIIXgZIKqKMkE&#xA;LwMkheFw0hvjhpVpXBSrCMiUqZGRKVhGRKVjDIpU2wFWO30h0/ztoV+my33qafdU/aDDlF9z74cZ&#xA;qSTuGeZltLDPO7GfzD5csf2DLNcMPExKrL+o5jajo24+qaqMqDJUUZIMVRRklVAMICFwGSpC8Lkq&#xA;VvjjSGiuNKtK4KSsIyJCVjDIqpsMiUqbDIlKQ8/q35g6TIDQXtvNBJ78FLj8aZLF9SZfShPy2f8A&#xA;51G0iO0kDzxyr4MJnNPxyCZMqXCGK9ckEKq5IIXjJBV65MIVFwhCopySFxIwqsY4FU2yJSptkSlY&#xA;ciUqbZFKm2RKsX81fvNc8rWyk+q+pxzADrwhHJ/wOMfqDLoXoWZjQwrzaf8And/LQ8Uu/wDk1mNn&#xA;5htx8inC5UEqq5MIVFGSCFQDJBC9RkghUC5KkLuOGlWlcFKsYZEpU2GRKVjDIlKk2RKVNsiUse1Q&#xA;086eVx4vdf8AJtccf1BJ5FQ0yH9Eeeda0WKjWd2i6tCP99vK3CRPpYVHgMOSNSUGwydTkQhepyQQ&#xA;qKckqoDkgheDkkLw2G0Lg2G1b5YbRS0tgtK0nAlYTkSqwnIlKmxyKVNjkSljXl9P0959uNVT4tN8&#xA;vxtZ20n7L3co/fFT/kIeJ+jLMMd7RM0KegZktTB/N5/53zywPGO8/wCTWY2fmG3HyKeLlYSqLkgh&#xA;VXJBC9ckEKi5IIVFOTCFSophVYxwKptkSlTbIlKm2QKVNsiUqTZEpY3q5p548qDxku/+TS4cf1BJ&#xA;5FT1wjTvzVtZpQFg1nTWghc7Vngk5lf+Apk8w3RDkyUHKQlUByQQvBySF4OFC8HJWq4NhtDfLDat&#xA;8sbWmuWNqtJwWq0nI2lYWwJWE5FUp80Xv1Ly5qd0HMbQ2szI4NCGCHjQ+PKlMiWQTDyBYRWPkvRo&#xA;Y4xEWtIZpVApWSVBI5NSdyzGuZkBQDVI7p/kmLBPPhNv5w8p3h/u2kubc+AaWNVX7+WY+fo24+RT&#xA;5cpCVRTkghVU5IIXg5IKvU5MIVA2G0N8sNopotgtKxjgKrCciUqbHIlKmxyJSpsciUsYuv8ASfzM&#xA;8vW43FpBc3Mgr0DoUU/8Eow4vqTL6WR+dvKkfmTSBbpL9V1G1cXGm3o6xTpup2/ZPQ5lTjxBqjKi&#xA;xrQvNjNcjRfMEX6M8xRAK8EtFjuKbepbv9l1bwG+YcokN3uZODiheDhtC4NhtC8NhtVwbDaG+WG1&#xA;dyxtXcsbVaWwWq0tgtKwtgtVpOBLCvN0knmPWLTyTYMW9d0uddlXpDaRkNxJHRpGpT6OxwwjZTdC&#xA;3p8caRxrHGoVEAVFHQACgAzMaF2KsT/M3SLm/wDK0k9mK3+lyJf2tBUloN2A/wBgTt45XljYZwNF&#xA;2iatb6tpVrqNuaxXMYenXi3RlPurVBzEDYUxU5IIVFOSQqA5IFC4HJWhcGw2rfLG1potjatE4LVY&#xA;TkbSsY5FKmxwFVNmAFTsB1ORLJjv5dodY8wa15qIJtXI0/TGPRooqGRx7MwBH05dhj1Y5D0egZkN&#xA;SA1nQdG1u0NpqtnFeQdQsi1KnxRvtKfdTXAQCkGkii/Lu1tSBp+tarZQr9i3WeOeNQOgAuo5zQeF&#xA;crOGLLxClflXW72V7nQ9acDzDpjFLoEBPXir+7uI1AA4OpHTocx5Ci2MjDYLQuDYbVvlhtDfLG1Q&#xA;Woa9pGnSww315FbSXBpEkjBSff2Hap2rthtaRvPBatFsbVaWwWlY8iqpZiFVRUk7AAYLViVz5o1P&#xA;XrmTSvJcQupkPC61qQf6FbV6kN/u1/BV/HJRgSk0ObLvJ/k7T/LNg8MLvc3t03q6hqE28s8p6sx7&#xA;D+Ve3zqcyoxAapStPskxdirsVeYXcTeQ9ddXBHlHVpeUEoHw2Vy/VH7LE/bw+gk4uSFG2+JsebMI&#xA;3VlDKQysKqw3BB7jK0KobJIXhsNquDYbQu5YbV3LG1dyxtWi2C1WFsFpWFsFqsJyKWI+Y7++1zUD&#xA;5S0Fv9JmH+5e+XdLS3P2gT09RxsB/tgxiZFN1u9A0jSrLSdMttNsk9O1tUEca99upPux3PvmYBTS&#xA;TaLwodirsVSHzP5N0rzB6M8zS2mpWlfqep2renPFXtXoynurbZGUAWUZEJENG/Myx/dpcaZrEK9J&#xA;ZhLZztv3EazRfqyg4Sz4wioNH8+3Z43Vxp+lxN1a2Et3MBToDKIY1b3KsPbCMJ6qZhXm/LvTWImt&#xA;tR1Gzv6AS3sVyzPKR0MqSB4W+hBToKZZ4QY8ZWDyNqznhc+adQeDaiRR2kL0HYyLDyweCF4020jy&#xA;poWlRzC2tuctyON1c3DNPNMD1EkkpZmH+TWntkxEBiZEpdP5MntCZPLl8dPXr+j51NxZV8ETkrwj&#xA;2jcL/k5CWIHkyE+9ASz+fLb4JfL8V8w29WyvYwp9+NyIGX7zlRxSZcQUGvvzBnolt5WFuzdJry9g&#xA;CL7lYTK5/DB4Uk8QQN95XuLiaJPOurtemb4ofLmlK0UL06+o1RLIvuxUDJcEY814ieTI4VmEEdnZ&#xA;wjR9LhULFa2/BXPc1ZKqg/1d/fBLITy2CBHvcdPA3jubqJ/9+LPKT/wzMPwyuz3slTTdcvrbVoNJ&#xA;1JxOt2HNleAcWLIOTRyAfDWnQjLseQ3RYSjtYZLmQ1uxVRvbK0vrWW0vIUntplKSwyAMrKexBxIV&#xA;gMnlfzT5VYny/XWtBrUaRO4W6twe1vK3wuo/lbfw8cx5Ye5tEwearZ+ffLksv1e8mbSr0fas9SQ2&#xA;so/5GUU/7FjlVEMqT6C8tZxWCZJRStUYNt9BxtFK4bDaF3LG1dyw2ruWNq0WwWq0tgtKhdXMdvby&#xA;3ElfThRpHoKnioqaDBaWNQv5y81oo0uBtA0SYAnVLkA3csbCv+jwg/BUdHY+4yyOIlBkAzLy35Z0&#xA;jy7pwsdNi4ITzmmc8pZZD1eR/wBpjmRGIHJqMrTXJIdirsVdirsVdirsVdirsVdirsVdirsVYHfX&#xA;K6X57v31Q+jBqkUC6VdyGkf7pKSQczsrF/i498xcoPFbdHknuVpbxVJ9NeLUvPxiJ9SLRLQSjj0W&#xA;5uSVo57n0hUZbiFm2MzszbMlqdirsVdiqjd2NleRejd28dzF/vuVFdfuYEY0qSyfl75Fkbk2gWAP&#xA;+TbxqPuUAZHgHcy4it/5Vz5D/wCrBY/8iE/pjwDuXjLv+Vc+Q/8AqwWP/IhP6Y8A7l4y7/lXPkP/&#xA;AKsFj/yIT+mPAO5eMu/5Vz5D/wCrBY/8iE/pjwDuXjKC1HyLZWCrqHlSzgsNUt61t4wIorqI05Qy&#xA;0G1aVRv2W9q5GeMEbJE+9dpmsW2oJIEDQ3UDcLuzlHGaF/5XX9RGxG4JGYp2bEW6rIjI45IwIZT0&#xA;IOxGRVFeUlMOgWtixrJpyizYnckQALGx93j4t9OZuM2GqQ3TjJsXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYqpXVnaXkDW93BHcW77PDKodG+asCDjSsdm8g2Ebc9GvbrRT/vq1ZHtz/zwnWWNf8AYgZW&#xA;cQLMTKi3kfVJ6re+Zr5oT1jto7a2J/56LGzj/YkZEYQnjR8Vv5e8oaYsVpbmNZpKLGlZJ55m7szE&#xA;s7HxY5IkQDHeRX2/miI3UNve2stkbhgkEjlWRnPRCyE8WPYHIxzAmkmCd5cwdirsVdirsVdirsVd&#xA;irsVdiqV6v5c0/UpUuW522oRLxhv4CEmUdeJqCrpXfg4K+2RlAHmyEiEv+o63a/DcIl5GOlxbjg1&#xA;PF4XJ/4RmJ8BmPLCRyZiYX2d4sF1zWoZlHrQMCsnEfZPBqMCK7V/pghIxO6yFp/HIkiB0PJG3BGZ&#xA;YLUuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksc856Pql5HY3+lKs1/pkxlS0kbgsyOvF0&#xA;5HZWp9knbK8kOIM4SpIxa+atevbGCfSX0jT7a4jubu4uJYndvSPIRxJEzfaP7RyqOI3uzMgGf5kt&#xA;LsVdirsVdirsVdirsVdirsVdirsVWyRRSoUlRXQ9VYAj7jirUUEMIIiQIrGpCigrQDoPYYAKW1+F&#xA;X//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <pdf:Producer>Corel PDF Engine Version 19.0.0.328</pdf:Producer>
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default"/>
            </rdf:Alt>
         </dc:title>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1507.331175</stDim:w>
            <stDim:h>1261.019391</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:fc06c981-5671-0e4f-a6de-f71d52d0f874</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:fc06c981-5671-0e4f-a6de-f71d52d0f874</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:8b30317e-422f-4d49-9335-cfdf14f5d2a0</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:cb1475c1-cf59-449f-b214-f97553fa21bb</stRef:instanceID>
            <stRef:documentID>uuid:8b30317e-422f-4d49-9335-cfdf14f5d2a0</stRef:documentID>
            <stRef:originalDocumentID>uuid:8b30317e-422f-4d49-9335-cfdf14f5d2a0</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fc06c981-5671-0e4f-a6de-f71d52d0f874</stEvt:instanceID>
                  <stEvt:when>2018-05-31T15:02:41+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1206.57 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1206.57 li
1442.25 1206.57 li
1442.25 0 li
cp
clp
111.954 46.4705 mo
272.614 36.6795 434.17 36.6795 594.829 46.4705 cv
627.875 48.4841 661.961 94.3279 661.961 138.524 cv
661.961 219.524 661.961 300.523 661.961 381.523 cv
661.961 421.54 634.014 462.907 604.2 471.866 cv
602.982 508.045 625.055 532.609 654.704 566.12 cv
587.435 560.945 526.705 518.531 504.94 478.029 cv
373.995 483.027 242.678 481.543 111.954 473.576 cv
78.9093 471.562 44.8224 425.719 44.8224 381.523 cv
44.8224 300.523 44.8224 219.524 44.8224 138.524 cv
44.8224 94.3274 78.9088 48.4841 111.954 46.4705 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
gsave
[.00152075 -435.664 435.664 .00152075 353.391 474.949 ]ct
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~H?sm`H?sm`H?jd]H$O[\H$FRYG^+IXG^+IXG^"@UGB\7TGBS.QG'8%PG'.qMF`__IFE;MEF)uDDF)l;A
EcQ2@EcQ/>EH,r:E,]c8E,]`6Df9Q4Df9N2DJj<.D/F**Ci!m&CMR["C2.KuC2.HsBk_6oBP;$kB4kgg
AnGXdAS#F`A7T4\@q0"X@U`eT@:<SP?smAM?smAL?X@&E?!U`@>[1N=>[1N<>?b<8>$5!1=BJ[,='&I(
<`W7%<E3%!<)cgr;c?Un;GpCj;,L.d:JXb^:/4PZ9he>V9MA,R91qlL8P)HD7n6'>7Rfj:77BX66psC0
~>
<~P*1ujOcYZdOH5H`O,f6\NfK-[NfB$WN/NUPMi*CLMMd:JM26tDLkgb@LPCP<L4t>8KnP,4KS+o0K7\],
JqAQ)JUr?%J:N-!It)orIXZ]nI=6KjI!g9fH?sj^H$OXZG^+FVGB\4RG'8"NF`heJFEDSFEcQ/>EH,r:
E,]c7Df9Q3DJj?/D/=$(CMR^#C2.KtBk_9pBP;'lB4baeAS#F`A7T4\@q0"X@U`eT@:<SP?smAL?X@&E
?!U`A>[1N=>?b<9>$>'3=BJ[-='&I)<`W7%<E3!t;c?Un;c?Un;Gp@h:f'q`:/4PZ9he>V9MA)P8kM]J
~>
<~['[3I['[3I['R*FZa-mBZEgdAZE^[>Z*:I:Yck76YHP.5YHG%2Y-"h.XfSV*XK8M)XK/D&X/`2"WiE)!
WiE%tWMuhpW2QVlVl-DhVP^5fVP^2dV59u`Unjc\USFQXU8"?TTqS0RTqS-PTV.pLT:_^HSt;LDSXl:@
S=H+=S"#n9R[T\5R@0J1R$a8.R$a8-Q^=&)QBmi%Q'IW!Pa%DrPEV2nP*1ujOcbcfOH>QbO,o?^NfK-Z
NK&pWN/W[QMMd:KMMd7ILkpkCLPLY?L5(G;KnY57KS4u1JqAT+JUr?%It)orI=6NlI!g<hH[C*dH?sm`
~>
<~<E3$u<)Z[l;,C(b:JOYZ9h\5R91hfJ8OuBB7n,s:779L16:!n&5X.Is5!;%k4?GVc3]T2[3&`cS2Dm?K
1c.!E1,:R=0JG.50/"q1/M/M).k<)!.4HYn-n$Gj-71#b,U=TZ+sJ0R+X%sN+!2OF*Zc=B*#on:)]K\6
)&X;/(`4)+(D[c$'bqGt'GM5p',)#l&eYfh&J,Ka%hB0\%LrsX%1NaT$k*OP$O[=L$4."E#RC\@#6tJ=
#6tJ="pP89"U,&5"9\i1"9\i1!s8W-!s8W-!WiE)!WiE)!WiE)!<E3%!<E3%zzz!!!!!~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
gsave
117.839 53.886 mo
274.583 44.3338 432.201 44.3333 588.944 53.886 cv
621.184 55.8504 654.44 100.577 654.44 143.696 cv
654.44 222.721 654.44 301.746 654.44 380.771 cv
654.44 419.813 634.111 459.132 598.125 462.046 cv
596.97 496.347 624.653 532.155 652.763 563.927 cv
588.984 559.02 530.264 507.9 509.629 469.499 cv
386.044 480.372 245.377 478.353 117.839 470.581 cv
85.6002 468.616 52.3439 423.89 52.3439 380.771 cv
52.3439 301.746 52.3439 222.721 52.3439 143.696 cv
52.3439 100.576 85.5997 55.8504 117.839 53.886 cv
cp
eclp
52.3439 44.3333 mo
654.44 44.3333 li
654.44 563.927 li
52.3439 563.927 li
52.3439 44.3333 li
cp
.041474 .0713512 .187747 0 cmyk
f
655.44 283.653 mo
655.44 395.484 li
655.44 408.21 li
656.015 408.21 li
653.666 412.397 651.203 416.527 648.629 420.598 cv
643.48 428.74 637.886 436.644 631.876 444.286 cv
619.855 459.571 606.166 473.808 591.035 486.806 cv
530.509 538.797 446.895 570.955 354.536 570.955 cv
262.177 570.955 178.562 538.797 118.037 486.806 cv
87.7741 460.81 63.2838 429.856 46.359 395.484 cv
51.3439 395.484 li
51.3439 171.823 li
46.359 171.823 li
63.2838 137.45 87.7741 106.496 118.037 80.5003 cv
133.168 67.5027 149.742 55.7444 167.536 45.4182 cv
171.984 42.8367 176.509 40.345 181.106 37.9456 cv
181.106 43.3333 li
527.965 43.3333 li
527.965 37.9456 li
532.563 40.345 537.088 42.8367 541.536 45.4182 cv
559.329 55.7444 575.903 67.5027 591.035 80.5003 cv
606.166 93.4983 619.855 107.736 631.876 123.02 cv
637.886 130.662 643.48 138.567 648.629 146.708 cv
651.203 150.779 653.666 154.909 656.015 159.096 cv
655.44 159.096 li
655.44 283.653 li
cp
f
655.44 283.653 mo
655.44 393.154 li
656.292 393.154 li
639.72 426.81 615.74 457.119 586.108 482.573 cv
526.843 533.482 444.97 564.969 354.536 564.969 cv
264.101 564.969 182.228 533.482 122.964 482.573 cv
93.3317 457.119 69.3512 426.81 52.7794 393.154 cv
50.7077 388.947 48.7521 384.688 46.9157 380.379 cv
51.3439 380.379 li
51.3439 186.928 li
46.9157 186.928 li
48.7521 182.619 50.7077 178.359 52.7794 174.152 cv
69.3512 140.496 93.3317 110.187 122.964 84.7327 cv
137.78 72.0056 154.009 60.4924 171.432 50.3816 cv
175.787 47.8538 180.217 45.4138 184.719 43.0642 cv
184.719 43.3333 li
524.353 43.3333 li
524.353 43.0642 li
528.854 45.4138 533.284 47.8538 537.64 50.3816 cv
555.063 60.4924 571.292 72.0056 586.108 84.7327 cv
615.74 110.187 639.72 140.496 656.292 174.152 cv
655.44 174.152 li
655.44 283.653 li
cp
.0413519 .0671397 .185153 0 cmyk
f
655.44 283.653 mo
655.44 339.142 li
655.44 365.528 li
660.65 365.528 li
657.528 374.15 653.927 382.589 649.872 390.824 cv
633.652 423.764 610.183 453.429 581.181 478.341 cv
523.177 528.166 443.046 558.984 354.536 558.984 cv
266.026 558.984 185.894 528.166 127.891 478.341 cv
98.8888 453.429 75.4191 423.764 59.1998 390.824 cv
55.1447 382.589 51.5431 374.15 48.4215 365.528 cv
51.3439 365.528 li
51.3439 201.779 li
48.4215 201.779 li
51.5431 193.157 55.1447 184.717 59.1998 176.482 cv
75.4191 143.542 98.8888 113.878 127.891 88.9651 cv
142.392 76.509 158.276 65.2405 175.327 55.345 cv
183.854 50.3967 192.672 45.7923 201.755 41.5535 cv
201.755 43.3333 li
507.317 43.3333 li
507.317 41.5535 li
516.4 45.7923 525.218 50.3967 533.744 55.345 cv
550.796 65.2405 566.68 76.509 581.181 88.9651 cv
610.183 113.878 633.652 143.542 649.872 176.482 cv
653.927 184.717 657.528 193.157 660.65 201.779 cv
655.44 201.779 li
655.44 283.653 li
cp
.0382391 .069276 .179995 0 cmyk
f
655.44 283.653 mo
655.44 337.936 li
661.722 337.936 li
657.545 355.469 651.385 372.383 643.451 388.494 cv
627.585 420.719 604.625 449.738 576.254 474.109 cv
519.511 522.851 441.122 552.998 354.536 552.998 cv
267.949 552.998 189.56 522.851 132.818 474.109 cv
104.446 449.738 81.487 420.719 65.6203 388.494 cv
57.6867 372.383 51.5265 355.469 47.3497 337.936 cv
51.3439 337.936 li
51.3439 229.371 li
47.3497 229.371 li
51.5265 211.837 57.6867 194.924 65.6203 178.812 cv
81.487 146.588 104.446 117.569 132.818 93.1975 cv
147.004 81.012 162.542 69.9885 179.223 60.3079 cv
187.564 55.4675 196.191 50.9632 205.076 46.8167 cv
209.519 44.7434 214.027 42.7595 218.596 40.8684 cv
218.596 43.3333 li
490.476 43.3333 li
490.476 40.8684 li
495.045 42.7595 499.552 44.7434 503.995 46.8167 cv
512.881 50.9632 521.507 55.4675 529.848 60.3079 cv
546.529 69.9885 562.068 81.012 576.254 93.1975 cv
604.625 117.569 627.585 146.588 643.451 178.812 cv
651.385 194.924 657.545 211.837 661.722 229.371 cv
655.44 229.371 li
655.44 283.653 li
cp
.0380865 .0641489 .177523 0 cmyk
f
661.125 283.653 mo
661.125 429.103 523.86 547.013 354.536 547.013 cv
185.212 547.013 47.9474 429.103 47.9474 283.653 cv
47.9474 210.928 82.2633 145.089 137.745 97.4299 cv
165.485 73.6004 198.518 54.3162 235.198 40.9895 cv
235.198 43.3333 li
473.874 43.3333 li
473.874 40.9895 li
510.554 54.3162 543.586 73.6004 571.327 97.4299 cv
626.808 145.089 661.125 210.928 661.125 283.653 cv
cp
.0379339 .0647593 .170748 0 cmyk
f
654.156 283.653 mo
654.156 425.797 520.012 541.028 354.536 541.028 cv
189.06 541.028 54.9152 425.797 54.9152 283.653 cv
54.9152 212.581 88.4513 148.238 142.672 101.662 cv
169.782 78.3743 202.064 59.5286 237.91 46.5047 cv
246.871 43.2488 256.056 40.3567 265.438 37.8499 cv
265.438 43.3333 li
443.634 43.3333 li
443.634 37.8499 li
453.016 40.3567 462.2 43.2488 471.162 46.5047 cv
507.008 59.5286 539.289 78.3743 566.4 101.662 cv
620.62 148.238 654.156 212.581 654.156 283.653 cv
cp
.0376287 .0588388 .167575 0 cmyk
f
647.189 283.653 mo
647.189 422.491 516.163 535.042 354.536 535.042 cv
192.908 535.042 61.8829 422.491 61.8829 283.653 cv
61.8829 214.234 94.6393 151.387 147.599 105.894 cv
174.079 83.1482 205.61 64.741 240.622 52.0198 cv
258.129 45.6594 276.505 40.7205 295.556 37.3718 cv
295.556 43.3333 li
413.516 43.3333 li
413.516 37.3718 li
432.567 40.7205 450.943 45.6594 468.449 52.0198 cv
503.462 64.741 534.993 83.1482 561.473 105.894 cv
614.432 151.387 647.189 214.234 647.189 283.653 cv
cp
.0347295 .061738 .162173 0 cmyk
f
640.221 283.653 mo
640.221 419.186 512.315 529.056 354.536 529.056 cv
196.756 529.056 68.8507 419.186 68.8507 283.653 cv
68.8507 148.121 196.756 38.2498 354.536 38.2498 cv
512.315 38.2498 640.221 148.121 640.221 283.653 cv
cp
.0343328 .0565194 .159884 0 cmyk
f
633.253 283.653 mo
633.253 415.88 508.467 523.071 354.536 523.071 cv
200.605 523.071 75.819 415.88 75.819 283.653 cv
75.819 151.427 200.605 44.2356 354.536 44.2356 cv
508.467 44.2356 633.253 151.427 633.253 283.653 cv
cp
.0341192 .0570687 .153841 0 cmyk
f
626.285 283.653 mo
626.285 412.574 504.619 517.086 354.536 517.086 cv
204.453 517.086 82.7868 412.574 82.7868 283.653 cv
82.7868 154.732 204.453 50.221 354.536 50.221 cv
504.619 50.221 626.285 154.732 626.285 283.653 cv
cp
.0334478 .0528878 .149935 0 cmyk
f
619.317 283.653 mo
619.317 409.269 500.77 511.1 354.536 511.1 cv
208.301 511.1 89.7545 409.269 89.7545 283.653 cv
89.7545 158.038 208.301 56.2063 354.536 56.2063 cv
500.77 56.2063 619.317 158.038 619.317 283.653 cv
cp
.0294804 .055024 .143893 0 cmyk
f
612.349 283.653 mo
612.349 405.963 496.922 505.115 354.536 505.115 cv
212.15 505.115 96.7228 405.963 96.7228 283.653 cv
96.7228 161.344 212.15 62.1917 354.536 62.1917 cv
496.922 62.1917 612.349 161.344 612.349 283.653 cv
cp
.027863 .0495003 .139651 0 cmyk
f
605.381 283.653 mo
605.381 402.657 493.074 499.129 354.536 499.129 cv
215.998 499.129 103.691 402.657 103.691 283.653 cv
103.691 164.649 215.998 68.177 354.536 68.177 cv
493.074 68.177 605.381 164.649 605.381 283.653 cv
cp
.0275578 .0501411 .132845 0 cmyk
f
598.413 283.653 mo
598.413 399.352 489.226 493.144 354.536 493.144 cv
219.846 493.144 110.658 399.352 110.658 283.653 cv
110.658 167.955 219.846 74.1624 354.536 74.1624 cv
489.226 74.1624 598.413 167.955 598.413 283.653 cv
cp
.026276 .0427558 .129122 0 cmyk
f
591.445 283.653 mo
591.445 396.046 485.377 487.158 354.536 487.158 cv
223.694 487.158 117.627 396.046 117.627 283.653 cv
117.627 171.261 223.694 80.1482 354.536 80.1482 cv
485.377 80.1482 591.445 171.261 591.445 283.653 cv
cp
.0224613 .0450751 .124239 0 cmyk
f
584.477 283.653 mo
584.477 392.74 481.529 481.173 354.536 481.173 cv
227.543 481.173 124.594 392.74 124.594 283.653 cv
124.594 174.566 227.543 86.1336 354.536 86.1336 cv
481.529 86.1336 584.477 174.566 584.477 283.653 cv
cp
.0222782 .0400397 .121218 0 cmyk
f
577.509 283.653 mo
577.509 389.435 477.681 475.187 354.536 475.187 cv
231.391 475.187 131.562 389.435 131.562 283.653 cv
131.562 177.872 231.391 92.1189 354.536 92.1189 cv
477.681 92.1189 577.509 177.872 577.509 283.653 cv
cp
.0222171 .0404669 .114565 0 cmyk
f
570.542 283.653 mo
570.542 386.129 473.832 469.202 354.536 469.202 cv
235.239 469.202 138.53 386.129 138.53 283.653 cv
138.53 181.178 235.239 98.1043 354.536 98.1043 cv
473.832 98.1043 570.542 181.178 570.542 283.653 cv
cp
.0222782 .0368048 .111727 0 cmyk
f
563.573 283.653 mo
563.573 382.823 469.984 463.217 354.536 463.217 cv
239.088 463.217 145.498 382.823 145.498 283.653 cv
145.498 184.483 239.088 104.09 354.536 104.09 cv
469.984 104.09 563.573 184.483 563.573 283.653 cv
cp
.0195621 .0385443 .106355 0 cmyk
f
556.606 283.653 mo
556.606 379.518 466.136 457.231 354.536 457.231 cv
242.936 457.231 152.466 379.518 152.466 283.653 cv
152.466 187.789 242.936 110.075 354.536 110.075 cv
466.136 110.075 556.606 187.789 556.606 283.653 cv
cp
.0194705 .0350652 .104036 0 cmyk
f
549.638 283.653 mo
549.638 376.212 462.288 451.246 354.536 451.246 cv
246.784 451.246 159.434 376.212 159.434 283.653 cv
159.434 191.094 246.784 116.061 354.536 116.061 cv
462.288 116.061 549.638 191.094 549.638 283.653 cv
cp
.0192874 .0354925 .097261 0 cmyk
f
542.67 283.653 mo
542.67 372.906 458.439 445.26 354.536 445.26 cv
250.632 445.26 166.402 372.906 166.402 283.653 cv
166.402 194.4 250.632 122.046 354.536 122.046 cv
458.439 122.046 542.67 194.4 542.67 283.653 cv
cp
.0190433 .0315557 .0942397 0 cmyk
f
535.702 283.653 mo
535.702 369.601 454.591 439.275 354.536 439.275 cv
254.481 439.275 173.37 369.601 173.37 283.653 cv
173.37 197.706 254.481 128.032 354.536 128.032 cv
454.591 128.032 535.702 197.706 535.702 283.653 cv
cp
.0164187 .0336309 .0885328 0 cmyk
f
528.734 283.653 mo
528.734 366.295 450.743 433.289 354.536 433.289 cv
258.329 433.289 180.338 366.295 180.338 283.653 cv
180.338 201.011 258.329 134.017 354.536 134.017 cv
450.743 134.017 528.734 201.011 528.734 283.653 cv
cp
.0159609 .0290532 .086244 0 cmyk
f
521.766 283.653 mo
521.766 362.99 446.895 427.304 354.536 427.304 cv
262.177 427.304 187.306 362.99 187.306 283.653 cv
187.306 204.317 262.177 140.003 354.536 140.003 cv
446.895 140.003 521.766 204.317 521.766 283.653 cv
cp
.0152285 .0300298 .0753185 0 cmyk
f
514.798 283.653 mo
514.798 359.684 443.046 421.319 354.536 421.319 cv
266.026 421.319 194.274 359.684 194.274 283.653 cv
194.274 207.623 266.026 145.988 354.536 145.988 cv
443.046 145.988 514.798 207.623 514.798 283.653 cv
cp
.0145571 .0244755 .073579 0 cmyk
f
507.83 283.653 mo
507.83 356.378 439.198 415.333 354.536 415.333 cv
269.874 415.333 201.241 356.378 201.241 283.653 cv
201.241 210.928 269.874 151.973 354.536 151.973 cv
439.198 151.973 507.83 210.928 507.83 283.653 cv
cp
.0116579 .0266728 .0685435 0 cmyk
f
500.862 283.653 mo
500.862 353.073 435.35 409.347 354.536 409.347 cv
273.722 409.347 208.21 353.073 208.21 283.653 cv
208.21 214.234 273.722 157.959 354.536 157.959 cv
435.35 157.959 500.862 214.234 500.862 283.653 cv
cp
.0106813 .0216678 .0663462 0 cmyk
f
493.894 283.653 mo
493.894 349.767 431.501 403.362 354.536 403.362 cv
277.57 403.362 215.177 349.767 215.177 283.653 cv
215.177 217.54 277.57 163.944 354.536 163.944 cv
431.501 163.944 493.894 217.54 493.894 283.653 cv
cp
.0104372 .0216983 .0596933 0 cmyk
f
486.926 283.653 mo
486.926 346.461 427.653 397.377 354.536 397.377 cv
281.419 397.377 222.145 346.461 222.145 283.653 cv
222.145 220.845 281.419 169.93 354.536 169.93 cv
427.653 169.93 486.926 220.845 486.926 283.653 cv
cp
.0106203 .0181582 .0573434 0 cmyk
f
479.959 283.653 mo
479.959 343.155 423.805 391.391 354.536 391.391 cv
285.267 391.391 229.113 343.155 229.113 283.653 cv
229.113 224.151 285.267 175.915 354.536 175.915 cv
423.805 175.915 479.959 224.151 479.959 283.653 cv
cp
.00726329 .0199283 .0517891 0 cmyk
f
472.99 283.653 mo
472.99 339.849 419.957 385.406 354.536 385.406 cv
289.115 385.406 236.081 339.849 236.081 283.653 cv
236.081 227.457 289.115 181.901 354.536 181.901 cv
419.957 181.901 472.99 227.457 472.99 283.653 cv
cp
.0077821 .0167544 .0493477 0 cmyk
f
466.023 283.653 mo
466.023 336.544 416.108 379.42 354.536 379.42 cv
292.964 379.42 243.049 336.544 243.049 283.653 cv
243.049 230.762 292.964 187.886 354.536 187.886 cv
416.108 187.886 466.023 230.762 466.023 283.653 cv
cp
.00753796 .0169375 .0434577 0 cmyk
f
459.055 283.653 mo
459.055 333.238 412.26 373.435 354.536 373.435 cv
296.812 373.435 250.017 333.238 250.017 283.653 cv
250.017 234.068 296.812 193.871 354.536 193.871 cv
412.26 193.871 459.055 234.068 459.055 283.653 cv
cp
.00817884 .0136721 .0412299 0 cmyk
f
452.087 283.653 mo
452.087 329.932 408.412 367.449 354.536 367.449 cv
300.66 367.449 256.985 329.932 256.985 283.653 cv
256.985 237.374 300.66 199.857 354.536 199.857 cv
408.412 199.857 452.087 237.374 452.087 283.653 cv
cp
.0047303 .0156558 .0364385 0 cmyk
f
445.119 283.653 mo
445.119 326.627 404.564 361.464 354.536 361.464 cv
304.508 361.464 263.953 326.627 263.953 283.653 cv
263.953 240.679 304.508 205.843 354.536 205.843 cv
404.564 205.843 445.119 240.679 445.119 283.653 cv
cp
.00534066 .0122377 .0345464 0 cmyk
f
438.151 283.653 mo
438.151 323.321 400.715 355.479 354.536 355.479 cv
308.357 355.479 270.921 323.321 270.921 283.653 cv
270.921 243.985 308.357 211.828 354.536 211.828 cv
400.715 211.828 438.151 243.985 438.151 283.653 cv
cp
.00549325 .012604 .0294194 0 cmyk
f
431.183 283.653 mo
431.183 320.015 396.867 349.493 354.536 349.493 cv
312.205 349.493 277.889 320.015 277.889 283.653 cv
277.889 247.291 312.205 217.813 354.536 217.813 cv
396.867 217.813 431.183 247.291 431.183 283.653 cv
cp
.00601205 .00820935 .0264286 0 cmyk
f
424.215 283.653 mo
424.215 316.71 393.019 343.508 354.536 343.508 cv
316.053 343.508 284.857 316.71 284.857 283.653 cv
284.857 250.596 316.053 223.799 354.536 223.799 cv
393.019 223.799 424.215 250.596 424.215 283.653 cv
cp
.00317388 .0108644 .0206607 0 cmyk
f
417.247 283.653 mo
417.247 313.404 389.17 337.522 354.536 337.522 cv
319.901 337.522 291.824 313.404 291.824 283.653 cv
291.824 253.902 319.901 229.784 354.536 229.784 cv
389.17 229.784 417.247 253.902 417.247 283.653 cv
cp
.00329595 .00622568 .0187991 0 cmyk
f
410.279 283.653 mo
410.279 310.098 385.322 331.537 354.536 331.537 cv
323.75 331.537 298.793 310.098 298.793 283.653 cv
298.793 257.208 323.75 235.77 354.536 235.77 cv
385.322 235.77 410.279 257.208 410.279 283.653 cv
cp
.00317388 .00646983 .0153506 0 cmyk
f
403.311 283.653 mo
403.311 306.793 381.474 325.552 354.536 325.552 cv
327.598 325.552 305.76 306.793 305.76 283.653 cv
305.76 260.513 327.598 241.755 354.536 241.755 cv
381.474 241.755 403.311 260.513 403.311 283.653 cv
cp
.00299077 .00244144 .01355 0 cmyk
f
396.343 283.653 mo
396.343 303.487 377.626 319.566 354.536 319.566 cv
331.446 319.566 312.728 303.487 312.728 283.653 cv
312.728 263.819 331.446 247.74 354.536 247.74 cv
377.626 247.74 396.343 263.819 396.343 283.653 cv
cp
.000579843 .00418097 .00872816 0 cmyk
f
389.376 283.653 mo
389.376 300.181 373.777 313.58 354.536 313.58 cv
335.295 313.58 319.696 300.181 319.696 283.653 cv
319.696 267.125 335.295 253.726 354.536 253.726 cv
373.777 253.726 389.376 267.125 389.376 283.653 cv
cp
.000122072 .000732433 .00619516 0 cmyk
f
382.407 283.653 mo
382.407 296.876 369.929 307.595 354.536 307.595 cv
339.143 307.595 326.664 296.876 326.664 283.653 cv
326.664 270.43 339.143 259.711 354.536 259.711 cv
369.929 259.711 382.407 270.43 382.407 283.653 cv
cp
0 .000732433 .00234989 0 cmyk
f
375.44 283.653 mo
375.44 293.57 366.081 301.61 354.536 301.61 cv
342.991 301.61 333.632 293.57 333.632 283.653 cv
333.632 273.736 342.991 265.697 354.536 265.697 cv
366.081 265.697 375.44 273.736 375.44 283.653 cv
cp
0 0 .000762951 0 cmyk
f
368.472 283.653 mo
368.472 290.264 362.233 295.624 354.536 295.624 cv
346.839 295.624 340.6 290.264 340.6 283.653 cv
340.6 277.042 346.839 271.682 354.536 271.682 cv
362.233 271.682 368.472 277.042 368.472 283.653 cv
cp
0 0 0 0 cmyk
f
361.504 283.653 mo
361.504 286.959 358.384 289.638 354.536 289.638 cv
350.688 289.638 347.568 286.959 347.568 283.653 cv
347.568 280.347 350.688 277.668 354.536 277.668 cv
358.384 277.668 361.504 280.347 361.504 283.653 cv
cp
f
grestore
1367.95 1177.84 mo
1339.33 1156.19 1309.96 1121.16 1310.91 1075.58 cv
1381.14 1048.73 1431.36 980.535 1431.36 901.166 cv
1431.36 814.854 li
1431.36 712.214 1347.38 628.236 1244.74 628.236 cv
974.145 628.236 li
871.505 628.236 787.527 712.214 787.527 814.854 cv
787.527 901.166 li
787.527 1003.81 871.505 1087.78 974.145 1087.78 cv
1193.45 1087.78 li
1225.85 1133.02 1279.45 1160.67 1367.95 1177.84 cv
cp
gsave
[.0015674 -449.027 449.027 .0015674 1109.44 1077.26 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
gsave
1367.95 1177.84 mo
1340.48 1157.06 1301.9 1112.4 1302.82 1068.65 cv
1370.22 1042.87 1418.42 977.42 1418.42 901.241 cv
1418.42 818.398 li
1418.42 719.885 1337.82 639.281 1239.31 639.281 cv
979.584 639.281 li
881.07 639.281 800.466 719.885 800.466 818.398 cv
800.466 901.241 li
800.466 999.756 881.07 1080.36 979.584 1080.36 cv
1196.02 1080.36 li
1227.12 1123.77 1283.01 1161.36 1367.95 1177.84 cv
cp
eclp
800.466 639.281 mo
1418.42 639.281 li
1418.42 1177.84 li
800.466 1177.84 li
800.466 639.281 li
cp
.041474 .0713512 .187747 0 cmyk
f
1419.42 867.783 mo
1419.42 922.1 li
1424.73 922.1 li
1420.38 939.645 1413.97 956.57 1405.71 972.692 cv
1389.19 1004.94 1365.28 1033.98 1335.74 1058.36 cv
1276.66 1107.14 1195.04 1137.31 1104.88 1137.31 cv
1014.72 1137.31 933.098 1107.15 874.013 1058.38 cv
844.471 1033.99 820.563 1004.95 804.042 972.709 cv
799.911 964.648 796.242 956.386 793.062 947.947 cv
799.466 947.947 li
799.466 787.655 li
793.057 787.655 li
796.237 779.216 799.905 770.954 804.036 762.892 cv
820.556 730.647 844.462 701.608 874.003 677.22 cv
888.773 665.027 904.952 653.996 922.321 644.309 cv
926.664 641.887 931.081 639.55 935.568 637.298 cv
935.568 638.281 li
1274.16 638.281 li
1274.16 637.289 li
1278.65 639.54 1283.07 641.877 1287.41 644.299 cv
1304.78 653.985 1320.96 665.015 1335.73 677.208 cv
1365.27 701.594 1389.18 730.632 1405.7 762.876 cv
1413.96 778.998 1420.38 795.922 1424.73 813.467 cv
1419.42 813.467 li
1419.42 867.783 li
cp
f
1424.56 867.783 mo
1424.56 1013.53 1281.44 1131.69 1104.88 1131.7 cv
1016.6 1131.7 936.676 1102.16 878.823 1054.41 cv
849.896 1030.53 826.487 1002.1 810.308 970.523 cv
806.264 962.631 802.672 954.541 799.557 946.277 cv
798.001 942.145 796.564 937.97 795.25 933.755 cv
799.466 933.755 li
799.466 801.847 li
795.246 801.847 li
796.559 797.632 797.997 793.456 799.553 789.324 cv
802.667 781.06 806.258 772.97 810.302 765.078 cv
826.479 733.505 849.887 705.07 878.812 681.191 cv
893.275 669.252 909.117 658.45 926.125 648.965 cv
934.629 644.222 943.423 639.808 952.482 635.745 cv
952.482 638.281 li
1257.25 638.281 li
1257.25 635.737 li
1266.31 639.8 1275.1 644.213 1283.61 648.955 cv
1300.61 658.439 1316.46 669.24 1330.92 681.178 cv
1388.77 728.933 1424.56 794.909 1424.56 867.783 cv
cp
.0413519 .0671397 .185153 0 cmyk
f
1417.76 867.784 mo
1417.76 1010.43 1277.68 1126.08 1104.88 1126.08 cv
1018.48 1126.08 940.255 1097.17 883.632 1050.44 cv
855.321 1027.07 832.41 999.238 816.576 968.338 cv
808.659 952.887 802.511 936.669 798.343 919.855 cv
799.466 919.855 li
799.466 815.747 li
798.34 815.747 li
802.507 798.932 808.654 782.714 816.57 767.263 cv
832.402 736.361 855.312 708.533 883.622 685.161 cv
897.777 673.475 913.282 662.904 929.927 653.621 cv
938.251 648.979 946.858 644.659 955.725 640.682 cv
960.158 638.694 964.656 636.792 969.215 634.978 cv
969.215 638.281 li
1240.51 638.281 li
1240.51 634.97 li
1245.07 636.784 1249.57 638.686 1254.01 640.674 cv
1262.87 644.65 1271.48 648.969 1279.8 653.611 cv
1296.45 662.893 1311.95 673.464 1326.11 685.149 cv
1382.73 731.888 1417.76 796.46 1417.76 867.784 cv
cp
.0382391 .069276 .179995 0 cmyk
f
1410.96 867.784 mo
1410.96 1007.33 1273.92 1120.46 1104.88 1120.47 cv
935.833 1120.47 798.791 1007.35 798.787 867.801 cv
798.785 798.027 833.043 734.858 888.432 689.132 cv
916.127 666.268 949.104 647.765 985.723 634.979 cv
985.723 638.281 li
1224.01 638.281 li
1224.01 634.972 li
1260.63 647.758 1293.61 666.258 1321.3 689.12 cv
1376.69 734.843 1410.95 798.01 1410.96 867.784 cv
cp
.0380865 .0641489 .177523 0 cmyk
f
1404.15 867.784 mo
1404.16 1004.23 1270.17 1114.85 1104.88 1114.85 cv
939.589 1114.86 805.592 1004.25 805.589 867.801 cv
805.587 799.578 839.084 737.812 893.242 693.101 cv
920.321 670.747 952.565 652.655 988.371 640.152 cv
997.322 637.027 1006.5 634.251 1015.87 631.844 cv
1015.87 638.281 li
1193.86 638.281 li
1193.86 631.839 li
1203.23 634.245 1212.41 637.02 1221.36 640.146 cv
1257.17 652.647 1289.41 670.736 1316.49 693.09 cv
1370.65 737.797 1404.15 799.56 1404.15 867.784 cv
cp
.0379339 .0647593 .170748 0 cmyk
f
1397.35 867.784 mo
1397.36 1001.13 1266.41 1109.23 1104.88 1109.24 cv
943.345 1109.24 812.394 1001.15 812.39 867.801 cv
812.388 801.128 845.124 740.766 898.051 697.072 cv
924.515 675.225 956.027 657.545 991.018 645.326 cv
999.766 642.271 1008.73 639.558 1017.89 637.207 cv
1017.89 638.281 li
1191.84 638.281 li
1191.84 637.202 li
1201 639.552 1209.96 642.265 1218.71 645.32 cv
1253.7 657.537 1285.22 675.215 1311.68 697.06 cv
1364.61 740.752 1397.35 801.111 1397.35 867.784 cv
cp
.0376287 .0588388 .167575 0 cmyk
f
1390.55 867.784 mo
1390.55 998.029 1262.65 1103.62 1104.88 1103.62 cv
947.102 1103.62 819.196 998.045 819.192 867.801 cv
819.189 737.556 947.089 631.969 1104.86 631.964 cv
1262.64 631.96 1390.55 737.54 1390.55 867.784 cv
cp
.0347295 .061738 .162173 0 cmyk
f
1383.75 867.785 mo
1383.75 994.927 1258.9 1098 1104.88 1098.01 cv
950.858 1098.01 825.998 994.943 825.995 867.801 cv
825.991 740.657 950.845 637.584 1104.86 637.579 cv
1258.88 637.575 1383.75 740.641 1383.75 867.785 cv
cp
.0343328 .0565194 .159884 0 cmyk
f
1376.95 867.785 mo
1376.95 991.827 1255.14 1092.39 1104.88 1092.39 cv
954.615 1092.39 832.799 991.843 832.797 867.8 cv
832.793 743.758 954.602 643.198 1104.86 643.194 cv
1255.13 643.19 1376.94 743.743 1376.95 867.785 cv
cp
.0341192 .0570687 .153841 0 cmyk
f
1370.15 867.785 mo
1370.15 988.726 1251.38 1086.77 1104.88 1086.78 cv
958.371 1086.78 839.601 988.741 839.598 867.8 cv
839.594 746.858 958.359 648.813 1104.87 648.809 cv
1251.37 648.804 1370.14 746.844 1370.15 867.785 cv
cp
.0334478 .0528878 .149935 0 cmyk
f
1363.34 867.785 mo
1363.35 985.625 1247.63 1081.16 1104.88 1081.16 cv
962.128 1081.16 846.403 985.639 846.4 867.8 cv
846.397 749.96 962.116 654.427 1104.87 654.424 cv
1247.62 654.42 1363.34 749.945 1363.34 867.785 cv
cp
.0294804 .055024 .143893 0 cmyk
f
1356.54 867.785 mo
1356.54 982.524 1243.87 1075.54 1104.88 1075.55 cv
965.884 1075.55 853.205 982.539 853.202 867.8 cv
853.199 753.06 965.873 660.043 1104.87 660.039 cv
1243.86 660.035 1356.54 753.047 1356.54 867.785 cv
cp
.027863 .0495003 .139651 0 cmyk
f
1349.74 867.786 mo
1349.74 979.424 1240.11 1069.93 1104.88 1069.93 cv
969.64 1069.93 860.006 979.437 860.004 867.8 cv
860.001 756.161 969.63 665.658 1104.87 665.654 cv
1240.1 665.65 1349.74 756.147 1349.74 867.786 cv
cp
.0275578 .0501411 .132845 0 cmyk
f
1342.94 867.786 mo
1342.94 976.323 1236.36 1064.31 1104.88 1064.32 cv
973.397 1064.32 866.808 976.336 866.805 867.799 cv
866.802 759.262 973.386 671.272 1104.87 671.268 cv
1236.35 671.265 1342.93 759.249 1342.94 867.786 cv
cp
.026276 .0427558 .129122 0 cmyk
f
1336.14 867.786 mo
1336.14 973.221 1232.6 1058.7 1104.88 1058.7 cv
977.153 1058.7 873.61 973.234 873.607 867.799 cv
873.604 762.363 977.142 676.887 1104.87 676.884 cv
1232.59 676.881 1336.13 762.35 1336.14 867.786 cv
cp
.0224613 .0450751 .124239 0 cmyk
f
1329.33 867.786 mo
1329.34 970.121 1228.84 1053.08 1104.88 1053.09 cv
980.91 1053.09 880.412 970.134 880.41 867.799 cv
880.407 765.464 980.899 682.502 1104.87 682.499 cv
1228.83 682.495 1329.33 765.451 1329.33 867.786 cv
cp
.0222782 .0400397 .121218 0 cmyk
f
1322.53 867.786 mo
1322.53 967.02 1225.09 1047.47 1104.88 1047.47 cv
984.666 1047.47 887.214 967.032 887.212 867.799 cv
887.209 768.564 984.656 688.117 1104.87 688.114 cv
1225.08 688.11 1322.53 768.552 1322.53 867.786 cv
cp
.0222171 .0404669 .114565 0 cmyk
f
1315.73 867.787 mo
1315.73 963.919 1221.33 1041.85 1104.88 1041.86 cv
988.422 1041.86 894.016 963.93 894.013 867.799 cv
894.01 771.666 988.413 693.732 1104.87 693.728 cv
1221.32 693.725 1315.73 771.654 1315.73 867.787 cv
cp
.0222782 .0368048 .111727 0 cmyk
f
1308.93 867.787 mo
1308.93 960.818 1217.57 1036.24 1104.88 1036.24 cv
992.179 1036.24 900.818 960.83 900.815 867.798 cv
900.812 774.766 992.17 699.346 1104.87 699.344 cv
1217.56 699.341 1308.93 774.755 1308.93 867.787 cv
cp
.0195621 .0385443 .106355 0 cmyk
f
1302.13 867.787 mo
1302.13 957.718 1213.82 1030.62 1104.88 1030.63 cv
995.935 1030.63 907.62 957.728 907.617 867.798 cv
907.615 777.867 995.926 704.962 1104.87 704.959 cv
1213.81 704.956 1302.12 777.856 1302.13 867.787 cv
cp
.0194705 .0350652 .104036 0 cmyk
f
1295.32 867.787 mo
1295.33 954.617 1210.06 1025.01 1104.88 1025.01 cv
999.692 1025.01 914.422 954.627 914.419 867.798 cv
914.417 780.969 999.683 710.576 1104.87 710.573 cv
1210.05 710.57 1295.32 780.958 1295.32 867.787 cv
cp
.0192874 .0354925 .097261 0 cmyk
f
1288.52 867.787 mo
1288.53 951.515 1206.3 1019.39 1104.88 1019.4 cv
1003.45 1019.4 921.223 951.526 921.22 867.798 cv
921.218 784.069 1003.44 716.191 1104.87 716.188 cv
1206.29 716.185 1288.52 784.058 1288.52 867.787 cv
cp
.0190433 .0315557 .0942397 0 cmyk
f
1281.72 867.787 mo
1281.72 948.415 1202.55 1013.78 1104.88 1013.78 cv
1007.2 1013.78 928.025 948.425 928.022 867.798 cv
928.02 787.17 1007.2 721.806 1104.87 721.803 cv
1202.54 721.801 1281.72 787.16 1281.72 867.787 cv
cp
.0164187 .0336309 .0885328 0 cmyk
f
1274.92 867.788 mo
1274.92 945.314 1198.79 1008.16 1104.88 1008.17 cv
1010.96 1008.17 934.827 945.323 934.825 867.797 cv
934.822 790.27 1010.95 727.421 1104.87 727.419 cv
1198.78 727.416 1274.92 790.261 1274.92 867.788 cv
cp
.0159609 .0290532 .086244 0 cmyk
f
1268.12 867.788 mo
1268.12 942.213 1195.03 1002.55 1104.88 1002.55 cv
1014.72 1002.55 941.629 942.222 941.627 867.797 cv
941.625 793.372 1014.71 733.036 1104.87 733.033 cv
1195.03 733.031 1268.11 793.362 1268.12 867.788 cv
cp
.0152285 .0300298 .0753185 0 cmyk
f
1261.32 867.788 mo
1261.32 939.112 1191.28 996.934 1104.88 996.936 cv
1018.47 996.938 948.43 939.121 948.428 867.797 cv
948.426 796.472 1018.47 738.651 1104.87 738.648 cv
1191.27 738.646 1261.31 796.464 1261.32 867.788 cv
cp
.0145571 .0244755 .073579 0 cmyk
f
1254.51 867.788 mo
1254.52 936.011 1187.52 991.319 1104.87 991.321 cv
1022.23 991.324 955.232 936.019 955.23 867.797 cv
955.228 799.573 1022.22 744.265 1104.87 744.263 cv
1187.51 744.26 1254.51 799.565 1254.51 867.788 cv
cp
.0116579 .0266728 .0685435 0 cmyk
f
1247.71 867.788 mo
1247.71 932.911 1183.76 985.704 1104.87 985.707 cv
1025.99 985.709 962.034 932.919 962.032 867.797 cv
962.03 802.675 1025.98 749.881 1104.87 749.878 cv
1183.76 749.876 1247.71 802.666 1247.71 867.788 cv
cp
.0106813 .0216678 .0663462 0 cmyk
f
1240.91 867.789 mo
1240.91 929.809 1180.01 980.09 1104.87 980.092 cv
1029.74 980.094 968.836 929.817 968.834 867.796 cv
968.832 805.775 1029.74 755.495 1104.87 755.493 cv
1180 755.491 1240.91 805.767 1240.91 867.789 cv
cp
.0104372 .0216983 .0596933 0 cmyk
f
1234.11 867.789 mo
1234.11 926.709 1176.25 974.474 1104.87 974.476 cv
1033.5 974.478 975.637 926.716 975.635 867.796 cv
975.634 808.876 1033.49 761.11 1104.87 761.108 cv
1176.24 761.106 1234.11 808.869 1234.11 867.789 cv
cp
.0106203 .0181582 .0573434 0 cmyk
f
1227.31 867.789 mo
1227.31 923.608 1172.49 968.859 1104.87 968.861 cv
1037.26 968.863 982.439 923.615 982.438 867.796 cv
982.436 811.976 1037.25 766.725 1104.87 766.723 cv
1172.49 766.721 1227.3 811.969 1227.31 867.789 cv
cp
.00726329 .0199283 .0517891 0 cmyk
f
1220.5 867.789 mo
1220.51 920.507 1168.74 963.245 1104.87 963.247 cv
1041.01 963.249 989.241 920.513 989.24 867.796 cv
989.238 815.078 1041.01 772.34 1104.87 772.338 cv
1168.73 772.337 1220.5 815.071 1220.5 867.789 cv
cp
.0077821 .0167544 .0493477 0 cmyk
f
1213.7 867.789 mo
1213.7 917.406 1164.98 957.63 1104.87 957.632 cv
1044.77 957.634 996.043 917.412 996.042 867.796 cv
996.04 818.178 1044.76 777.955 1104.87 777.953 cv
1164.97 777.951 1213.7 818.173 1213.7 867.789 cv
cp
.00753796 .0169375 .0434577 0 cmyk
f
1206.9 867.79 mo
1206.9 914.305 1161.22 952.015 1104.87 952.016 cv
1048.53 952.018 1002.84 914.311 1002.84 867.795 cv
1002.84 821.279 1048.52 783.569 1104.87 783.568 cv
1161.22 783.566 1206.9 821.273 1206.9 867.79 cv
cp
.00817884 .0136721 .0412299 0 cmyk
f
1200.1 867.79 mo
1200.1 911.205 1157.47 946.4 1104.87 946.402 cv
1052.28 946.403 1009.65 911.21 1009.65 867.795 cv
1009.64 824.381 1052.28 789.184 1104.87 789.183 cv
1157.46 789.181 1200.1 824.375 1200.1 867.79 cv
cp
.0047303 .0156558 .0364385 0 cmyk
f
1193.3 867.79 mo
1193.3 908.103 1153.71 940.785 1104.87 940.787 cv
1056.04 940.788 1016.45 908.108 1016.45 867.795 cv
1016.45 827.481 1056.03 794.8 1104.87 794.798 cv
1153.7 794.797 1193.29 827.476 1193.3 867.79 cv
cp
.00534066 .0122377 .0345464 0 cmyk
f
1186.49 867.79 mo
1186.5 905.003 1149.95 935.171 1104.87 935.172 cv
1059.79 935.173 1023.25 905.008 1023.25 867.795 cv
1023.25 830.582 1059.79 800.414 1104.87 800.413 cv
1149.95 800.412 1186.49 830.577 1186.49 867.79 cv
cp
.00549325 .012604 .0294194 0 cmyk
f
1179.69 867.79 mo
1179.69 901.902 1146.2 929.555 1104.87 929.556 cv
1063.55 929.558 1030.05 901.906 1030.05 867.795 cv
1030.05 833.682 1063.55 806.029 1104.87 806.028 cv
1146.19 806.026 1179.69 833.678 1179.69 867.79 cv
cp
.00601205 .00820935 .0264286 0 cmyk
f
1172.89 867.791 mo
1172.89 898.801 1142.44 923.941 1104.87 923.942 cv
1067.31 923.943 1036.85 898.804 1036.85 867.794 cv
1036.85 836.784 1067.3 811.643 1104.87 811.642 cv
1142.44 811.641 1172.89 836.78 1172.89 867.791 cv
cp
.00317388 .0108644 .0206607 0 cmyk
f
1166.09 867.791 mo
1166.09 895.7 1138.68 918.326 1104.87 918.327 cv
1071.06 918.328 1043.66 895.704 1043.65 867.794 cv
1043.65 839.885 1071.06 817.259 1104.87 817.258 cv
1138.68 817.257 1166.09 839.881 1166.09 867.791 cv
cp
.00329595 .00622568 .0187991 0 cmyk
f
1159.29 867.791 mo
1159.29 892.599 1134.93 912.711 1104.87 912.712 cv
1074.82 912.713 1050.46 892.602 1050.46 867.794 cv
1050.46 842.985 1074.82 822.874 1104.87 822.873 cv
1134.92 822.872 1159.29 842.982 1159.29 867.791 cv
cp
.00317388 .00646983 .0153506 0 cmyk
f
1152.48 867.791 mo
1152.48 889.499 1131.17 907.096 1104.87 907.097 cv
1078.58 907.097 1057.26 889.501 1057.26 867.794 cv
1057.26 846.087 1078.57 828.488 1104.87 828.488 cv
1131.17 828.487 1152.48 846.084 1152.48 867.791 cv
cp
.00299077 .00244144 .01355 0 cmyk
f
1145.68 867.791 mo
1145.68 886.397 1127.41 901.481 1104.87 901.482 cv
1082.33 901.482 1064.06 886.4 1064.06 867.794 cv
1064.06 849.187 1082.33 834.103 1104.87 834.102 cv
1127.41 834.102 1145.68 849.184 1145.68 867.791 cv
cp
.000579843 .00418097 .00872816 0 cmyk
f
1138.88 867.792 mo
1138.88 883.297 1123.65 895.867 1104.87 895.867 cv
1086.09 895.868 1070.86 883.299 1070.86 867.794 cv
1070.86 852.288 1086.09 839.718 1104.87 839.718 cv
1123.65 839.717 1138.88 852.286 1138.88 867.792 cv
cp
.000122072 .000732433 .00619516 0 cmyk
f
1132.08 867.792 mo
1132.08 880.196 1119.9 890.252 1104.87 890.252 cv
1089.85 890.253 1077.66 880.197 1077.66 867.793 cv
1077.66 855.388 1089.84 845.333 1104.87 845.333 cv
1119.9 845.332 1132.08 855.387 1132.08 867.792 cv
cp
0 .000732433 .00234989 0 cmyk
f
1125.28 867.792 mo
1125.28 877.094 1116.14 884.636 1104.87 884.637 cv
1093.6 884.637 1084.47 877.096 1084.47 867.793 cv
1084.47 858.49 1093.6 850.948 1104.87 850.947 cv
1116.14 850.947 1125.28 858.489 1125.28 867.792 cv
cp
0 0 .000762951 0 cmyk
f
1118.48 867.792 mo
1118.48 873.994 1112.39 879.022 1104.87 879.022 cv
1097.36 879.022 1091.27 873.995 1091.27 867.793 cv
1091.27 861.591 1097.36 856.562 1104.87 856.562 cv
1112.38 856.562 1118.48 861.59 1118.48 867.792 cv
cp
0 0 0 0 cmyk
f
1111.67 867.792 mo
1111.67 870.893 1108.63 873.407 1104.87 873.407 cv
1101.11 873.407 1098.07 870.893 1098.07 867.793 cv
1098.07 864.691 1101.11 862.177 1104.87 862.177 cv
1108.63 862.177 1111.67 864.691 1111.67 867.792 cv
cp
f
grestore
1339.8 541.215 mo
1290.55 518.625 1283.02 481.837 1286.61 442.336 cv
1380.43 399.078 1442.25 325.216 1442.25 241.354 cv
1442.25 108.057 1286.1 -.000230244 1093.48 -.000230244 cv
900.855 -.000230244 744.706 108.057 744.706 241.354 cv
744.706 374.65 900.855 482.707 1093.48 482.707 cv
1133.84 482.707 1172.59 477.948 1208.65 469.218 cv
1226.3 511.883 1278.42 545.545 1339.8 541.215 cv
cp
gsave
[.00167499 -479.848 479.848 .00167499 1093.48 479.848 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
gsave
1339.8 541.215 mo
1291.87 519.23 1277.95 476.186 1281.44 437.742 cv
1372.74 395.643 1429.98 347.773 1432.91 242.142 cv
1436.31 119.468 1280.94 7.25075 1093.48 7.25075 cv
906.012 7.25075 754.045 112.415 754.045 242.142 cv
754.045 371.868 906.012 477.033 1093.48 477.033 cv
1132.76 477.033 1179.83 469.002 1214.92 460.504 cv
1232.1 502.027 1280.07 545.429 1339.8 541.215 cv
cp
eclp
754.045 7.25075 mo
1436.31 7.25075 li
1436.31 545.429 li
754.045 545.429 li
754.045 7.25075 li
cp
.041474 .0713512 .187747 0 cmyk
f
1437.31 252.631 mo
1437.31 371.383 li
1437.31 384.897 li
1442.98 384.897 li
1440.25 389.343 1437.4 393.729 1434.41 398.052 cv
1428.44 406.698 1421.96 415.091 1414.99 423.206 cv
1401.06 439.437 1385.19 454.555 1367.65 468.358 cv
1332.57 495.962 1290.8 518.302 1244.41 533.74 cv
1221.22 541.459 1196.88 547.452 1171.64 551.516 cv
1171.64 546.429 li
1015.37 546.429 li
1015.37 551.516 li
990.13 547.452 965.784 541.459 942.591 533.74 cv
896.208 518.302 854.436 495.962 819.356 468.358 cv
801.816 454.555 785.948 439.437 772.013 423.206 cv
765.047 415.091 758.562 406.698 752.593 398.052 cv
753.045 398.052 li
753.045 107.21 li
752.593 107.21 li
758.562 98.5642 765.047 90.1712 772.013 82.0554 cv
785.948 65.825 801.816 50.7063 819.356 36.9041 cv
836.896 23.1018 856.109 10.616 876.735 -.349351 cv
876.735 6.25075 li
1310.27 6.25075 li
1310.27 -.349351 li
1330.9 10.616 1350.11 23.1018 1367.65 36.9041 cv
1385.19 50.7063 1401.06 65.825 1414.99 82.0554 cv
1421.96 90.1712 1428.44 98.5642 1434.41 107.21 cv
1437.4 111.532 1440.25 115.919 1442.98 120.365 cv
1437.31 120.365 li
1437.31 252.631 li
cp
f
1437.31 252.631 mo
1437.31 368.909 li
1443.3 368.909 li
1424.09 404.649 1396.29 436.834 1361.94 463.864 cv
1293.24 517.923 1198.33 551.359 1093.5 551.359 cv
988.672 551.359 893.766 517.923 825.067 463.864 cv
807.892 450.348 792.356 435.545 778.712 419.653 cv
771.889 411.706 765.541 403.488 759.696 395.022 cv
756.774 390.79 753.978 386.495 751.312 382.142 cv
753.045 382.142 li
753.045 123.12 li
751.312 123.12 li
753.978 118.767 756.774 114.472 759.696 110.24 cv
765.541 101.774 771.889 93.5554 778.712 85.6091 cv
792.356 69.7171 807.892 54.9133 825.067 41.3982 cv
842.242 27.8836 861.054 15.658 881.251 4.92116 cv
881.251 6.25075 li
1305.76 6.25075 li
1305.76 4.92116 li
1325.95 15.658 1344.77 27.8836 1361.94 41.3982 cv
1396.29 68.428 1424.09 100.613 1443.3 136.352 cv
1437.31 136.352 li
1437.31 252.631 li
cp
.0413519 .0671397 .185153 0 cmyk
f
1437.31 252.631 mo
1437.31 311.554 li
1437.31 353.158 li
1442.51 353.158 li
1440.42 357.636 1438.2 362.063 1435.85 366.435 cv
1417.05 401.414 1389.85 432.915 1356.23 459.369 cv
1288.99 512.278 1196.1 545.003 1093.5 545.003 cv
990.903 545.003 898.016 512.278 830.779 459.369 cv
797.16 432.915 769.954 401.414 751.153 366.435 cv
753.045 366.435 li
753.045 138.826 li
751.153 138.826 li
769.954 103.847 797.16 72.3469 830.779 45.8928 cv
847.588 32.6653 866.001 20.7 885.767 10.1917 cv
890.709 7.56422 895.735 5.02858 900.841 2.58668 cv
900.841 6.25075 li
1286.17 6.25075 li
1286.17 2.58668 li
1291.27 5.02858 1296.3 7.56422 1301.24 10.1917 cv
1321.01 20.7 1339.42 32.6653 1356.23 45.8928 cv
1389.85 72.3469 1417.05 103.847 1435.85 138.826 cv
1438.2 143.199 1440.42 147.626 1442.51 152.104 cv
1437.31 152.104 li
1437.31 252.631 li
cp
.0382391 .069276 .179995 0 cmyk
f
1437.31 252.631 mo
1437.31 310.273 li
1437.31 337.683 li
1440.63 337.683 li
1437.09 346.639 1433.01 355.406 1428.41 363.961 cv
1410.02 398.18 1383.4 428.995 1350.52 454.875 cv
1284.74 506.634 1193.87 538.647 1093.5 538.647 cv
993.133 538.647 902.265 506.634 836.49 454.875 cv
803.602 428.995 776.988 398.18 758.595 363.961 cv
753.997 355.406 749.913 346.639 746.373 337.683 cv
753.045 337.683 li
753.045 167.578 li
746.373 167.578 li
749.913 158.622 753.997 149.855 758.595 141.301 cv
776.988 107.082 803.602 76.2664 836.49 50.387 cv
852.934 37.4475 870.946 25.742 890.283 15.4617 cv
899.951 10.322 909.951 5.53834 920.252 1.13551 cv
920.252 6.25075 li
1266.76 6.25075 li
1266.76 1.13551 li
1277.06 5.53834 1287.06 10.322 1296.72 15.4617 cv
1316.06 25.742 1334.07 37.4475 1350.52 50.387 cv
1383.4 76.2664 1410.02 107.082 1428.41 141.301 cv
1433.01 149.855 1437.09 158.622 1440.63 167.578 cv
1437.31 167.578 li
1437.31 252.631 li
cp
.0380865 .0641489 .177523 0 cmyk
f
1437.31 252.631 mo
1437.31 308.992 li
1441.68 308.992 li
1436.94 327.198 1429.96 344.758 1420.97 361.487 cv
1402.99 394.946 1376.96 425.076 1344.81 450.381 cv
1280.49 500.989 1191.64 532.291 1093.5 532.291 cv
995.364 532.291 906.515 500.989 842.202 450.381 cv
810.045 425.076 784.021 394.946 766.038 361.487 cv
761.542 353.123 757.547 344.55 754.087 335.793 cv
752.356 331.415 750.758 326.99 749.297 322.522 cv
753.045 322.522 li
753.045 182.74 li
749.297 182.74 li
750.758 178.272 752.356 173.847 754.087 169.469 cv
757.547 160.712 761.542 152.139 766.038 143.775 cv
784.021 110.317 810.045 80.1858 842.202 54.8811 cv
858.28 42.2293 875.892 30.7839 894.798 20.7322 cv
904.253 15.7068 914.03 11.0296 924.101 6.72438 cv
929.137 4.57155 934.246 2.51198 939.425 .54811 cv
939.425 6.25075 li
1247.58 6.25075 li
1247.58 .54811 li
1252.76 2.51198 1257.87 4.57155 1262.91 6.72438 cv
1272.98 11.0296 1282.75 15.7068 1292.21 20.7322 cv
1311.11 30.7839 1328.73 42.2293 1344.81 54.8811 cv
1376.96 80.1858 1402.99 110.317 1420.97 143.775 cv
1429.96 160.504 1436.94 178.064 1441.68 196.27 cv
1437.31 196.27 li
1437.31 252.631 li
cp
.0379339 .0647593 .170748 0 cmyk
f
1440.82 252.631 mo
1440.82 403.573 1285.32 525.935 1093.5 525.935 cv
901.685 525.935 746.186 403.573 746.186 252.631 cv
746.186 177.16 785.061 108.834 847.913 59.3757 cv
879.339 34.6463 916.759 14.634 958.312 .804457 cv
958.312 6.25075 li
1228.69 6.25075 li
1228.69 .804457 li
1270.25 14.634 1307.67 34.6463 1339.09 59.3757 cv
1401.95 108.834 1440.82 177.16 1440.82 252.631 cv
cp
.0376287 .0588388 .167575 0 cmyk
f
1432.74 252.631 mo
1432.74 400.062 1280.86 519.579 1093.5 519.579 cv
906.146 519.579 754.263 400.062 754.263 252.631 cv
754.263 178.915 792.234 112.178 853.625 63.8699 cv
884.32 39.7161 920.87 20.1692 961.456 6.6609 cv
966.529 4.97194 971.666 3.37819 976.861 1.88112 cv
976.861 6.25075 li
1210.15 6.25075 li
1210.15 1.88112 li
1215.34 3.37819 1220.48 4.97194 1225.55 6.6609 cv
1266.14 20.1692 1302.69 39.7161 1333.38 63.8699 cv
1394.77 112.178 1432.74 178.915 1432.74 252.631 cv
cp
.0347295 .061738 .162173 0 cmyk
f
1424.67 252.631 mo
1424.67 396.552 1276.4 513.223 1093.5 513.223 cv
910.607 513.223 762.34 396.552 762.34 252.631 cv
762.34 180.67 799.407 115.522 859.336 68.364 cv
889.3 44.7854 924.98 25.7039 964.6 12.5173 cv
974.505 9.22047 984.656 6.29225 995.026 3.75416 cv
995.026 6.25075 li
1191.98 6.25075 li
1191.98 3.75416 li
1202.35 6.29225 1212.5 9.22047 1222.41 12.5173 cv
1262.03 25.7039 1297.71 44.7854 1327.67 68.364 cv
1387.6 115.522 1424.67 180.67 1424.67 252.631 cv
cp
.0343328 .0565194 .159884 0 cmyk
f
1416.59 252.631 mo
1416.59 393.042 1271.94 506.867 1093.5 506.867 cv
915.068 506.867 770.418 393.042 770.418 252.631 cv
770.418 182.426 806.58 118.866 865.047 72.8587 cv
894.281 49.8548 929.09 31.2385 967.744 18.3738 cv
987.071 11.9412 1007.36 6.94606 1028.39 3.55983 cv
1028.39 6.25075 li
1158.62 6.25075 li
1158.62 3.55983 li
1179.65 6.94606 1199.94 11.9412 1219.26 18.3738 cv
1257.92 31.2385 1292.73 49.8548 1321.96 72.8587 cv
1380.43 118.866 1416.59 182.426 1416.59 252.631 cv
cp
.0341192 .0570687 .153841 0 cmyk
f
1408.51 252.631 mo
1408.51 389.531 1267.48 500.511 1093.5 500.511 cv
919.529 500.511 778.495 389.531 778.495 252.631 cv
778.495 115.73 919.529 4.75026 1093.5 4.75026 cv
1267.48 4.75026 1408.51 115.73 1408.51 252.631 cv
cp
.0334478 .0528878 .149935 0 cmyk
f
1400.44 252.631 mo
1400.44 386.021 1263.02 494.156 1093.5 494.156 cv
923.99 494.156 786.572 386.021 786.572 252.631 cv
786.572 119.24 923.99 11.1062 1093.5 11.1062 cv
1263.02 11.1062 1400.44 119.24 1400.44 252.631 cv
cp
.0294804 .055024 .143893 0 cmyk
f
1392.36 252.631 mo
1392.36 382.511 1258.56 487.8 1093.5 487.8 cv
928.451 487.8 794.649 382.511 794.649 252.631 cv
794.649 122.751 928.451 17.4622 1093.5 17.4622 cv
1258.56 17.4622 1392.36 122.751 1392.36 252.631 cv
cp
.027863 .0495003 .139651 0 cmyk
f
1384.28 252.631 mo
1384.28 379.001 1254.1 481.444 1093.5 481.444 cv
932.912 481.444 802.726 379.001 802.726 252.631 cv
802.726 126.261 932.912 23.8181 1093.5 23.8181 cv
1254.1 23.8181 1384.28 126.261 1384.28 252.631 cv
cp
.0275578 .0501411 .132845 0 cmyk
f
1376.2 252.631 mo
1376.2 375.49 1249.63 475.088 1093.5 475.088 cv
937.373 475.088 810.803 375.49 810.803 252.631 cv
810.803 129.771 937.373 30.1741 1093.5 30.1741 cv
1249.63 30.1741 1376.2 129.771 1376.2 252.631 cv
cp
.026276 .0427558 .129122 0 cmyk
f
1368.13 252.631 mo
1368.13 371.98 1245.17 468.732 1093.5 468.732 cv
941.834 468.732 818.88 371.98 818.88 252.631 cv
818.88 133.282 941.834 36.53 1093.5 36.53 cv
1245.17 36.53 1368.13 133.282 1368.13 252.631 cv
cp
.0224613 .0450751 .124239 0 cmyk
f
1360.05 252.631 mo
1360.05 368.47 1240.71 462.376 1093.5 462.376 cv
946.295 462.376 826.958 368.47 826.958 252.631 cv
826.958 136.792 946.295 42.886 1093.5 42.886 cv
1240.71 42.886 1360.05 136.792 1360.05 252.631 cv
cp
.0222782 .0400397 .121218 0 cmyk
f
1351.97 252.631 mo
1351.97 364.96 1236.25 456.02 1093.5 456.02 cv
950.755 456.02 835.035 364.96 835.035 252.631 cv
835.035 140.302 950.755 49.242 1093.5 49.242 cv
1236.25 49.242 1351.97 140.302 1351.97 252.631 cv
cp
.0222171 .0404669 .114565 0 cmyk
f
1343.9 252.631 mo
1343.9 361.449 1231.79 449.664 1093.5 449.664 cv
955.215 449.664 843.112 361.449 843.112 252.631 cv
843.112 143.812 955.215 55.5974 1093.5 55.5974 cv
1231.79 55.5974 1343.9 143.812 1343.9 252.631 cv
cp
.0222782 .0368048 .111727 0 cmyk
f
1335.82 252.631 mo
1335.82 357.939 1227.33 443.308 1093.5 443.308 cv
959.676 443.308 851.189 357.939 851.189 252.631 cv
851.189 147.323 959.676 61.9534 1093.5 61.9534 cv
1227.33 61.9534 1335.82 147.323 1335.82 252.631 cv
cp
.0195621 .0385443 .106355 0 cmyk
f
1327.74 252.631 mo
1327.74 354.429 1222.87 436.952 1093.5 436.952 cv
964.137 436.952 859.266 354.429 859.266 252.631 cv
859.266 150.833 964.137 68.3093 1093.5 68.3093 cv
1222.87 68.3093 1327.74 150.833 1327.74 252.631 cv
cp
.0194705 .0350652 .104036 0 cmyk
f
1319.66 252.631 mo
1319.66 350.919 1218.41 430.596 1093.5 430.596 cv
968.598 430.596 867.343 350.919 867.343 252.631 cv
867.343 154.343 968.598 74.6653 1093.5 74.6653 cv
1218.41 74.6653 1319.66 154.343 1319.66 252.631 cv
cp
.0192874 .0354925 .097261 0 cmyk
f
1311.59 252.631 mo
1311.59 347.408 1213.95 424.24 1093.5 424.24 cv
973.059 424.24 875.421 347.408 875.421 252.631 cv
875.421 157.853 973.059 81.0213 1093.5 81.0213 cv
1213.95 81.0213 1311.59 157.853 1311.59 252.631 cv
cp
.0190433 .0315557 .0942397 0 cmyk
f
1303.51 252.631 mo
1303.51 343.898 1209.49 417.885 1093.5 417.885 cv
977.52 417.885 883.498 343.898 883.498 252.631 cv
883.498 161.364 977.52 87.3772 1093.5 87.3772 cv
1209.49 87.3772 1303.51 161.364 1303.51 252.631 cv
cp
.0164187 .0336309 .0885328 0 cmyk
f
1295.43 252.631 mo
1295.43 340.388 1205.03 411.529 1093.5 411.529 cv
981.981 411.529 891.575 340.388 891.575 252.631 cv
891.575 164.874 981.981 93.7332 1093.5 93.7332 cv
1205.03 93.7332 1295.43 164.874 1295.43 252.631 cv
cp
.0159609 .0290532 .086244 0 cmyk
f
1287.36 252.631 mo
1287.36 336.878 1200.57 405.173 1093.5 405.173 cv
986.442 405.173 899.652 336.878 899.652 252.631 cv
899.652 168.385 986.442 100.089 1093.5 100.089 cv
1200.57 100.089 1287.36 168.385 1287.36 252.631 cv
cp
.0152285 .0300298 .0753185 0 cmyk
f
1279.28 252.631 mo
1279.28 333.367 1196.1 398.817 1093.5 398.817 cv
990.903 398.817 907.729 333.367 907.729 252.631 cv
907.729 171.895 990.903 106.445 1093.5 106.445 cv
1196.1 106.445 1279.28 171.895 1279.28 252.631 cv
cp
.0145571 .0244755 .073579 0 cmyk
f
1271.2 252.631 mo
1271.2 329.857 1191.64 392.461 1093.5 392.461 cv
995.364 392.461 915.806 329.857 915.806 252.631 cv
915.806 175.405 995.364 112.801 1093.5 112.801 cv
1191.64 112.801 1271.2 175.405 1271.2 252.631 cv
cp
.0116579 .0266728 .0685435 0 cmyk
f
1263.12 252.631 mo
1263.12 326.346 1187.18 386.105 1093.5 386.105 cv
999.825 386.105 923.883 326.346 923.883 252.631 cv
923.883 178.915 999.825 119.157 1093.5 119.157 cv
1187.18 119.157 1263.12 178.915 1263.12 252.631 cv
cp
.0106813 .0216678 .0663462 0 cmyk
f
1255.05 252.631 mo
1255.05 322.836 1182.72 379.749 1093.5 379.749 cv
1004.29 379.749 931.961 322.836 931.961 252.631 cv
931.961 182.426 1004.29 125.512 1093.5 125.512 cv
1182.72 125.512 1255.05 182.426 1255.05 252.631 cv
cp
.0104372 .0216983 .0596933 0 cmyk
f
1246.97 252.631 mo
1246.97 319.326 1178.26 373.393 1093.5 373.393 cv
1008.75 373.393 940.038 319.326 940.038 252.631 cv
940.038 185.936 1008.75 131.868 1093.5 131.868 cv
1178.26 131.868 1246.97 185.936 1246.97 252.631 cv
cp
.0106203 .0181582 .0573434 0 cmyk
f
1238.89 252.631 mo
1238.89 315.816 1173.8 367.037 1093.5 367.037 cv
1013.21 367.037 948.115 315.816 948.115 252.631 cv
948.115 189.446 1013.21 138.224 1093.5 138.224 cv
1173.8 138.224 1238.89 189.446 1238.89 252.631 cv
cp
.00726329 .0199283 .0517891 0 cmyk
f
1230.82 252.631 mo
1230.82 312.305 1169.34 360.681 1093.5 360.681 cv
1017.67 360.681 956.192 312.305 956.192 252.631 cv
956.192 192.956 1017.67 144.58 1093.5 144.58 cv
1169.34 144.58 1230.82 192.956 1230.82 252.631 cv
cp
.0077821 .0167544 .0493477 0 cmyk
f
1222.74 252.631 mo
1222.74 308.795 1164.88 354.325 1093.5 354.325 cv
1022.13 354.325 964.269 308.795 964.269 252.631 cv
964.269 196.467 1022.13 150.936 1093.5 150.936 cv
1164.88 150.936 1222.74 196.467 1222.74 252.631 cv
cp
.00753796 .0169375 .0434577 0 cmyk
f
1214.66 252.631 mo
1214.66 305.285 1160.42 347.969 1093.5 347.969 cv
1026.59 347.969 972.346 305.285 972.346 252.631 cv
972.346 199.977 1026.59 157.292 1093.5 157.292 cv
1160.42 157.292 1214.66 199.977 1214.66 252.631 cv
cp
.00817884 .0136721 .0412299 0 cmyk
f
1206.58 252.631 mo
1206.58 301.775 1155.96 341.614 1093.5 341.614 cv
1031.05 341.614 980.423 301.775 980.423 252.631 cv
980.423 203.487 1031.05 163.648 1093.5 163.648 cv
1155.96 163.648 1206.58 203.487 1206.58 252.631 cv
cp
.0047303 .0156558 .0364385 0 cmyk
f
1198.51 252.631 mo
1198.51 298.264 1151.49 335.258 1093.5 335.258 cv
1035.51 335.258 988.501 298.264 988.501 252.631 cv
988.501 206.997 1035.51 170.004 1093.5 170.004 cv
1151.49 170.004 1198.51 206.997 1198.51 252.631 cv
cp
.00534066 .0122377 .0345464 0 cmyk
f
1190.43 252.631 mo
1190.43 294.754 1147.03 328.902 1093.5 328.902 cv
1039.97 328.902 996.578 294.754 996.578 252.631 cv
996.578 210.508 1039.97 176.36 1093.5 176.36 cv
1147.03 176.36 1190.43 210.508 1190.43 252.631 cv
cp
.00549325 .012604 .0294194 0 cmyk
f
1182.35 252.631 mo
1182.35 291.244 1142.57 322.546 1093.5 322.546 cv
1044.43 322.546 1004.65 291.244 1004.65 252.631 cv
1004.65 214.018 1044.43 182.716 1093.5 182.716 cv
1142.57 182.716 1182.35 214.018 1182.35 252.631 cv
cp
.00601205 .00820935 .0264286 0 cmyk
f
1174.28 252.631 mo
1174.28 287.734 1138.11 316.19 1093.5 316.19 cv
1048.89 316.19 1012.73 287.734 1012.73 252.631 cv
1012.73 217.528 1048.89 189.072 1093.5 189.072 cv
1138.11 189.072 1174.28 217.528 1174.28 252.631 cv
cp
.00317388 .0108644 .0206607 0 cmyk
f
1166.2 252.631 mo
1166.2 284.223 1133.65 309.834 1093.5 309.834 cv
1053.36 309.834 1020.81 284.223 1020.81 252.631 cv
1020.81 221.038 1053.36 195.428 1093.5 195.428 cv
1133.65 195.428 1166.2 221.038 1166.2 252.631 cv
cp
.00329595 .00622568 .0187991 0 cmyk
f
1158.12 252.631 mo
1158.12 280.713 1129.19 303.478 1093.5 303.478 cv
1057.82 303.478 1028.89 280.713 1028.89 252.631 cv
1028.89 224.549 1057.82 201.783 1093.5 201.783 cv
1129.19 201.783 1158.12 224.549 1158.12 252.631 cv
cp
.00317388 .00646983 .0153506 0 cmyk
f
1150.04 252.631 mo
1150.04 277.203 1124.73 297.122 1093.5 297.122 cv
1062.28 297.122 1036.96 277.203 1036.96 252.631 cv
1036.96 228.059 1062.28 208.139 1093.5 208.139 cv
1124.73 208.139 1150.04 228.059 1150.04 252.631 cv
cp
.00299077 .00244144 .01355 0 cmyk
f
1141.97 252.631 mo
1141.97 273.693 1120.27 290.766 1093.5 290.766 cv
1066.74 290.766 1045.04 273.693 1045.04 252.631 cv
1045.04 231.569 1066.74 214.495 1093.5 214.495 cv
1120.27 214.495 1141.97 231.569 1141.97 252.631 cv
cp
.000579843 .00418097 .00872816 0 cmyk
f
1133.89 252.631 mo
1133.89 270.182 1115.81 284.41 1093.5 284.41 cv
1071.2 284.41 1053.12 270.182 1053.12 252.631 cv
1053.12 235.079 1071.2 220.851 1093.5 220.851 cv
1115.81 220.851 1133.89 235.079 1133.89 252.631 cv
cp
.000122072 .000732433 .00619516 0 cmyk
f
1125.81 252.631 mo
1125.81 266.672 1111.35 278.054 1093.5 278.054 cv
1075.66 278.054 1061.19 266.672 1061.19 252.631 cv
1061.19 238.59 1075.66 227.207 1093.5 227.207 cv
1111.35 227.207 1125.81 238.59 1125.81 252.631 cv
cp
0 .000732433 .00234989 0 cmyk
f
1117.73 252.631 mo
1117.73 263.162 1106.89 271.698 1093.5 271.698 cv
1080.12 271.698 1069.27 263.162 1069.27 252.631 cv
1069.27 242.1 1080.12 233.563 1093.5 233.563 cv
1106.89 233.563 1117.73 242.1 1117.73 252.631 cv
cp
0 0 .000762951 0 cmyk
f
1109.66 252.631 mo
1109.66 259.652 1102.43 265.343 1093.5 265.343 cv
1084.58 265.343 1077.35 259.652 1077.35 252.631 cv
1077.35 245.611 1084.58 239.919 1093.5 239.919 cv
1102.43 239.919 1109.66 245.611 1109.66 252.631 cv
cp
0 0 0 0 cmyk
f
1101.58 252.631 mo
1101.58 256.141 1097.96 258.987 1093.5 258.987 cv
1089.04 258.987 1085.43 256.141 1085.43 252.631 cv
1085.43 249.121 1089.04 246.275 1093.5 246.275 cv
1097.96 246.275 1101.58 249.121 1101.58 252.631 cv
cp
f
grestore
605.479 1032.1 mo
651.869 1004.67 685.024 962.299 681.446 913.578 cv
732.27 847.666 722.127 770.943 664.172 712.952 cv
690.547 675.466 643.547 607.049 594.805 627.689 cv
581.978 566.776 511.469 558.167 474.363 583.777 cv
426.657 545.109 351.212 549.813 310.083 596.064 cv
246.885 523.77 101.214 590.224 114.298 679.31 cv
31.5529 683.036 -32.0008 813.681 17.2824 886.237 cv
3.57484 956.854 67.6378 1010.72 134.568 1008.02 cv
156.6 1067.53 236.762 1082.2 283.817 1043.9 cv
318.452 1062.14 363.315 1057.96 393.254 1032.41 cv
490.997 1097.6 553.458 1066.32 605.479 1032.1 cv
cp
gsave
[.00147533 -422.65 422.65 .00147533 357.122 980.715 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
gsave
597.139 1024.78 mo
641.972 998.268 674.013 957.322 670.555 910.237 cv
719.672 846.538 709.87 772.392 653.861 716.347 cv
679.351 680.121 633.928 614.001 586.824 633.949 cv
574.427 575.081 506.286 566.761 470.426 591.511 cv
424.322 554.142 351.41 558.687 311.663 603.385 cv
250.587 533.519 109.808 597.742 122.451 683.836 cv
42.4855 687.437 -18.9339 813.696 28.694 883.814 cv
15.4474 952.06 77.3585 1004.12 142.041 1001.51 cv
163.333 1059.02 240.803 1073.2 286.279 1036.19 cv
319.751 1053.81 363.107 1049.77 392.041 1025.08 cv
486.502 1088.08 546.864 1057.85 597.139 1024.78 cv
cp
eclp
-18.9339 533.519 mo
719.672 533.519 li
719.672 1088.08 li
-18.9339 1088.08 li
-18.9339 533.519 li
cp
.041474 .0713512 .187747 0 cmyk
f
720.672 823.665 mo
720.672 876.503 li
720.672 901.612 li
721.397 901.612 li
717.814 909.814 713.684 917.842 709.038 925.673 cv
690.453 956.997 663.612 985.176 630.478 1008.81 cv
564.21 1056.07 472.77 1085.16 371.866 1084.86 cv
170.058 1084.25 6.81264 966.328 7.24769 821.471 cv
7.68226 676.614 171.633 559.675 373.441 560.281 cv
474.345 560.584 565.609 590.216 631.591 637.879 cv
664.583 661.711 691.255 690.05 709.651 721.485 cv
714.25 729.344 718.332 737.396 721.866 745.62 cv
720.672 745.62 li
720.672 823.665 li
cp
f
720.672 823.642 mo
720.672 875.379 li
723.022 875.379 li
718.206 892.084 711.129 908.189 702.03 923.525 cv
683.832 954.196 657.55 981.788 625.107 1004.93 cv
560.219 1051.21 470.684 1079.69 371.882 1079.39 cv
174.279 1078.8 14.4342 963.334 14.86 821.494 cv
15.2858 679.655 175.82 565.152 373.424 565.745 cv
472.226 566.042 561.589 595.056 626.197 641.726 cv
658.501 665.061 684.617 692.81 702.63 723.591 cv
711.636 738.981 718.617 755.129 723.333 771.861 cv
720.672 771.861 li
720.672 823.642 li
cp
.0413519 .0671397 .185153 0 cmyk
f
722.835 823.619 mo
722.418 962.441 565.298 1074.51 371.899 1073.93 cv
178.5 1073.35 22.0563 960.339 22.4728 821.516 cv
22.8893 682.695 180.008 570.629 373.408 571.21 cv
566.808 571.79 723.251 684.798 722.835 823.619 cv
cp
.0382391 .069276 .179995 0 cmyk
f
715.221 823.596 mo
714.814 959.4 561.11 1069.03 371.915 1068.46 cv
182.72 1067.89 29.6779 957.344 30.0856 821.54 cv
30.4933 685.736 184.196 576.106 373.392 576.674 cv
562.587 577.242 715.63 687.793 715.221 823.596 cv
cp
.0380865 .0641489 .177523 0 cmyk
f
707.609 823.574 mo
707.211 956.359 556.922 1063.55 371.932 1063 cv
186.941 1062.44 37.2995 954.348 37.6979 821.562 cv
38.0968 688.777 188.384 581.583 373.375 582.138 cv
558.366 582.693 708.007 690.788 707.609 823.574 cv
cp
.0379339 .0647593 .170748 0 cmyk
f
699.997 823.551 mo
699.607 953.319 552.734 1058.08 371.948 1057.53 cv
191.162 1056.99 44.921 951.353 45.3107 821.586 cv
45.7003 691.817 192.572 587.059 373.359 587.602 cv
554.145 588.145 700.386 693.783 699.997 823.551 cv
cp
.0376287 .0588388 .167575 0 cmyk
f
692.383 823.528 mo
692.004 950.278 548.547 1052.6 371.964 1052.07 cv
195.382 1051.54 52.5426 948.358 52.9235 821.608 cv
53.3038 694.858 196.76 592.537 373.342 593.067 cv
549.924 593.596 692.764 696.778 692.383 823.528 cv
cp
.0347295 .061738 .162173 0 cmyk
f
684.771 823.505 mo
684.4 947.237 544.359 1047.12 371.981 1046.61 cv
199.603 1046.09 60.1647 945.363 60.5358 821.631 cv
60.9074 697.899 200.948 598.013 373.326 598.531 cv
545.704 599.049 685.142 699.773 684.771 823.505 cv
cp
.0343328 .0565194 .159884 0 cmyk
f
677.159 823.482 mo
676.797 944.196 540.171 1041.65 371.997 1041.14 cv
203.824 1040.64 67.7863 942.368 68.1486 821.654 cv
68.5109 700.939 205.136 603.491 373.31 603.996 cv
541.483 604.5 677.521 702.767 677.159 823.482 cv
cp
.0341192 .0570687 .153841 0 cmyk
f
669.546 823.46 mo
669.193 941.156 535.983 1036.17 372.014 1035.68 cv
208.045 1035.18 75.4079 939.374 75.7614 821.677 cv
76.1144 703.98 209.324 608.968 373.293 609.46 cv
537.262 609.952 669.899 705.762 669.546 823.46 cv
cp
.0334478 .0528878 .149935 0 cmyk
f
661.933 823.436 mo
661.589 938.115 531.795 1030.69 372.03 1030.21 cv
212.265 1029.73 83.0294 936.379 83.3737 821.7 cv
83.7179 707.021 213.512 614.444 373.277 614.924 cv
533.042 615.404 662.277 708.758 661.933 823.436 cv
cp
.0294804 .055024 .143893 0 cmyk
f
654.32 823.414 mo
653.985 935.074 527.607 1025.21 372.047 1024.75 cv
216.486 1024.28 90.651 933.384 90.9865 821.722 cv
91.3214 710.061 217.7 619.922 373.26 620.388 cv
528.821 620.855 654.656 711.753 654.32 823.414 cv
cp
.027863 .0495003 .139651 0 cmyk
f
646.708 823.39 mo
646.382 932.034 523.419 1019.74 372.063 1019.28 cv
220.707 1018.83 98.2731 930.388 98.5993 821.745 cv
98.9249 713.102 221.888 625.398 373.244 625.852 cv
524.6 626.307 647.034 714.748 646.708 823.39 cv
cp
.0275578 .0501411 .132845 0 cmyk
f
639.095 823.368 mo
638.778 928.993 519.231 1014.26 372.079 1013.82 cv
224.927 1013.38 105.895 927.393 106.212 821.768 cv
106.529 716.143 226.076 630.875 373.228 631.317 cv
520.38 631.759 639.412 717.743 639.095 823.368 cv
cp
.026276 .0427558 .129122 0 cmyk
f
631.483 823.345 mo
631.175 925.952 515.043 1008.78 372.096 1008.36 cv
229.149 1007.93 113.516 924.398 113.824 821.791 cv
114.132 719.184 230.264 636.352 373.211 636.781 cv
516.159 637.211 631.791 720.738 631.483 823.345 cv
cp
.0224613 .0450751 .124239 0 cmyk
f
623.87 823.322 mo
623.571 922.912 510.855 1003.31 372.112 1002.89 cv
233.369 1002.47 121.138 921.403 121.437 821.814 cv
121.736 722.224 234.452 641.829 373.195 642.246 cv
511.938 642.662 624.169 723.733 623.87 823.322 cv
cp
.0222782 .0400397 .121218 0 cmyk
f
616.257 823.3 mo
615.967 919.871 506.667 997.83 372.129 997.427 cv
237.59 997.022 128.759 918.408 129.049 821.837 cv
129.339 725.265 238.64 647.306 373.178 647.71 cv
507.717 648.114 616.547 726.728 616.257 823.3 cv
cp
.0222171 .0404669 .114565 0 cmyk
f
608.645 823.276 mo
608.364 916.83 502.48 992.353 372.145 991.962 cv
241.811 991.571 136.381 915.413 136.662 821.86 cv
136.943 728.306 242.828 652.783 373.162 653.175 cv
503.496 653.565 608.926 729.722 608.645 823.276 cv
cp
.0222782 .0368048 .111727 0 cmyk
f
601.032 823.254 mo
600.76 913.79 498.292 986.876 372.161 986.498 cv
246.031 986.119 144.003 912.419 144.275 821.883 cv
144.547 731.346 247.016 658.26 373.146 658.638 cv
499.276 659.017 601.304 732.718 601.032 823.254 cv
cp
.0195621 .0385443 .106355 0 cmyk
f
593.42 823.231 mo
593.157 910.749 494.104 981.399 372.178 981.033 cv
250.252 980.668 151.625 909.424 151.887 821.905 cv
152.15 734.387 251.203 663.737 373.129 664.103 cv
495.055 664.469 593.682 735.713 593.42 823.231 cv
cp
.0194705 .0350652 .104036 0 cmyk
f
585.807 823.208 mo
585.553 907.708 489.916 975.923 372.194 975.569 cv
254.473 975.216 159.246 906.428 159.5 821.928 cv
159.754 737.428 255.391 669.214 373.113 669.567 cv
490.834 669.921 586.061 738.708 585.807 823.208 cv
cp
.0192874 .0354925 .097261 0 cmyk
f
578.194 823.185 mo
577.95 904.668 485.728 970.445 372.211 970.104 cv
258.693 969.763 166.868 903.433 167.112 821.951 cv
167.357 740.469 259.579 674.691 373.096 675.032 cv
486.613 675.372 578.439 741.703 578.194 823.185 cv
cp
.0190433 .0315557 .0942397 0 cmyk
f
570.582 823.162 mo
570.346 901.627 481.54 964.969 372.227 964.64 cv
262.914 964.312 174.49 900.438 174.725 821.974 cv
174.961 743.51 263.767 680.168 373.08 680.496 cv
482.393 680.824 570.818 744.698 570.582 823.162 cv
cp
.0164187 .0336309 .0885328 0 cmyk
f
562.969 823.139 mo
562.743 898.586 477.352 959.492 372.243 959.176 cv
267.135 958.86 182.111 897.443 182.338 821.997 cv
182.565 746.551 267.955 685.644 373.064 685.96 cv
478.172 686.276 563.195 747.693 562.969 823.139 cv
cp
.0159609 .0290532 .086244 0 cmyk
f
555.357 823.117 mo
555.139 895.545 473.164 954.014 372.26 953.712 cv
271.356 953.409 189.733 894.448 189.95 822.019 cv
190.168 749.591 272.143 691.122 373.047 691.425 cv
473.951 691.727 555.574 750.688 555.357 823.117 cv
cp
.0152285 .0300298 .0753185 0 cmyk
f
547.744 823.094 mo
547.535 892.505 468.976 948.538 372.276 948.248 cv
275.576 947.957 197.355 891.453 197.563 822.043 cv
197.772 752.632 276.331 696.598 373.031 696.888 cv
469.731 697.179 547.952 753.683 547.744 823.094 cv
cp
.0145571 .0244755 .073579 0 cmyk
f
540.131 823.071 mo
539.932 889.464 464.788 943.06 372.293 942.783 cv
279.797 942.506 204.977 888.458 205.176 822.065 cv
205.375 755.673 280.519 702.075 373.014 702.353 cv
465.51 702.631 540.331 756.677 540.131 823.071 cv
cp
.0116579 .0266728 .0685435 0 cmyk
f
532.519 823.048 mo
532.328 886.423 460.6 937.584 372.309 937.319 cv
284.018 937.053 212.598 885.464 212.788 822.089 cv
212.979 758.713 284.707 707.552 372.998 707.817 cv
461.289 708.083 532.709 759.673 532.519 823.048 cv
cp
.0106813 .0216678 .0663462 0 cmyk
f
524.906 823.025 mo
524.725 883.383 456.412 932.107 372.325 931.854 cv
288.239 931.602 220.22 882.469 220.401 822.111 cv
220.582 761.754 288.895 713.029 372.982 713.282 cv
457.068 713.534 525.087 762.668 524.906 823.025 cv
cp
.0104372 .0216983 .0596933 0 cmyk
f
517.294 823.003 mo
517.121 880.342 452.224 926.63 372.342 926.39 cv
292.46 926.15 227.841 879.473 228.014 822.134 cv
228.186 764.795 293.083 718.507 372.965 718.746 cv
452.848 718.986 517.465 765.663 517.294 823.003 cv
cp
.0106203 .0181582 .0573434 0 cmyk
f
509.681 822.979 mo
509.518 877.301 448.036 921.153 372.358 920.926 cv
296.68 920.699 235.463 876.478 235.626 822.157 cv
235.789 767.836 297.271 723.983 372.949 724.211 cv
448.627 724.437 509.844 768.658 509.681 822.979 cv
cp
.00726329 .0199283 .0517891 0 cmyk
f
502.068 822.957 mo
501.914 874.26 443.848 915.676 372.375 915.462 cv
300.901 915.247 243.085 873.483 243.239 822.179 cv
243.393 770.876 301.459 729.46 372.932 729.675 cv
444.406 729.889 502.222 771.653 502.068 822.957 cv
cp
.0077821 .0167544 .0493477 0 cmyk
f
494.456 822.933 mo
494.311 871.219 439.66 910.199 372.391 909.997 cv
305.122 909.796 250.707 870.488 250.852 822.203 cv
250.997 773.917 305.647 734.937 372.916 735.139 cv
440.185 735.341 494.6 774.648 494.456 822.933 cv
cp
.00753796 .0169375 .0434577 0 cmyk
f
486.843 822.911 mo
486.707 868.178 435.472 904.722 372.407 904.533 cv
309.342 904.344 258.328 867.493 258.464 822.225 cv
258.6 776.958 309.835 740.414 372.9 740.603 cv
435.964 740.793 486.979 777.643 486.843 822.911 cv
cp
.00817884 .0136721 .0412299 0 cmyk
f
479.23 822.888 mo
479.104 865.138 431.285 899.245 372.424 899.068 cv
313.563 898.891 265.95 864.498 266.077 822.248 cv
266.204 779.998 314.023 745.891 372.883 746.067 cv
431.744 746.244 479.357 780.638 479.23 822.888 cv
cp
.0047303 .0156558 .0364385 0 cmyk
f
471.618 822.865 mo
471.5 862.097 427.097 893.768 372.44 893.604 cv
317.784 893.44 273.571 861.503 273.69 822.271 cv
273.807 783.039 318.211 751.368 372.867 751.532 cv
427.523 751.696 471.735 783.633 471.618 822.865 cv
cp
.00534066 .0122377 .0345464 0 cmyk
f
464.005 822.843 mo
463.896 859.056 422.909 888.292 372.457 888.139 cv
322.005 887.988 281.193 858.509 281.302 822.294 cv
281.411 786.08 322.398 756.844 372.85 756.996 cv
423.302 757.148 464.114 786.628 464.005 822.843 cv
cp
.00549325 .012604 .0294194 0 cmyk
f
456.392 822.819 mo
456.293 856.016 418.721 882.814 372.473 882.676 cv
326.225 882.537 288.815 855.513 288.915 822.317 cv
289.014 789.12 326.586 762.322 372.834 762.461 cv
419.082 762.599 456.492 789.623 456.392 822.819 cv
cp
.00601205 .00820935 .0264286 0 cmyk
f
448.78 822.797 mo
448.689 852.975 414.533 877.338 372.489 877.212 cv
330.446 877.085 296.437 852.518 296.527 822.34 cv
296.618 792.161 330.774 767.799 372.818 767.925 cv
414.861 768.052 448.87 792.618 448.78 822.797 cv
cp
.00317388 .0108644 .0206607 0 cmyk
f
441.167 822.774 mo
441.086 849.934 410.345 871.86 372.506 871.747 cv
334.667 871.634 304.058 849.523 304.14 822.362 cv
304.221 795.202 334.962 773.275 372.801 773.389 cv
410.64 773.503 441.249 795.613 441.167 822.774 cv
cp
.00329595 .00622568 .0187991 0 cmyk
f
433.554 822.751 mo
433.482 846.893 406.157 866.384 372.522 866.283 cv
338.888 866.181 311.68 846.528 311.753 822.385 cv
311.825 798.242 339.15 778.753 372.785 778.853 cv
406.42 778.955 433.627 798.608 433.554 822.751 cv
cp
.00317388 .00646983 .0153506 0 cmyk
f
425.942 822.728 mo
425.879 843.853 401.969 860.907 372.539 860.818 cv
343.109 860.73 319.302 843.533 319.365 822.408 cv
319.428 801.283 343.338 784.229 372.768 784.318 cv
402.199 784.406 426.005 801.603 425.942 822.728 cv
cp
.00299077 .00244144 .01355 0 cmyk
f
418.329 822.705 mo
418.275 840.812 397.781 855.429 372.555 855.354 cv
347.329 855.278 326.923 840.538 326.978 822.431 cv
327.032 804.324 347.526 789.707 372.752 789.782 cv
397.978 789.858 418.383 804.598 418.329 822.705 cv
cp
.000579843 .00418097 .00872816 0 cmyk
f
410.716 822.682 mo
410.672 837.771 393.593 849.953 372.571 849.889 cv
351.55 849.827 334.545 837.543 334.59 822.454 cv
334.636 807.364 351.714 795.183 372.735 795.247 cv
393.757 795.309 410.762 807.594 410.716 822.682 cv
cp
.000122072 .000732433 .00619516 0 cmyk
f
403.104 822.66 mo
403.068 834.731 389.405 844.475 372.588 844.426 cv
355.771 844.375 342.167 834.548 342.203 822.476 cv
342.239 810.405 355.902 800.66 372.719 800.711 cv
389.536 800.761 403.14 810.588 403.104 822.66 cv
cp
0 .000732433 .00234989 0 cmyk
f
395.491 822.636 mo
395.464 831.69 385.217 838.999 372.604 838.961 cv
359.991 838.924 349.788 831.553 349.816 822.5 cv
349.843 813.446 360.089 806.137 372.703 806.176 cv
385.316 806.213 395.519 813.583 395.491 822.636 cv
cp
0 0 .000762951 0 cmyk
f
387.879 822.614 mo
387.86 828.649 381.029 833.522 372.621 833.497 cv
364.212 833.471 357.41 828.558 357.428 822.522 cv
357.446 816.487 364.277 811.614 372.686 811.639 cv
381.095 811.665 387.897 816.578 387.879 822.614 cv
cp
0 0 0 0 cmyk
f
380.266 822.591 mo
380.257 825.609 376.841 828.045 372.637 828.032 cv
368.433 828.019 365.032 825.563 365.041 822.546 cv
365.05 819.527 368.465 817.092 372.67 817.103 cv
376.874 817.116 380.275 819.573 380.266 822.591 cv
cp
f
grestore
596.582 1134.39 mo
535.38 1124.36 538.802 1070.7 599.583 1062.78 cv
634.565 1013.87 744.841 1058.4 700.169 1102.61 cv
713.344 1144.1 630.431 1157.32 596.582 1134.39 cv
cp
gsave
[.00152408 -97.026 97.026 .00152408 631.483 1138.56 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
601.434 1128.71 mo
548.741 1120.07 551.687 1073.87 604.018 1067.05 cv
634.136 1024.94 729.082 1063.28 690.62 1101.34 cv
701.964 1137.06 630.577 1148.45 601.434 1128.71 cv
cp
.0377508 .0653696 .165072 0 cmyk
ef
731.523 1152.16 mo
748.299 1152.16 761.9 1164.34 761.9 1179.37 cv
761.9 1194.39 748.299 1206.57 731.523 1206.57 cv
714.746 1206.57 701.145 1194.39 701.145 1179.37 cv
701.145 1164.34 714.746 1152.16 731.523 1152.16 cv
cp
gsave
[.00158736 -53.4994 53.4994 .00158736 731.522 1205.66 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
731.523 1161.37 mo
742.624 1161.37 751.623 1169.42 751.623 1179.37 cv
751.623 1189.31 742.624 1197.37 731.523 1197.37 cv
720.422 1197.37 711.422 1189.31 711.422 1179.37 cv
711.422 1169.42 720.422 1161.37 731.523 1161.37 cv
cp
.0377508 .0653696 .165072 0 cmyk
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 21.1.0
%%For: (ABCDetective) ()
%%Title: (Clouds.eps)
%%CreationDate: 5/31/2018 3:03 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3R.5ehDD6cZS(DJRCeI3sSG91p&/U$KaknPU'[Lc[7^erN'#LeH),sm+K_X54@162lXC*b,G_oI6H&Oo]ki#8#H<i<%&pS
%>UZ;F8k>;fO=1INITp/DBjWeg;r'8nW=+T:IH@8t6>'R>P+hqdpnXQU.Ln<4[7RjT)]+;.>%9D3p,i63-l'o(=m:Xc.j&`,&pe55
%3rM90R80UP"_3M(r+<>u%BD_[<lQ:/acT'_N=<N=_'kZNhii6V/`28Z;I_fnfO/U`^7IK;3:j9Zbt1p`<IooaMQ69Z7,Dn0#&eUD
%QXht\p%/YUSlJp=<[@cQ-$Y]I<L'Jc1-R[Frt<4LN4_KN.Q%Eq@:e6^pAg4QLki_s\/6t?c,uh<VVm3a?LW+X$fMfid,b737V%_r
%i^*\acIm\0rR78@p6X_-^Y<W!*PMbrKI"-(Z"W,8!puY"+\@F3Jj"XV=TD[7#`qUTEhb_[<5oBaHpJI0SB))3KV/ZD?/q0"-8lE;
%8L9)rM,>!!OG'_!8O_d[O9-'4bDI&JjJ8O6W]e@eR`=g``ZM2,8Y]1%$uOrWL>u2/0+\1kk1$2_Mt2J:-TPS7h;rt2Baep+m4j]f
%!hrU_SbMH0%ZGM-Z8r^E2'+7*1[@o@$pPY?OT']AJp^1E1leoG>thh`b+B+WB\m(VEmX$8qmQ^lKYRt);@`5kY/1R5'];-Po-$hl
%6@qOi;DiuqX\/A+c]&Us1i*2e9goWcb@1:Ch+Ma2:\F+"fWMj7Y6lG45*9!3RcgBNLCGf-4ruY/%!l6)bFX(QLeF>+lnuqf8[mES
%[#oG39[.8p%0=U.!#DmrY(048U*9T4rY<TR3Gsf6.L5uA&YBdAT620HZWYj/MYJZYGZ>IJW[Q;rQ:6PW@>]Zm'Ep^PN9L%qh%[i6
%fVH*=I<6M,kjXWAf6-GWldu[(iA5Z#B!GPuMaOgR]TUNK+3VO%QDH!?\7K(RbG'V;ckL!t&RCT,`M)Y0.)KqN_/>&F5%?OiMd]8^
%+]A)oI1RiT-FbjPd(tMS53""Y$D2;f8h<"\,)+>GGC5%fL_m3dBhBPaDMT2p@irn22T@$E4Jam2,pa9ie"IJ&M?!gP6:]WT^b]#r
%0(^6/6QGV6VkT-GR+#h/j7!M$6Q?uA.;A!R`"AX3'-^!/!2",dYmI&-)rc\"PaPKU-ug[=\0dCC!^)Yl`]=GNV*0!s`+-0JfM_nY
%n.[^j17ao>NHSb1YR_r!A/#V$_^Xa?1?+,9fT"$7i^i<##NIW65m1UUPB*NlP^IQ^.d9WsRF!Xu,J[6?TgHS[K^k@+T>F*4:KOF3
%,JZ+T0`3?ofT!"/Vl(3Tlh$eY4B5?1fp)5q5]d?kr1g"QC-N^@_jU50HH(d&l2d/lV?<tHP2WQ#1!OpQc"QKb"(>[",f<oN0Q7oN
%Ch5X^*Qmsnq1l/^WT<GrJj;!"YOnG4dEh52r<L5OR5VUZoUi/3cgE=^VePe0VE(\mp-6HfQeY[=09`*%h,jF`L79N,EaS(G>`O8V
%?g0f#q.JH-j<6]crmK-Z'7E:h"XttDQ72n>%4u?4.R"7mi"`D!VIEptr+qJ!!\\>6.;NK(d`$[[g=+HP3#i-\QDYIOdm@YY@Et^Q
%"rRVpQH9dWLj7j(F=mDX=NGe=4:laa#XcG6_5AeK.o-1Y#^RS'Gjm$R!Iq`kZ:r@%?(KBsL1&:f;\-L4J%18&Y`cj?A.pnPTS2m%
%ja54F4[jrrbhFOB`d%Sp*;=F/,72i&PjcWITnMj<Scn@&q&C/s-uU\?_n@,03'+*s>!U^r"bgSEMnLm':o!(r;V$-d9#'h[a5rD5
%KQ4#[[;!7)h"tFBl>sNjp#&O?rbi/2r5Y>d+FXeT&[d>1V\q;ZFo#Ooi<HKSYZ;N.K@6&L]R1!Xc5`7E9C".83B$ac'.msZ.R<M$
%M]XS3juo66&4o.7+O[H=<+[1[Q>;(8Hld,FF%*Kg&D,jrh@AGVF'C00g3iWFVJ@AA:/+J2,!09Fk%NQ-:mh=FUtB:H%1(NSs6?XK
%js_j8K8;4_[RaQb@u>7j<LRX,1!%Lj2/7<F5WK1`b$u1sT=I59!,H'q7iW;nY+I62MR4asQ>rF6g-CP!Wjm_%QMkg[lhpE=@UmTL
%6;?$G$LG\hbOmBAs,?CNYp;Bi9k'ZD'n`B+KU/Tjmr]*C6.Ue#"+WY2L=<>[o/OM?<6d5SNk&PJ&@uXUCX8,$O45cAH6Ds[Us<;+
%3e#"3]0P-N1E&d^(.Y'c#mS$UYfFma(CZ3bI*1GZrVW9`HQV-pY'I?k_I3:K7I+6nS%Q82QIFdAZM>QWi<>\4;la;c>H$R?HdQhq
%3huQC<>d999Ac;:BGsF`5kDs+)X_79D<D^UH;9QV.ZV;C1+_qSrWcpi2nSp6qa,o>il!+oFjG`ZZ[+Kq#K?gnT.q#/FT[5%a6a2W
%B!jXD<Qi9d-SV$fh*H(:b%*6#[CNtQ\)o*g9J0foCr/do7#P0gL7>ie5[?NOpfZbdNL$W'APZ_p;nAiH\ZuFDcF<XD9^PbRO1;3>
%B6B-n'<ZL^:*R,73Ji%bBd*r/4DpL]7CFpSVLa2U$Pna_qMk^hAuL^B#^1de3K.3.]#?^$R7N(Mb/UN?Y+g9gl<Z>QmTHI+7a68T
%\PQ-CmI3r$7R7H<H*eDD8*A[d-D-^,m4P_=VD+65;p!)nD=bmHXGc_mq_XLm'_:ZLbOPe4Md2uHgO-2G=.eXgVu>S=aojJ7JKFT\
%9#<-=>*DDN;h1hUeEB/g,>5!WU!6cW)<5b:[hX(k[*S8dF?!eaJ^r-OCHF6JD1/>A7&(.3jlCe=#I/8,Qgsr6C-)/.*X!so:RC7L
%O$IE"1<RXr`r4--rA5q!/Al9[CBnI$0-FP_EO-5/RC;/\-e@Qk.+++"[)rNOL<&<l_0Y;nCnQk@I@W:GZ[jOLD9/TkXBnY!IYis+
%kekoib)C'dW?Nq9@@-)?^>ZD1JP]WlA!nI^#H6aaQB)fL<E9o@-$/]6Dj=QSE-8Or[)f<QdrcB?RT5d;8o$G)POA.E-GeA;Z=X(F
%F0^Y\I2RpGA,g?]\KkrqUde"d[(K3p]-KLKYZG8"B/DE*H2aA;Cp8Nj]V;G[O8J0O_7#A0>gF!Z<bD*h*-:YVp&$"E>8qqD!nE%'
%;<4H\cRe=HWC\42/UKQT@iCB1B2tf4=kYm:q=[:^WbH!V.IU9'e^VSho5dkEXfZ#M*hmP`]9Usnp17j&Yuc]@.04KHZZ10%k%WfV
%+#cuLVDQX8)`0Xh850*='4!^hnESk3K,'r&NYkZ*"c`E$CB37KL(d:VHgcW\Hk8B;1bP0U/=(:T6R%I8PlD[XmmIgIfan1TL8HA3
%^&nM]<Q6OAmYM1q8(BU`6I%"ki!mr#6-h$@cf<IV,D<0E..r`pbn@6T#AfuJFf><,%`e"b=s`F!<>A[jA?.EXOZ&/l-$JRmIC0Hb
%jM?2gF7<^<p8T;NWkr<'XW52s6$+P<p#,(2OrC!rB.7QZ'UC2p"&XeJ%:t'0[^WcN-K+OtGXYH,MiAu[QN^`fCl0+9=2Zn+Z<L>q
%C!/WXL3=m8pD(AEBB1oP>g-A.PG0&@qW;oG%4EitNlZIT,-!2cf:2q7)P*/a^`?+iA6AP%[kDCJ)Wsk(RBgRO<,E3n^g^!.[G6sA
%oX^Sf0Gh]I-/7#?.SDt5@0_,Be=%%N#42BCB8l1E;G;IW9#L?`C=\mR]=-#DXf(!gmO0_=5%No?&B*<5\e^eqnl<0]7MhYOID/?T
%R&b>jh?aRX8!uCj1[ileYk/2*!F;r32m_X2<WQO%51\:I;VP[JmVl\/=)(3e[J$3AJi_/nf@_`-bG.=%[Ra8G$5YF"Shk7j@l=9P
%Us:utVRUulF%Nj0X'A&<eNOO5D4sRm`*B9GE)^XC$E<P<QBoatc9KFYk]LKU@TI"[/ca^QJ]ag+Mu:-0[+m='e7'of>[iX(k%>4R
%S8mnC&9AUO0RP2n08uL\_iJo!5,K<A0__-F`&?'8AH'W1\VtUX0T.&3k6+D-`i]*+FiB*T;I%fGDF(@m%G=h8Ip]u`\dQaAGh2sL
%;drN\Z0^hQX-#;t"tfOo^!&5P>9OS_W$Z[3B"CNZ^!)PEgjP_#M7jD?@4*YN.#'WQ=D)]k-/;9;$e#.RF<qYK5):/!P0h1OF,%"+
%`c\Z87[&o/\U8A4D=6_qCr5<7Tm4Qe<&Ce=q4UoV^BZp!q9Dk\bG$-ugEuV8W<cCkq'@\0cKkE#hkO<sA*j!RU-j6%.^[9%bYS3?
%$oR;`b:RBg^;t9t;#ViT&'3XrI_4>?o8=2Hl2OQTmNi@^P(i[5BN\k*4o2mOo)@5UoUR6mll6/MB)b/4PI6"'C&(gX;D:o8K/IQ.
%6W<\t>1BkPS9\mN_?(dE]DAPYAIdV>l>u<k?c2hWm45DNZfQI<XRS*2G;NT:5'.YVo?7"=<t3Z'gOhT@PSL-.?>f[EE^27u=W=dt
%/'^'@no]PDafhAt\:ISgFUNQr7Mb@U_;[.^7[7h"g/>uJ#1;,-?\'9L-%r;B4$5:EUaur_rTa]V$U[p1Hb,*3q2T[C%Eun;"RLF@
%<N)R)VmilHR0arCECs,NqMBfM[*s&Ul`g$t\`2j"L_V34EAK.MEIG`G<,#>Ip%W!#A[8A8k*4$@>9Q1qR7h29h.!UtP>.+-R(&f>
%V'(ciAPt,n\93DR_>4)N$&t6"jc[]"O]%iD@%o.ZZe#<Qj5rX8"[EWdJGUBQ!ug&O%a:(gJ?Q#Erubdg2T_*<$\`2)d_LC'9go\f
%"_Yr0N7F.jbgd!B$'"'r8!Xq"WQUgbfNG_q,Hr5*B*HAUf1iN0Qqog&[-$h;bn#Z%FY/+?%-;,$P7"8+:21;O6tTV=<d)l,8m7io
%=C@SW-Ndn.^2'1@NL4LEU(\RQ!,V\Tfh0<9/U,N,eprI.Fp>29f!XTpDB>DdX""]n-?Y9V$eGepXP[9-^ijubs6*d4*og;GASn+M
%<`co[VpB"VDtjhPL0*XA/M465%"B&eH<#0_O.5;&/5$dY$_8\tI/tka`7^/ibq4(@A2Io5>3HMpV0Qn.OttmBcilTc=NBPgVM`UH
%&%d.`qf`*S<aTZ?(7C@(i8"X(H)\>$*`heLe+nCkd:9?!d9!\'Fp3Y?@^QWuja+r@H,at$C6dugh(V5sQCDhheS%\l4/L4qX%'0'
%Cfa,>/Bh@?Z.Q>bR?a1&NaQcIq4u[?.n4tX4[lrS^.oE20g@DZY7M@-\(ju9VHBO$(??g0pj-a^QCR,YJc]M'7%Kkph/mTsh`8sj
%7k36uTene!$`u]a`<jcN#6g#n+CZSE@nN37CQiY=bbt1tKj@5^mjjtA_>TU*hLgrKed6dVX&2YeAK+EKr7:4e'1#dD4B=(3=T;23
%*rEts1b-GMP[DgC"@W=l`C;\B[c1EU\B<#k(Kafj87C\[L-(WkH9f)\T=;)ObpffNnXG1XqS'ItcfZcgT9c7*6s3Zdk[\=*bI2Pt
%%PA-RBG^`t_b5n>I@u's:"PLl^[1!+K#b1n3'd2kH0;OB:X@IpUO7,6/RHFQ8(:hL?aF_t6"0&kM"8_1dpeM`(dnq0Xo]:E*>^_m
%J7l\hrJJ:dKbr(%#mdE@-\B=$"q"*k%6(h0rsB8SDJ8Ch/U#9?/GrbM\k=7u]3_7/^W/E$e"$Q)^L-?'',iE2-5@^WR[<0D-t#,/
%hW4`#jlLrFmg%.#NgVX=aDI`a./GO0AHhO^gHnQYo[39"=Tk>LHLJ\8TV&4[7F,,]VA^kUB]nSV1i2]n%7Uk[He,EDb]M,DWiNcn
%?H0IFW4</pJf.1i]7^TnORlDu1AS3Z!F)8QT=2_GZ7N6/qt)SUBCf<MAge(`n2>E^__tcl^l2[,,K=%g5Z",g.)^I]7`%F.N>><o
%D#[8np7:ZIiW2Y>3g8#m,1!(6S!oH2?de-aHBq6DO,#D^CJ"qf_bf%;K#%;riV\iTFH\<>H`6Sg<c%RV'/1WZj@ls1T;B\>RC3j:
%YpL:=F1jX6)Q3Nlg[F.*W8_`8dU28j%f;grLOI_O5d$@jj2p3qrUEb5n9337!UUs-*9aT`0'G1[Xk9&W`T(BV1<B3YrEm<V)>/Hd
%&Lt/7N=`c?,$/9JX_3dZSjceX%omlj'cnCt4J5u3LB;<J]W*HL!64*cNJdW)^WB)p&6lG\l)QPA[Jm;9knJV_p"MrQg`O!)C=GV;
%ePGs*eeYpanFV9I@@I\k8oS&On9TmsOAu)YmgbTOZOH4V!u0m@elr;;X&BlkY/"01OhInQhJ>$"&FK\I+t$33&2'5h@?Yt)7'_r*
%=+sLX$IQD)^#'d"rW(QJe#ia;YuBmeL*!5krUhBh(l55MZ]Y;$5WKrAOl<r(MSR@?87R%^'$Q?oBE2:Ps$!1h907ANXgD&=g^7UR
%NF%&*mo,!Cks.QMI$Iia,X;AqU+<@APCIbVrD%^hFZ!%ie"&`H\H8o>[^L,baE/nV96;E>;%0$_7`NMoJIf:P7V3BK&&_>NgLLd#
%>T&RV[8*Lhk@iXQ8HcAb:8e%FX:/;"=su1sN*;oq^YehlkUh#^NX;9?YoAjC1DjJD-BP[SiWklmaf5tCH/U(-,.&j-e$q.!?1t3r
%rI^IEU2/[$L(WV>HiZ.FE(g</s!oSEW..kACfdA=[K['Q;DR3\d?nk(C.,A)Ol2WqGRPSfXAW0Iktm&#?':RXZSAmu!gVFmJKbE,
%gIqP'#c=`$Tj58?1!L\N\ZeloNsZ#-Km%Tq=$fA8gV#YpUbleH)`1+GrT''-f=+=;?&RdKbdMXp70d[RifX\#r!)]!2h"LIIf79A
%1-KQ'I6=U\gCTsS6<ie.7%Tq\%s(FROP<*4lG%dpqXrVBYM[h<q85m)\,S;[U]2$.L-H"D7-@?r59Be`PuB7/b:+e9AX*]%)%,Gg
%MQUV"B']4f<[@GBOsiHjEO$nRi6RXon<]7H=dM#@_dsNbQ6dEu;ANeLjs3UB_4N/BOs_-1/nk<?,0>unM8+L$,d?U/0'Ksnl'uA%
%?VWDb/Gs'%PL7K*:og%:dqb*nC4aIC+/`:W%fRS0F0MP:!j4ctMQ>ZC`pf]^0oZ&*QrCM>0_tA\_8N(88/]NWY\3#*I*@E?Z]O-%
%S7,tgHo?#"Bk5=1CLdjkclkEum;K-UL29EA+W?a&Eqn!)A^b_3$%H+KRaj4*U$K9Z*icC,Z7_7Ed`eOicCpT`cqC,*qXp=P/X'%i
%_%%;S2OAFe/*%32#"2eW`1.+T]4d!=Ll2\Y/qU"]"\ZoCORij7TF73]#dPS8h]h6.J=Y$V-D0BU]FIV5J[@0cnKRl;4T;Fm`T?%(
%jK_;tNdqXi6j,LfrZq%^3e%,k-bphmr,E-gi+3,&C'&T2R",EU"tL/bW8N`)K/=Eq.43%p^tjTRG`WmW-mAb1<1jh$.K`X+JTd=h
%o7@)P5ZOV_!gH03)aO?QE$;,`KKfP-$@/M1ZAhV/"eBTl7sN;]s%sD>&2k866d+[2,Ep5[1M.u#YoL>J+B]%BQj0j.JBVRjp2[I8
%E$1&?8>QI;WIULR+Km<R$1_tD\dZb^EW#L!%nj^#_(P7#)^>*CGo:-]"c:VmY76Sb/EfP5[00URK3X69:Ht^_>R@jS8VXDj@kZ,V
%XSr'nGZ4SSgd0d7p,;mQFt'ftQ5L<VaX)MZS4N(_U2pt(s$oseT#VeDE#aD2cs$Tl!kBJ9,\%?ML=8#a\M=s&3Q0V?<[_ndaCL\N
%67$>tKY>3$j8E@n(oQ[T[YQ-+1bKs1X`6miTM)p_mN=mZ-<#2`q?J?7W%t79^6f./Td3$A9>p#A&r>T+C&Dr\3W',,hTI(Pak3nW
%TnR44/j)pEXanU,Yu&jQ#ch/nE9?uWIfm*(Bd%Sc#9dEk]CH4?OTTuM`3YZZIia!.?GlXdNW8A'4aD4sHMp'SjARH1coaID]&EUj
%6I.+a2ro]pGk3GAZU+J[<JZI$RpN):9.[Gs;<]u*4"sU4h&Sa!c)0JeQh]XTC"7V8>HUiUQf!+I%_O`>#eLo'rL`lL']+7)gE/\b
%d!=j>KaZF\_8U0uWF-HsMKXmm5WuLKlaP6DfkB@aJj,:?KD]a>(+Yp[7%4mQ@eD+1s5_a>KL5E_;>RJF^Th5W*Z5b)#MPf,6(pF[
%rsdQ*P*A`62eA39kXAZ'_Q!MVeddm<\'A3o7ZH4WbcZB/mBQq\9`3PGiOuiQ_a!OCqt%Zn^YY?!GqZPtYAU6C*>4H]%,9=S\1rl7
%e3dkY33<%=:@f!uiosN[[6+%iUM'>,YDiB$s,RD3lhAQ+e/4rH!kVE`3I2cbB70!,9+37fp]"NT'(2QE?O9B'n':qUCo]qs6ddXI
%IVMhJ%tltSHsI&5l*UU=Wa2TI)W^=Fs6+R*KD0kM[/J$)qO`Ome7mMQs,6+>8%Us&X[I*>kPpWU[i4Xpek18HFT%i;3NGa7rtIS7
%V:m#PqqXT63Ms:Kr5[%:E[*ATrp`e:Wbu<OWIlYu-g$<;mI4m;5'_J'iD6g9bI/S!p<PW&BLS6S!ig,cQ1JpZP;(`o*5Y<3jMZ`4
%UdN5;q'fjG`F39+(l(59!=p(<mWG;Q_4c2=]E-.1F_*CI%,69ZqtIZ\KXHSkS8ZL1A3?6<QOSNiGlT6(^-\[j0nIP.<9t."e4frO
%m:IK_Zpt\CLVGc7ji5'TUd/7c[QEmHT<,LGC8/$;Rm1-ArE^B#*H[\p:9+N<<iL2p,8X>5euanFlo%kJ-a+'7a_;#NK0J=oA9Y*I
%4$uIiKi)V^WRkEa0_-As1@@5WCJ6BW&8)UhqWd`h?[X'h#Mfn5I2,m#AI!'8<#L^srQ;>cWfanIo:]o3_WJghVDc2m!#%:2_-Yi@
%fVkt\_iNsQ!5*D_(BtDpo['6d!)XiG]9?"/,CtGZWq!=A)\"9iaL+55^31O.3t1'1Y.9oeD%QNc\,e!7aN_U)H7P\dUPfl.mQr%>
%Q-h_QS?eW\7d$R&#2'4E)T03J,*uSdEit``'#Vfm+Q,?nJ2DE<.+9#TMHM3U:\%*&@o0mu]J\qqQqH0mL*OA*pNROJVa6N-`l%eB
%isK>AYoTG-+*_/U[qg)e\UTTEo=1GLqB')%H!h&JiTU<u(_/6rAtZ**D#$O/M*<88-\maLeOlafX#63E;X:[p+<hYursQd9"7L7o
%O/p&F-]*UO]=ED#qSP%nbSYnN*h>/nSc\Vnrik7X#L!q:^$(NTY5^H6s)54C^B`0d-N!g;pA^WKs#8X2DmKE#AH2]/AD`_fo0N`R
%5IU(j\NntG]b`$MF;4QIJMEsq83T-lb.e]6aq[Q6?]5J!AMlQ2/jSK6fEkL5%#TN:@THMHfQAKSpTn4$<nlYP"f(g[3W]K3gOJ_?
%rCVZ/C=N.*As*KQ9-WQmmoG0MURD+/!''uB-_gmamhu$_EeO,^3"sHtZ3mcc8jZ)>*XVA^<9kk9_g\rJREd[f3d!`WllNtV%I:o/
%Z8NT2J1p+fl1LPJKb1m>j@,':2jk$<`,_h\pWp%qI-u9+p;a:i-W-Dq"G)Wq;5;N*>R2961rep&Vm0WXdLVQS3*'D;NMQ6tb&F^Y
%]P>?1'%=lrAWU`1g@=oK9+uk[enKfLcc\@X_?jq"-(s$OMt!ssMFVnBB!-=,)bj#`]rjAWf75St*45R[^D:tX%"Znk+O(a]A]q&9
%r)cKTg'=aJ(MTJ145m,=kqjCB/a^X1QKP>4k`=FjW*L>NL.P9U>)4a'C4TM*29&;drA!+]ONnp%Z!^.AA2DO7PB)N3>0ZA8DiEBl
%4YJ=;2&Q4:SE.P0.jO<[(>(4:Dm_goeJHZeDo+RIcn)*'8+[T7,\i"!R.P!/S?-q#EQ/OMd)2Ol]\(lelU>!bd!kcknBDduC/.L*
%g8WR;\HIfi@+ahXosYZTo'e)q"/BkVB#%eN?U0,-#8XEsl&=GYo;@7*aK*T!=[ae0q;B'H!BSn,0/7/#G/p^'#J+;PT5)'eZC+1i
%6)XG>&q5cde^4ogb:AT=_#8&1`%'u.9L,:k+p6U)j..j;M=,Rrn2i>j>=Zst6^=!`_,\8!BolHG;[cmGA.!s]`rT->rjBA'O2`pa
%F$"]d<g3<S0$NYLZbj"#-cNW%^"-k::C;`@?&O9,rI$tNON7EOqh&(%5n=mW9mX4dZf&P&g%OoPOT_jhT6Ncb+5SH;>&9%u'6$FB
%`tnV;QE9p+,)_;L7D3%b,%']BTp0j!oc*TF<;Hco3PZf%Q9[r2^LG8G!-Yhu9ub9t`sTnJ-3F\97t7o"j+\fR@aLnq&GY-%S]/OR
%UHd(*dl\jaLP]QraICHZFoIcM&(R>7%=7mFECcfCe870$@:7eETLk%hAI0XV-jekd<(AZ&p;F\I9"crq/=Ec\j$$CQOUH\G5fI`X
%\'TD/V_6ruP-eY^lnpsV\Fm;Oc&EiUa!BOoJCkh8G[/p0*CHE8a^p`gTOlpJYg[$-Z\o*DrR!8t`litZ+is.leEE+&q5XP#AB*"u
%HN8UoNs/#E@q(0!A.'K;*>_j"^I7#EkpQ.<^PZA$oFdVemZ.&<mT+#"h'9OtR*@Ib(!*?Sd/s`fo[apH)4r,K\&,EEV7l>%p1aAn
%:*nf[n8,ijm]0seIFW,j^8cZe*BP4MTl0Wg$U9Wpjn(J#J*IFP0"19-N=-W'lHK=k7?I51V6$"dUsC5knae+"F5]>N&@14<HMI;m
%LLYqhkso05J1NK0"AdGFQ!!JkJ*D0V6hsJi6Ad9Y:[da.r3KgHOJtN#.[np-.5_mp]gW5ClWXMHOE[7BTW@V->@*]XZ*"jueQnqr
%gMZqo6>tf"3Mm69"**]7<pf?ne)//Q5BW[HTBL72-eU.i[%l^%<qNjTVKaHploWMd%iWNPk6DH,qo`*\(kKQ26LIq>SaV8rn)W5d
%c[KV!TRH%umq'i6i-;tY0(Y)crCD[++o7*@Mh$o2=tuLi6pi9B1QhDNhTOm4$$guN6aS!`hh)_.b`Fs%nKY<r:_DKFWl-rF'T2eg
%O=sl$(t?il),1!H&E=7kcc9G5:_n\I+eG;?+bV-r\Q92_Cp#gtZ!Vs"<[V!G\3_729.k8AXopG1O(^=l-(kr,jA,cGGo\4c<]O)u
%*[m[O^1T>PQrn\[Ca8^/989VWPD<k,HKE8l;o7Ta;X\1Uqcce2g?6j^LXG1LLP.*[&d_:X0pcS<d863i;/Or,"Dg.'R?aiog)@k_
%Kg)+Dat29P@\At*Q!PKJ[1uADH._QabSCuLikZTO,XMuf$YhC)!em='(c3"n`u"eO%'fqH=kl$Zpi]Ep]+=3$bFVY!/&6QhC64Oc
%]W<a*Q8ut3![@S`CXT?Y.d`7oe2Vs)YjuGX9n^gG4bonUp.)!*HfqNj//D]@<]]"(e_<`TjW;5[[qTi1H,)*sU=eqA*F^[&(gs8p
%s.`([+*kr3(qOLop[k?g[(p.F,@Y0k_]&6\TULB&LL86d?#\`FP1m]b)D<PD4MXu[n+ZZ2@X5%u):e`TMt0.]R\D)pA9.Ll6,8V.
%s.Io&ci8bn=]7?df4h>RB@(*J#hFbklriiuCiBj(X+`0iAn^loOh1P(qO"HF+R*RJ(KLOu;<hmonU)KG&:t6d_<B1cUpNO[CFqf[
%nKT[>nk?OSNS:UDXc*XQ59#X]?4?=fH'j0XB+/gEN`F_aa5)+&,!@liU'\2RkBf&lrDp:Xb>5;pF?Y.<ig5ClOiJQ"/C^.<^+;=m
%1Ms0nqqfUBP[.,pF<#nFeBi_]Dg9!f'3&<37W\X*mor"t.'qtr%a2@!L^YA-0kS<qP:ElBh]#oI*>a@;n4Om^M2'q_d;4p\bg@N)
%1'AB:J+/_Zi)9Cq&c%QJ0pC_@iUGT/?o#$Q!W<L1gX4?\ck_S6r\!N$=f,t)e))H#opeqb+tk\*9.EW\(Y*?eKtQ:hbHtDhaXC`l
%Gtg192*?qV=2X!9DP@qC1N26-_aDi,]fa^:XNLD/+B*$H7gn>576!EBj2)b`a`TXeR3([2lhpQ3mIF]6Z8R^NK>7E^.iaS_S)Nl1
%AgAAQ3fUq^RU!p>roO-3A\pc[Ga7INc.W^nQ4<NKUB>GcYM^k(*G<f[@g^UQ$TlGogR%@G]\2'c+*6nYr$d*M,9J_9[WdBH059V?
%@kEBVCZM7a?&8Z.ZPC<upC48"fn=RS"8l8UAWA^5`X[CK`a4enj7TS`&`2n[i:(![4Y#p[7fo],-Ee(-Ga%(-<@cf@IcJHfr0YR=
%++A.eRgM:BE^j_BLZB]!7L.Q[\a+FCZH\_g^Q_6"d)oA3>f>>T-Upub*,UV%h*fX=Iui0_>\71?H>gLXWb\R]Zak@eDOsS@=$ec2
%:D'HO*/GQ]E(_nVijiI"4f,[_>Q4K&^GZ:3_mH/.[Qg!sio*bUKbKm1<qe;nGQPeQKeOEJGgj$&\Gc(k)a.9SL-V;C"DJm+,E4Z&
%g.qb"c*LJbs(\mcOVG+bndVb_Y?cZY+uG^gdZGk??R5I-berJKEEtf_aQ.N>&qO^Hq=4D%2\3Y5EZ=uSmGlEsnt,YLeT]I!&+,<G
%U>0H9;;Q8(%ghM??f+>^s"UePXo,#iSCMM`m=UU%4Ek,ie)*YQ24c=#(Q,^\WVuMAmap]+3.<h.W]$,gV^\CJPO<#:+*IKE't*pd
%R"T;;8Bj:UX\:cunbKS>er37:pPHYQK'.M75<?@!<OnZWEV9r\!^Ap0R=p%^AEN4R9pdQ^8U&*H7p`C!lL(T")T,aMO+6CIW$me/
%;cpZY2bK9Q/"Xihc!uAJ-K=:VB%>6@ab\VD4H!h6r;:N&Yr5,P,/X7Z3#^fjiTP0])iiED5/Uh#:'0ApB#ET&dkO0-Yo+>3IYi_f
%(\chGm?G=ZKUm-"]%G`Kon&g1elH/<r_i.sSToGpqp=h1!eibL&WU\?Ur(M"o-1go`2hj>'sr5Gi)3#rfM$;*iN8m#;`L'nou#Ns
%Hc^7).Zt,,gqMX"'@458E3bpgKm,c8#@Xc>]F+6T[1O1Lj0c*N\P^67`r9[SfnmFt<W6hPf$`_j=LY)iE9\eJ)W%NWT4A9NCtu#K
%_o'sHnBpX>7l]>bj5E[HgC._eU2T#G`c*MG'u/5VPP)b53.ErEL<gJG,@%1K^P+>$ij!HB6ck+eW^]'Tb+D>c)t*\PHoq._K^\e"
%\a\Y65ms$)^;!O_Y?.:Xn9\<p$!2&K9B#aG?nL08*u;_qIUsMug>G`Ch:0>d\:9o/%Y**u^;JtOi?T&]=!j'n+EJUWa@%s2>HRdl
%83D7;71uBgpBYtLfo([aGo)d'aIfH\Lj$&6("l7QSg0#[Q2O7"q!]<G[]W78lh*r/jBqJK8E'C*13-M^QQk%PX'Xk!Hs;UnE%o\G
%d>:9J9&[6M[0oVdp[UYHI01.)UP"oSTW$slRITF!&ri-1CXEUUW"k<"X*;rZ8NDXuie&#32oKr?lW-L&rV+!;1k#>u(c<sA0;Bm@
%cAED*^(-mVk:7ubr]E_>+/6$bk_hW\6n?7!0\Z:MFebSGfdA<am9O@/dF!^=Ynjl4C9DFAA3\Z)YK*b&DXZq59b-'&fC\78n$U'>
%6$OtsnsaDBU6/P>O5J&pf/oa[[C]u7GjTeN[^]@07A&/"k@^p)YP6FTD(n.KY(u`u#I)GK`r/>74[.PH?KWsk]ldn&`7O`:2@e=p
%>dLedgq%7&T:[.Bek9a5^&AQ\hlje<^:r4bT5A0<oBj6$5%rNY)rZ*3g=Z>'?Yq&I\q:G`NU1MXMYtpm\nu9"1)n9VmFfMTrE!p4
%]WlO^nT]1]h5G:0C#bs35Ag&:]B$sW&\HfQ(u6Jr'91iF:$M?t\[cplpUlnSlV!`Cb>Nbppj@=nH.UmkCq`YJkF53-+hlV]jPMl9
%?g/fBL7<r'iN6Wh^Y_q2-+.mbWK"B-f&$AV3S;ETEj)jTp&&'oD:MDeKrn+);ms]6ZUemge#:6/ZghKu/JJ\)8$A[um.f<T`JVd@
%HL1VfHP_%tLX0Gs__NhXqsJ.gp:C&?hbJ&O7CSNuo6^Au7/GV$&_@rU<u_+\p-ZUb\m=]&T!uJg02L?_rnC@6(Ai?5$X3Q^^3:3h
%`m&_1)8FfY47TrSqdI,M)6LqDca@;2*4a)DC[>lN75I#WQ+tu):\:9&E[.WuF'0GNG91(Ji_JlHbjBMQ?[%>tYPaYVX<5FqC+<X;
%N/R/:`*'"k:Ya+=@cI@^mQC$)]P]#B+-0Y^Sp<@m.N?o51>Nl,1<HlWXh3Y2@=Kk33P.:CG#!CTh8lS*^RMaIY3p&tW4\UjS@n8r
%VT.W`j3?iS/r6:8qd"TOEa)bf4t#2T^UPN!@WA=+@[+M'0^lO:Ppg]:=I<IAD\[`[c%.KV]DOrDf&H99m[V&VWrcYiZ[KQ3;S3aq
%^Y=Jc*,NWK_g\a5S7Q%LK_t/tYu#A'<8kG#h%X@2W@'/nls7iXml+]Qc('YEqH@)#/:;,/jR*ZLa!0o2ZZ55;?epf=+6!msIX>o_
%2'1=<dR[U^amlS%Z)li^&c"DU?'fJQ04T#Sn\N?)456d@]q%/]2#dGAYqip;V0lQp;lZCjNq0;:CoH+7P+q6H3k:$bna"lAH@%&f
%WV'\L>928AfplF+C&98*"77Y/OgN0H]aLrjQN#C/QYA`%)J;K%ZZ/(RYB$anrOoH?R]l,IUpf"g=/hE!$%r%73_hgp>(]edI"4Fl
%\@6Y4l0h3s@r'CI2b/4+o;/Zm^H:9,)csP]I;UPbn#*LamJULpQJ\lZca!H;k2Z>)iohP4E4B27*F)QI[=bsC[BkM%W@T+Y*1mZN
%&'X=^iPjJnrp]=F*(Ae)clR!C,nen7UVi#KbL,FE:cta[46Fq0:smb(QcH^P6PVQ/V60E0]&*B((ua)5012g'[>eGiiPW2&\8*"T
%S!@#dF8tP^UL-a,RBloQbe.PJURAs&(5HJ,abt!jCC#X3ChZ!qbr2WC\)uECUi*3!(F/PD179t+mTP?*GX!kCFuKoc\W!s;bM>:9
%NEghBqd=9tI?(DBh3Mqa1qmk/lK*84*)=H_NobrfHCU%%i%i>+la??Ems&Yn_Wb^d'=0[r3k91j%Ss[jSWE\Dq<TeR`+#A7S#9FJ
%s/@(N:Lb'siq0GeNLuNZXd@MfD<(,%lgeb3G4>9QHNnc(%`Yh</o57>LVglsJ3RID-uBmWL">Y?kBW!shjtpu1YMBj9j9UWbj:$:
%ip'&"_GG8K(O'olihF'bCgJI7Xh@C!PnPdB,*SS@n(cN,;.rt(`Ve-TV"cis*FFM-RZf8Hl:8!0orW@=k,K;#@b4hr7IL"Cr)Bk<
%[G@VDm`!FbBt(?e;``dKY*NBI@tSe]nf0;ujeMcp0su.,rYRSp2qtapkY:4(/9UPd8mgB_bBmU*o'6=+HepeG^MRlL54;sKOp&t`
%)'@+m]16^$E]7eUk3eLuQd>QPpt"=#a4GV(+o]3Q5+!u^eVBJ=6$j#Ag<IZ;X)R]5hF[A^]=D&&M/SE_T?bB9f;JI\p$atb:^]L#
%f@uA4cdfkj9DBgD!R&.B?)4JR2clim9>B7Z?_rVmID$%R2IG5(p<?h4jsKhghr<1qg3kLN*g?/YpM>ojH@L>]f.(S3l>u&8I=#%@
%9G^?e8\TFLh7G9TX1.cV@Wf1d]rl&cj',W_<Z:L([Jj=C;HJ$*53l9-DHQAa5/eGg.47'3#EP9B-bFTY'MlGYc-*`r8b9!N(-b2Q
%b^Wl`2VpX37f@:!]^"mlMS%^!<p+6XCeN*Z^%TuNlD`UO-t$HZW>'.DcdHmIq`4Gm++3;lSbgs?BrGC6cU"D6T=`N4%hl\)NSJ^g
%]BT8l\,.XWVnL>,IC#9pjI^e,?1+B#UF+%[dhD8Shl7ac%g;;U3[g<Nh?X"(p_9%if%pr!n%3rn1(9)_`\<s2\K/D$X2h!fH;jin
%%t?TpK`X#6PC,sIT.+8^I+Q5]6`ndN#Q:BN^j0O,s/XOujLX$C9p]%tN'%4qQ#:(?\Tb2\D:Irah&e]iK"AhY[FS#QchaK\mu?p1
%BA=PM)TL9P0`,M/fljLd#PF"PKjQ.kPPrGIoMLn&IPl4=06rVWW;%=;T'Cj8gT#r.l0*0J.DC:UYdmiGh`2E1/eaZFn@74FIItCS
%<d87m1Y]&X7r-8l8PY,>dPo4%kL*5-n@X%<*_pIMPnVHNF^C6**&fW;c&Wl_/\UnIgeR>,$qBL/RBR(BV"Y5T+mX83c?u-e("2tW
%UBKi8@EhIm2a:p*.b#PJ6.N?n;sNE5f_g-=8<8TJaS-#dT_,`/5?+?jbEUTG17t,^4'9L=Ei7I'g"'-9WSUrE4WEL!nok#4hL;Gj
%o_t3MP"q""h71#%5-_PVlV1K9d*$`b]:>85QTGrR]_bYadi)k'l6GbmaSU]pisXc/I0]i;6icj-qtfj:LNa]pQn*nI$12fY-mbTN
%$H.@h5(R;;c`MFD=-KhrZ7Y<XDr4Y52r^6`STda?DldbbZ@-tE)JqcD<;FCTm<Gd:B[NZ%DRZ>MgM?8Wp?QEUdoeoh9FTt-';JCX
%pdPBql+PO]()N4KgR#:pX)3%?#NpHGO9?Z4I0j\HGG_I0Vk[IhS@[BMmmO=MC1h`@^h!HB?n8M2aE5p@Qf@L2=ANT$qpE%2N\4h5
%C$)%Pkb4I4^W-"dlVAt')LWe#*qn.cV*efUMJRQ9mZaanP3Oam'iPaRJDSib*<-X72g6eL)cert35fAB]^SO*+^JInXr>DTj?rjl
%g:,u,hrW-ss6NMKS^&QE#^MNiHS0blR+i4sUQ5M(U:Z'V^&$p2/)d?-1!Fj0OkDM:.s(!+nD]&8D]N(mYD,I!jD`+d,NQkUJttLY
%T/EB[I`BXpmb)fe;V><u.+Offr=eeicmZA<A#$P74#b<6La$6*0+Uns<.E-J^E6/i.T,0t8aG]/4.Fem%Smqj*r9KTPcGI\_Ru.9
%r%P^+8%F:/__Sb]5(8u`mSBtWE7haa;Wi6oKM.ch*\+tAm@AL!YJ3h2duV),oScb6\Mt=YL%0f;Q=Y77%!O2!i9?VEdtnR"C-TC5
%*_21[l$+sVbpdOV8C+eq57D$@f)2?4AD<Iue`9nP=Bc_s=LP&25N]!$rjLJs%X0o%Wd>4$PTgSt$HL0@.8OJl5OiWbb+9p(r23`'
%XT7I_<r26U)4.OpF"?!-eN!Q0>.:g1mK9_i!IQlPFHhD>GB.8"!7uZtNZLjpJQ3u[^2[j.J#tY;XfHkJ<8s@G]Da@oe,=%NDJ+>Z
%LfAL[^*d2[d:=mpl8Q':;-P3@1\"EY@aY+1Mq;8[[F#/K^5enKS];79+&CRi+4"?D7(Bg7fKL@ke[n<8rRBV>+)G)%K')3P@[,49
%+6hO#^1-32X*[r\5L/A^*Jt8G48fQ'g/(]A_"`bXX*oD7YSDtgF=Pd6D`hkP^fDLm)V:Or[^Y-ojTJ99VPIP-[Ze_a6O@](iN_UJ
%_cs^RDHpc]hdt[-6FJhsVQos^Es^HaobIqE#U3Z,HOWe'\N4kuM#__onp);&n83-Fa8Odg\TRt+]Xe1[^L)m@*[i5CC6p$s=*6n`
%N*XTgg"As6g<[kqEg:&(Z/)2RbNJ-_9]qX5,/9^S7GU%&me<RMD08o3Sig9<dg\k@_4e@N?8M*,&_Esb8#i(-QA*uFVb+%S-`-QW
%Hk"8,F-_3(6(I%sjK#JL%%YYqf8h**P`,$nfC<Pcg(K]L.L8Ij\q4'kZi"gO@)0"9%)9-6`MHKmb73;m'4<mTA+Lb0dWn?L+TPEE
%8qk/5H=:Fo1/XG5O=Z3o*Ko)pWY/IN\[kSJ@,_Y:NmOjL0fj9oPQX7@1+lKl7'=Td_V<P:"[Ltool38"4/[(P9:&6\+k*4pqA[(:
%Ag=[F^V=qE*QfD.[EK#9#cqEq"l8ikl(#?eJWl%3L@)l6.tV[^&19Yf*?;ZW,:h[c)-_3p0G0\hD_?(OklSCfAI/A^;nAok$(rkn
%k*J9EDZ]`";0&Io9Z/'O;l6*sk\pSLR=k-A,'\(f9TXC:Kk1hP,3eBqjVpr`bJbendOFsoPTIE9`NUM+j&%2b#\Ao=Z9QbL=$^(H
%gEL&$M0q^1G!qXj3Q6E-]\"pk`:]1a6sp'jBo)oQ8E"q/besH!1#-u++mkYf,?k:!#XMAM.,1HAP&Zcm#NS&f@8e"o/J8s7$<,dq
%dc?kdp,F`42XW?'"?@*78AG8<0f!#Qc4b4JQIMd/,*uRqV\8>ecuKT@q.8#j&'tY<oiu$em6QDRKO/3G.BOd9R2(OKWQK(`$/XcB
%,^pVtiH:o.>W4mm+9XkI9R/IiI!aFs=no2\p#@um#^K)5"Ak;_omQ.C>i&6EEQ)lZGC+hV>]!rp%='YtnAHs.M4M++8RlFm"[PK1
%P=tI-jB#t3AJ7D[fMbW?#Km[_e@inSAVa]/V^-3NUD,'^NRg>Ue6HI\.@Fg=hi`2ObZhupmZh[KdQ$./`=':^ri7'pUJ:(?"-s*r
%a4u?1Y)n,_IiFa-9[O.J]0=q6er7G>+'26'V!ccNY";+PI!TY$%_(>JjtPk[Qb7<]GP,XeG-h0j4M#>;m1?[uA0A1&:-+e<1+:Vf
%aMs(p=3Yi+2H@G9Bq1U9X&3T??$l]&c$a5=DBK:KVlAa:"Ali1D5H<Q#qAB(eckK$9?[7GHcri^Q/0,cGPqUfnSK=\Eqk[[WF"3R
%#[kLYjQr8Ge9RIQmI0+%\1=sr.eN2j6%h1tV*Z^D;RW,W`hE3jL`OkXY/J5%LaOi7Z`X!iG.2mEOL"ZcFMaj#-'^-/q>pgk>&O?-
%UKm>BYQ.]=UKI.::r0UEe,p"OJ["K(P6GeC;MfTtTm5"rFgDg4Wo@Hdrma!O!_W-qp&9-5S&Z%S1\2@)i>q5EiE/.5T(a]SHOe2u
%fW+CAB(I?EX>Y<UHB,!Lafa#1lI:F!mVdK8&ZD;-.]-CQ0AB>Sf:0D\lZuVW,-\hg[ell"[DHY?WgF!,*kE/2?"3B/DHpJ3DCmYF
%B,=g@mr.--Onpr7(:h:bFl;EUe)_5$nLL&F4blu+_rJ3b-=8Dti*l1-o5u+04J^VOPrFCcU=[VUE"F?4Qp<_Z$nbQKFuXS$(J+/<
%q3@D@/8_:^e#P-,RVD76GniQTXaIGib%c7kllcEJD_(1p$b`H83j*r6D[qLgqBi;UHoTcI#RqK\-G=BJ)GLL8odd8MYREMHc?ac#
%HQ2J)o\Ri)dSo0>jA'6h3@TCqjdXBp3eI<8Wl%ucBb;IK8N=/)](i"DXF>5^?07],NZ*8B_M!=p9bq$<\3u;[`RllF;PW<Q0ekS;
%Rd:%Z2>Q:SMA84"Q75$*n\^-KmF`p)'IU-9C"F^po+jHWS12+Y(eILNB(EO)+K'9#T2eo9<\J5)2aIQ[KC=9DgqDT<1QlY8m@&3&
%NRrBMlGs2!fK?C_l.poLc<nY70+VW$/92nF/goX'd/&'QMf1+?:]8\+5*RC*/c)SX\N=s.h;2q=<'Sg1HY_Fn)g)Iokb)"6$fBie
%:eo*m*bTBbj0itcH!CFm544hu_.A0#(eV/#oELcgo;m<\EC!E>4,#FL^SA3l)qTEkRq8pogZb>+$or/ej_Db0Cat=JMlRrc?XR14
%LcX8'\2DE_1b,7qDY>mhrr,rER*[3MnTspUeUH&;_"bNYDob;:e%mXB9jnuMQKK4QD6L?/]rH&Hh$#]dKTTs*8%"(u%9YSD[-HQo
%ae.AVfPSE<Xh=@uYdXCSD!D(//`[(Z!ls1B`#"8(Vopq(D_AaFQ,D,56[E[Do<ZNk>tI7\]BX;fmZOU%X5?i]W89W`9MU)m['C/&
%b:&hp51@oR)COm!\'q>"X,\bt[]u6_-*l3E:qM2YjY>)@lZ2iK8jMSqd8@?#E'?mlXS%HkUtd&)0=&&W:?6)H`I>GmAEI[Z`Jemd
%N+][#)@_<HiNB8ae"_MDnna<Qkh%>.+!a/-cBQ#K25=l76sh2s2+V=&:24^nbgpV&;=L1N@r(CK.-199lL*]J^Y(pSe&iVF-0m.o
%JXJ>;)1TrFIZA3>O?-&0j)M5jg"o>la2KF$>i#b`jQ.fYbZh;eCpn-oW:=i2\ZJ*B&X8KXPr2kjHq`_l/T[g@4&o&`YPr+ob(cp'
%J*>=-V@.'L\=bH"</4fD)Ch+I`=fkTZ4jYeLlb(HIAQZK#BuS2O4sr-UQPB+*1pi=LWI`^_6^KdKWC)l%p_9ro1cTWI*QiJne[CW
%jSE0d<763eO/M(&.B'KgL%O>$G:,rO>5/0T>3qqB2U3B=\qe?3B,>]shUQgtY\es=^\mqIXYD]TrV)WE;-@N^L>(MZ7K8S(2#Xdk
%<k$iLHJs:^D],*PKN*)ljG*"sVCo0dcfWp6r[nZ<KWA"fb43_..qMsU(ea>+^_)fTPlo2hbUDcZRI!CC3pSTQW)JWUJR5M,YU7W$
%HmCeM7f,92ie*NY`c&Zf?I]C$n*lG%hV\ZF!"BRu5oG_?2mOU;ch:Cu-D5*VI:X@<l1G%/\S#d@]8#0g^5,s)n[rD7%j\A8GE%Zj
%R!Fp$V6iT7.aW(s7CFNP[1pk(n2O#.-^(`bA['@t1"O"0ThA.Ne[4P,+`1e.Ea,=($Q9`9[u3oLi^Q"jKFa`oM2++7PR89Oeh!"F
%AdlZ@BcRlQ1S`j=ga9"c,LCnASPn,Eb3kIBB,ffdChOs+"LCueI`B<9rV/e`\bV\=qMu$8$]%&oNJ&_Rk,XY/2j9T1I?3k=.Q`&o
%41:nLBI']IVNL;./_%Ig?G!VS'p[5eIo>J\<u_OthG,==eXuNpK6l##3]kp+CaS_!oc1pY*>7..#>LXc$;0A(duA%5ScC6g19ad+
%of$EL4)r$0mTj*6NRHlWR#OAlTpbAX8)V<@GZkiTlmUH^q78aS._&1>?Y@^NKkN0d=eMJQrS:Y[g-8/&olKcFm98AVHc]:Eo8u^*
%^(K;0SUfebiZ?b.p)H_mR`a/E>\41GF>1rui8r)S2ala&$]cV4*,aV;)j<Q4,>BqTN'K_t8_lt)mZn(>1n!Z?5!Os>1LIo6"3]ik
%es;"O]Qq()AooM.&i&Lf)u20l3\[]g"9l8XKKG.D;>PHpX6mA7>3Ke)bBo6?l"&$"T8rYu1]tU\=ug`q>+JdaY<j$O9luC&4F3jg
%TTO5L_(nF=.5BDaY:"9*pKM6N@h;Y[BB'*[XcqQ5/CT((q#HG6[ailC]S%5/nS-j9Z(;4eJlFJ#c-<uJhjn38@;*]V0qO>S=>+$l
%:QJuZ&bGA]jkFV<^IETEH^DN\2[<_^Sp-H!ol=QmYr$uWf-(/V3O.G\0*s/BfdQal(u5a_,n3<4f',RqK*?IZNute#F08\)m`Z2e
%U[;5?f7H_N*009X<m,)JNc9[<XCb[4qqm]:9Fk%aUIj?M8lV$n?GAC6fufYlh;595qdQ^jHYhhc-j$KG8U?XepIc:5Ws\_r_:(+r
%@Y[SG;(]PTlrrPi+M4aW&;G!J9WMfrK1@N611,D*#s2bhbsuN>+(4P0PB,JBT&Q76.[#p(eo%X^1-[mue%T"Gg17Y6G@OnP$h)6s
%GO3M<%8sMu8nU'V$b;gp9GiKl?$BqJcjLiaEuRSdT:4=-`\j^NiQ:W-gYeV>9Lk*)OPW/V6G/7_>W`"ET!4s3nET'?@\P)$fOs(Z
%Dn^_/2+FS!=)Nog>u94D*G_5'K'`@!HH/,W2n@Ve"8&2-m<@#%:;U0fW2Y'+:TTPrO.P%k^Vi^;.Br;Y>Q0S9-0=^f,WU*,c5pJa
%:B^0K_e-&0M7dSi-Xp3pG>@n6\"29<DaA$1EiqXea1\glB0TSN->r(3AHM$3.*"gWHaJ]d=>%jbp-[?I0?4d&:+Ng:0)iRqq[*Db
%F)1Alh)[iOj5`pr6/AXhc-po:p+G/=YN9NLSN:@?7s8)qZ@Ue\_^KE[=!2uidsJ9TM,DQuDigC<+Ud0Rhqp3c7`06IU_ASh`a3u[
%jX-brnn$[*q03L1;CB0$AcoYBXFh_*pAn]0LmfPqfQ'bo-,UZ_T&l@8SlW%$=joV'L&g\a<i4?enC`![BepR_Y'lep>,"Ml^)YF9
%o8kVI,EN>h<0+<>]$?65'9qA&J"FQAHN?>gjgdtWeGYlgnIEoj'>.\D]1A.SA^ak4oCa3Aq+uYR8Rb4'65$`R)la^S^OFq[G5;k7
%o2t4=_hZ6N*-ABFS%KV2Kq-F&$187Kh`*jNO'o]\*Pok"am]9)p"REqg\D18.d+p5aqLML-?W;o$(@+."Fq9+.O":r;WJ!9,j8-(
%iFO0sOQE8f/%XKPF&Gp!"O.qn:6l])2G(gNKVSfX6G+cn3Di[@JuBr;78_kV?5Jd)b,JpEe&_.-#RkcX6k1/H[ilo98HBV#%SQ$4
%-HWK`,UGHF!sXQD!%Pd1]Ta+0;1p9Q9?Md#('a>=P*9HfPc=^qS/C6S8A>9jPRoeqYX_e0$'nVs8OOP01/q>=1']3S"@5g51>iG*
%WN(\oBke:M"Bab2a3u?nRL#Vf!u!dRlQVD7112O<3/Ic*OCHSVg$]bR@'l"01`-4k-7#5m`rc\T*eL-/TnFZlba\rU^_TM',]Al>
%-F]*Ldqs(1mV25G`bhO\;uo]#M(6&@SeWIeR]3#^Cp?')=RAj2`5b2LP#k)6852nF\urk^9gGtf2$]a0+*`QfNWV:/4d)"d!WXWn
%[l[FlB&bb"=#>S5"mBJ`.hT97b+\\b)(_^)!2f#gJ1gshF%7IE!!t6VC8r2peGbH(1I#-5'3.jW&7M@XY1uEfc")V[IhV4&M]24(
%JA)YoWO@,q8WYB#4_+kS]N15r+A6kc8;s\rM\L@Xd7ukSaFL(Zb"5/+WC.&ZGnKh+K#,>NVZgX7ehsI>:*Yil<^feCciI:t'Xo5/
%kt+GM*Uo(^BJ>IuW-Z=]$:GQWUkV*BKlcfG9E?UN5fgT)'U2O[S0W]"nN]Pd1Pd>*TdhGtC+'@IX@&0qi$:F"W/stH?6^?q\-%to
%TnFt;#S]bH?bR`<Y&H-7T;2gq^dYZ,^e#Hp:ej]!RQu*)PGi#(!#_Ya(4\s,jH.P"(p&@A&qCW.(dq4taHU'r"eoSt:'Q+Hr=jdN
%ZK?#p&B\j$oQ4:WRX:Jc]^ZCV4@D8AK;,l7%ZhqQg\UTth65^^b\[?r!D*SSP#HZ().ZQDcjAVG-tQ9]*hYFoX"OR7:iCV#iP2Q-
%#B]?cKumcT,6^hPa"&&<k;qH+jtqF_B]:QuSHX8583l^JV_+U8XQ]dlN\uCgkWB+NBiNG\Lf99WQtEQq?kbjn"]Q+2)\qI0PJOm>
%+?ZrA9+Mjo&KD>oG$+r.6#-NC!j!_^$UCQ3W:s[I5\"qQik[qG-mZG*p5c+t!aO=\i^!\Vf)i"S^f%a=I/lMB5(u@K;#Y\WOeHXn
%?(*+7Qu_DW"<oka'+&*p5ERtANeofpGhPu7LjDV'kj9jOD&3q/,jp>Y@%\6*'(<scAO7$R,Q`WsMtBY5!pCHW1cD%[e1/ts!*p9M
%.u,3GC,ML.*\P"*]SsuVfWAroIk+`\f0O*siqjQ\JcM["fG"R6!SjBK9,)JF7]-dj83h(Ya@T5qBpXXua;>F5^ctbt$,CaZ<U?DA
%L,]6,Z^-hd<C<438I:BS!)X#@(Rm[(21Yj#!&tR)9ZB,qTYO6[!G-5R6?!k_%;caCK-IjaTEbL=j1k[M"o&/H#He+2"+TB@"kRi2
%*Ap4>&M#Mc*:X\-n\C7fl'[>7!fFPV9!Z7+a@]D:R)GbR<\V=/["8Dq3.[he5]'o;63f7dj#%<8$,iD!+e!4E6Zll'MGYI?%,8bR
%MX<6D!mC_R(<""F17Bg*!Z?jI2crbD[Vn5'DmXGg!]#H&D2FtFd2bg&VEb9_q&@0"X1F*j+]Chg"lKtG&jIdS`2&01"eagc)B9)6
%;,Ib4GSP?u5Z<W=*MRFS+V#$7%TS\jg24;rmDauo?WRh]>1#q2lHCY+BMo#a[r;Dc'lYmjmK!kU%c_3T`Ic`R*kaR$QDui&732mQ
%6m[^a>TF(X"H9!Q+:b+uo$f3UgnPNIaD$eoAJSCKh^ed(U8!O*=WfLo[G":DOp5#%+DlA=1dLsJluq=LAUG5/HY0%nl_k*-d5)sP
%(r:2[f,:t!M!T[)2RQq)#k^LOAIJjkNWN.$&gOG"80!?ui67@I%]]pZj#R<Q[QTa,3(,n6.fu:[\V.eUVGU(=O@CER&2;0Ld<9L$
%P&4!b<fcX`9RtcLTJh-R[4s_0"a:P$VhfN7!<cpRirC16,c4QE(G-*p"\,(Ak"L`IoPp\_Tqe@p%^@%nnaaWKDUu<o]1!0f(=@"?
%SLA(gOCH;>H@mi.IeAHJ=^+2*+]&?Gj'Nc'"]/*ml4(+Nl`.]sJZ1VfLET'>OH)`M*/BOXeP+$]&kJlm(gFirYW`COTcut:,[uuP
%*Fr-bT=.]Q-3]/m&dfZ>G]\0U-:PI4>9Q<XapOdFp7Fjs=-0`i%>5J@*spRoe5V5h(>dLNA-@MjhE)[\*SO?W]uu"j5W4GUeTBc&
%$kZ/p$DrFZW#QEV&j7nRcjGf%=?T+fU?nU$H72:*)A6oC-*Z9-Gf]<X'dP2),f_Br)>pUQ.80e.5"U!:",*((j@Z]_EaFL](1c)n
%a))MF(ft8]-S\5$rBruam>t!A>XX=R#iq1<$"FTQ%%W*.eI(B/J5/j/)PUYj+C?M1)iTkqBfNW*68jKhWTa\o!:cq:F@&]VL^cU=
%4m.rATTKfFn^Q'5>$]U-V&l1kk-Wg:Tad_J8JMta&We7=SWa-]#d22%fd28PJSW>U#;&hj6(>_fB<pm#O<a=TOA%)C>!&bEjb]a@
%%e#bt3rF,"eWBs+Q15.#+tJ<1'3Z98!M*=1J4Z9:19_``KuFK5PLgP$#\`7?)S\PaWp6NshF>Ee#_3dAH8q08-5+Ek6+R(DNCI-j
%kG,`/lAAl3"2cUOC^"XR7S7+s9tAY!8J%IZ?6orY8Fm:MVdU^26UM%<JP.a)42@hIou-J&9Y&<&MVk;`D:GLLJ>cqjb3^ZF==@W*
%j\@3JU`=s)ZZ6*k5*.^d]J'm?]SC\T:r>R%9E_kS:(_m[K>n68^1o9/LoO*#l+eE,>,>[<cU^0`Q+2MAQkU$KblfYRRM:)QIk+ZW
%kB2a*M)DV*!O%n*Z)Hg%N:D_"$$Ml!+bsL2b+YMNBHZe4r'_.("ABE3i^O@a"?$<""g%OYN0(]&%V,D>DBDqIHbppBGiH;cq6hl,
%3"W/*c$RN&bW.r9H(rr!Q]SCQe\g_Shagl7Uum>_j?f\7\L_5rP>%^G^14uL7#NXI/;k?c@,:rN#_goJop?a*^EB6.KA5$lBS-j!
%La9Kg5k57q.P;hdh[fnZ5'Xn(l-r>ZBS"9j_/qZ(MjWJmRZBWfQA^i:2AIsg5_J,/Rd#fu+-(Y-Hui96@BQB)?6O8%g(>)jkoGV$
%CkEsU4q$M8`<@"c68+1!0NFtc%/?dG[:#(XnC3'+i]Kpu*<Tn4@FYGg@gKp_>squ=.](:Ob-l(.=;qu<TEUD=`U/P3>)0c?REfYX
%CY!<G:)_MYJ3h#6R+`r4VNm7TEn%H%Ft<tc6)&(?:f'@^DiogB$qV9WJMiT]%ZH)a'hp"E:EYH]n0$#R;X6/c,W*?4CD5bhNV7>`
%TTBd";.5C(=>n`A(D%%l5W//KMkZk1W9WB]..6"Wc'=a@B13s5YRG5%iNo7fL,6e]<P];T;A4>Wa&5]e&J[]e5#5b!iEcUS!"s/r
%!7?m1R';AlKlgJBg*j!V%T'g_#qW6#=A*\sF.7QiArZ![+<MbL*[$])b+moRN^<e7&d2Y-8&rc)D"AQa#%7NFUP6YE)nDbq\Hnl8
%;AG?eb?0?tA7@/jNE+"EZ:.0_$n'.Xc(d/G8lC7,pOdT88L%,b3KqBD+)COA"N2R;/gtcZfm%<Y=[1K.S7PZ77U/cO'FIDX?&0Y)
%ikU&TLd@%I.`<jiaK$S@'7;XRU:[/[Xq.;(_e=h`1ZI=bR"TfH?q>NBe;/V]FE`MXN<rUKquVU!(+N]7nmK`@Tb)!4kU=aa7ZC!&
%<WVOuLQ^l>,@>U5Tf?-^N[K/=FHm!RhEbPu\P59`@Z<J_:a)u>LY*B#,EP,V@\f12%`;4eG*'n!P1h5k$l@uZR-eWj!0F._'QK$9
%6XEp8NApqV!D<E*F=`^)+@QjhOOL.6+]Shj(QuR4="11`R<['fE!-dc&E;\hW8$U&-0-\E6\691G\dLLMcf@hf>1pH7S<;*0H_mG
%%qGYN6?h,%9ENI<:bEXZ+F18GTnA+k]R]:,'gkGaLX?UNB>hV2@%p1;9NG\qQn[=jOJX93*/L=&$%o^1`=>$f)HED_fkh$P!Z3!Z
%;`1jb$j*5VU\.6HdmbWW9O^KSFp(Q+-AL3c4dk'a(GEB4oa;-oCasg`8D:\OdmV(g!h.U#!7*!\_9bP+Su6`R@LYpdL^!U"7$H!e
%;kd\0#VD%&BWNdOlErAO0u.?qVGY"+U==OhB"-/!;9,4]e_:fPB:d#nR*FePq$>"Z;/S4E-o[V*73"_<CCm!_'KI*tVp3&oR;3"*
%QZs]P)i5pbrR$2[\gU>f:R3Er<"s194,hj3:Vf[ceqTYcTLtTnK!cmDN1ambcM;31:)g#M7fT4Lm>=1>h+;5M\P59AYsp:9bNS?K
%kl_G!;Ug-%Z^XMaM#unJ3B0!>c!]h`%`FKmNqdZ@SZ(es*<<&Q0Bm"B\#XH*NW9RB7lf.d+=@ONpHh/7W0)e(lmmHFD3T!%"Bo>G
%hWYBe#YQ8>1S*:[VjlKJ:(4VS6geKP-#dOC4Chqr82_DLVp.MX9f7R"9/Vu(@[r+Z9#<QUT-g!ZnRTr\L^/*gOps/O]FfgXCj'#L
%"[8ZR6S&83*ha0607og2UkRr@.]TE7Fq_^[J2>a2RG9,Badbh,!V:2AJbEUU2"@)39C3KG%G?9:-3nX*U)=(s'U*)XBH0hAC`q!M
%,^D#e1sFe_c+ma\i1bTU@r2NG9!PfXioU68Np2m"c51c)`nDisd&h'>B(2W6[U>?>k&[#>P[f\TqGnjmpGgX\p)J<Ifge*8$#@44
%J52SdK/;*fVCqBQ=rc]N+=!kK6iI0+mjF\T;TB0M12\*EiaI[1;cFk/=Be,>d,3b!(R=%EDDCPddEQP>p$=S/4j5%)J2gh'$oeq`
%FN#SK>("7uNOVb4P+?W+2U&(D>.f$7a-ptK"/43/@,]<fK<%X/!@&R0T?O9&?Nl:&3tUs+\btMenB`+#+-21br7NlA_ej@XBTGP2
%*qj2-(^=>Jjg5Wj.4@Fa:T#_7o+4'kdEd9a@109ci%!g5,02n&`:B)9DBd*J#0^e'J9N?06.&%WY]>D3*8,_u"WhG2;a_jcFZ<(#
%5\18L0K54V+3dn$DE:B&8r*\ud]H?%Zo*!Kb-<is1(:4>C-,]i"hG=%3YOPK5/OQo*`!:XV0AdMn<BH[HP^joE%HXgBk0aoF%mnE
%V&Z[:b"2rSiH`dgGqS>`X[XO*Aoo]f=AqQ+GTA_ZnBdt':U"QEi"(<?)m+L$2"pZcKb+6FM?qLL:4nUBX:ZshP!BLZZH;Ug$!8if
%#gA`.Sn#\$1bo3(\YbLZPrDQk#_5a2<s<`(C(d+G,#lH&R$*HHo;t3Vd?Xq'1_>Y_g5[f5F'^o*qSQ[k`p-!M7S[tb>t**]E:AHl
%5,ZLu2nK[>I%FF,RM;/"$PC&>GH@mFAf%(]a_e@=E+YQUd30F3j/*4;ikR,`kfkQt-UKZ?Nn[g5iRS48(P1<Ba5JNbYpS8YPGs>U
%/K7!O7rojNn;"`ZNREf^Eo*B!PQSr`d5.EDj<GUZ`'#6&-e3!Z2Vd(%a=a2[2:b1%C'pT^aA?iQRRYan3,D($adb\n%CB,7V?oa:
%?6l%m)t-<Wo[_mYB%Ln:XVO2FLU/]2=6N3a*KM"`l,MFjaU3YM:A&cF61Q9)cfh\1S/*4&=<m)i8_;eOE;p-0i!Xs9'<PeA!1cT6
%Jhu"8RNB<PF>$@QnTZ$DC?Q!hO)R,gT]s.k-WQc4&WS`21GVp<i1`cjH_,nT5/PuIXOP9`=FkQTMB\AiLh+hJ:6V;fFsB#39t'ee
%fs%P0Ld&,t/N!6r^p,d%^,+.nMB8L#0aW[@I\0#K3\E?[1JAIDA>$*TQ-)Ek`I0Qram:A0-W>i,JAOn==:h'cLHNKsqQ`$%FZi;k
%9R44,GW8A>]D0[)XN<siejugqAD?"0%P,JLV"m>aejO:k'LJ^[+lUX&NMoK0pdjZoU51l7(bTQJ2N:U0TfVO<:;^T183(YCW[dm$
%He*k81V18S_#ZIPa^l=S(H0i6$&=:VM:Zg[MEI3S'ZDjMC[of32=b//+[dMCBmVb>HjY[qQYps[FXRqhVid\2bVbBW9/g"O+g1nA
%/!2ru@$3?82u!4iO55q;,465I5&\T4&0?-;#+`@q_Hbm/dNsCYbM$(?<7Y&f1H@!4A$OiG+`$Y2N\t:^>L;R7=aN1\l9Wk`Q$'!]
%k-u*lVi`.]bVbBYLNEURJe8SO4BX7o]KV[&jCf1"*03;,:H?#n2*eF-b0Z?d3r"%spI2csWTH;*lZC'^?UZ)mc.HQ%PFlT5,;7uP
%Q"hB\,-t]L:S>*HQYQP-EGsGYDj"B&h%._RfJ`m/U7*Ie1G:o90c1&%_8bZ`%/Yup6iSGgP&:-aS\Go%q./mHh.O;g*(pQ[YHAn2
%)3lk;nZp"T$f#E;)dD@[U;"qC<a%+E\&)B\H=C/3Q1gr[k<L=sMqN-9%]q>H&]s]Sa6]n+_)J/;UN]""=],';E>0$(a!#7dVq*aC
%,+4c`3=mMG?X?WPs&Rj*4tRnQ_/4.NIuF.aa'3>QRT!b2kWC>)AfNksasVWIqcQmB%P9h.lQ)G6e(j<F&7c#9:?>5_=FZ4I/BG1F
%f4d<18D'qc,m,]4)gYE:!q3)UQA-o.^:hgqh%5(JL:=uVK-O"b4NgrI;bqSJKj(=g>&iUclg9Vbg`H*`PC@f')asIsBtI'.h==6C
%[ka7:D[Y"S8\)Q[`9n/qH^)is$X:]YedT1.='HBQ]Tf#E<u[=NHu'a,_nQ:0?`&&r/Z7`')s3"sFh)h5;&WJlc8B@XqX_8[&4+RB
%bqe13=]nE4XjlM=eq-S.oD,N<aSis-18e&1Ui#<eCCA(*Bgmr$8]-g[.-s%F[NMQoLUY)WK.ZET/C1^N/!mUGe!d9=^M*#fJVi)%
%M7`0.&$iH1^o9SPVFE4]<3#lFL#@dL:.<PV(Ron*cC)$lpVdcQTdQro0[,65Z.Nu'\F?(3-O\ldf?!Z`f&1I<?`1E!Ft*2<_\^>q
%=pqJ0FhkmXJ)e)(ecp'k-_2,1:"Gq_FgV?=L(@Nkj2q,)+k'R@=l]Ef,e6dOHX#3YSsAF\k2(IuOe91[iODNt4DAXu;O\3crgZ^@
%(A0f/6YEOU8un>$$8/->icFGPfmP-:c,4%]Y3I)6p6`V&*bl45oG+Rq4@@!`T2TY91;0Y^/0,gkKmFd!ITtN\T(KHV<TPOWi@\hh
%mufgt[b_cF^%q/XchS8m@:(C.kcQ>%JSJEdLRbTQImnSD&!?:%af";:\$3o#k1PZU#`E7Up%dp>-[U&'k)c7e+GJj.]ZDVE4/?`W
%8TtON;e&7]``j@bnn]21\*b6qDqFLHc`JYO_S/e;em/e\p?m<f2(cT`<c78)h3Wo1*H68^_NtAMYm7*p]#P^\?5t&T7(hjMKNjP;
%NkgHka4CQA@#dlaD+WL/PNip>Yoe+]/R`noE_K7Emt.>q+5Qn+21mLHlSNP!Gp^eC0'l<)C0ja@H.lS3pSKmd:89u<bqXpEL`:Qn
%np2n4o;"M1*,J/\lU4`0cLjKg0F*3=Y`1b\bsCHZ.'1*miP`o?I=#bS+o0-+E;/PHpp[?.PJ";(P$UmbLs`YG;UF`fg7BBidTb#0
%fUeZA2`?.Tfio<P9"QCUkpbFr6`.<f#1nml+!^r#O>"@[h8lS("cgc_(:Gc!Ge(a?Mg%HbRuQh7fGa](olZ.Iep+r$CK8b!!r(Yb
%Yrt=YUc!B)c4$$]#=`*,rbR%.*Vj5MpSU];%@Pr40AheN`@r-6]1$St8SJS!e,HWnD3C,/>O.Kd]-+)s#BkT7NI=Ir3l,$5ohmJh
%So?5P4gT2,Wj=@EYN`.KNr#J+a+D`!G[i('cn\hCkg(seLSQ_8l]tDS5)A$@WOQ@CgW6_P*9:CK=XJjG_J[U]4;kd>i_S1ama&$*
%DcpEpH0[$c.k)i_h:C:[Q\UpJ<;X]/Q/3u^_;WN%[P;N,<11OuVSYH)78M7IKp^H4ge@PC=M2^\PD.qX2Y*ZN"VNRfiT(c.$'n(A
%=8.HF1`tEL\Ma.6lg"riV,7Po<B%)jHSA8%n3q';VMLHp+%!Ap-R\B&!dSO,em&b<OSV![MG\98_s2BcoZ$?"Sj#-r]"?$RhU30[
%.W0lu=s=]<03K&9^7K/t"mJh7kjAta)/N_gVtmpZ0$?8GpLu*1X6nRO0uXT247QHnN^Y7U@RO\7X8E.(QMAG^[P<]Vbo9Ums5Tkb
%U8E=ZF5U2BL:+Zb-C,q"DW@]S#>AhqZLsnKp+>Fm"E0RE0m&31DR7N.#Q8P*4l6TE=g*"rS17a1P!3HgO[t$.VoU<:%Y#Y!0(Ne)
%4[(dMQG?(3Md"2c\e[hJQT\cDW-R/7--P[o>_m+<#IZk*`kEaIS`$WUb?jYd\2DmceQ_YNJr]hK/d6T`-DP@$HBL;n+c8DB:d\@a
%2*S/*gWU4g+#a>e0)*C)2,LM1D+P+\db"Wa@m2DoFc5N!lfW=d01:<Rj4^,/,N"*e:@D#H15tu5'%"$N_lCr:)Z-g+m5`=YUHE=.
%@FJTm5nT1RQ4)^(TOdk4!Xg`JAb+]=:X,LmVCN^N(@nO]#N;\]7YG35VCJKdFIKWG0noG-mZ71bDa@a-k8J\J<D:01.4m=,<$V5$
%bKG<bP^nN0$Q\<0Vg/`2F6j8h?*Od9g"mgO"HK@UH&GkIPHkt&g<]-0<Y@iI\D4j.[N%#=q7uEZXhinh^<U`ab;E>L=%tiYbVU%_
%d&:;.[6Q,nU9]WM*"_1=s&Akopimr#GEsJI*$6\qFj.bu(:B5O9eETn8Z@_kMkY;d`P)-f(LhYE5-XooC[eg3YB)f_AOK`U8i#4a
%ps7.P8N.Ta_HF-<_UgoITZCm"H,qVVFH\,gN5s!.aRBnX7;_,8bl[&tMaa%*92lc?]:Ck'6;0=%YkqpGn@,@"F8W$Wrn"Q/Y;`mC
%g/qb>mWAjYfEd^]T?;+<,9t'r=M*lde<KH4h/YFEU^@>7%tDR\QR"'%@QdH4L"I4<W:#_KOl)nI:=)u15Q:0`j5[oNY<W$Hs742p
%r6Kj;US)TlksPL8O+4+KT5RTaO;/ZE@417N<LH/?G-5;7l;2"?^dQP-A>i6c..O@H:+$"^Jqe#fgXK`/E:`8gVaMQaOa/cuaE_3,
%g^?Q06c3YZDl?X@!U[:6UKKOHdI5k(&fntKRJP]T<ok8Tp8Mq227co-*1?BgZqt3K#:T9T?E>MF%9't$m9!_76[L)N<+R_)O8>1V
%XUW:KBe\B#1!Ss.(uXW3A(f4nfWHYdi3q;%5E`i_E51n3>aQA-J"ZFC;*_G?kL@9BiI:bXlG*=PqChabo,js@E59E3[>Y'_A1,_;
%P6lF#^hRYq5V-%SnR&l5`g&.nf>=`jERhBWX/I2kKD=p0J+K:]f/Lm8?pAuVht$dFb&/Vp$7`uNKaPT*p&fHA;:.h"<T]?+%9Eh=
%(`kMUF!53YoZQJVk(Ajdd67ar?^,Xi'4o64`6'"OWd&D<GEEZ@9(>@aA_;B?B>0VQLhCDjl=_0t:"ah#dZ/iq9V/tPZ6abjAFl6N
%9$M\(,+)VBE^P11TB&HmFH??d'<S[+hDQ\J04ANq`?2QZZQ\]BOsmI3_,9S+ChJ*%7>g^"'_.3*Ic[.848tL.naB2\GN`Y<lc7K#
%EiA\$pP>Ejo0%ClptlW<f'5er'&BjuDfe5N<)d<d+ABJ)]0)k?4>8d[k>/qJS1?4e#g*D7RZ;5K[Ka_/E\bo:LpUmLUOD&p`Y"mi
%9Vqa6.o-k^N?f66P%bTG+JF%!1Bmi.aUSQVmL1TDnZ'&+%KYB:r64a8XT;l_V(DtX>,!2^3J,/'cGq!-;ZZGCP6R@Fl?ZqNs&t>d
%-A(Pd4-&9ZWEaHIX4SmZ#u]QtrhMLWPFX5@aucc"2par+UeH0Vr;Hh!R1t?6+jEA9W)RgZ?_j0uor#Ob(])=3k#/>T;^`8XAH.>R
%:&=53cgq42d!JTo5)`-M%_UK1FYd/5Q&V7>;W@REoB/_jV54BU1<i<g$;4[,MF34>VWq6Op[S/u7!k&ZrE^?[h2(5&._^'<E_(0?
%($")]r*>X4i(ZhkAF0ln0Nc+iHjf,/$H"$mSP%I16lM;d@6UH%[5Y81o]tETp+VY`2U<]4Ic?86*TTHkWfPYK-p;<A67VS5j0h(%
%\PhVe&TLWXKhQU&S_^r@&uaL7RPs^NZkY.AUrBMW6IZpI$.9;4Bdk.(5]*?06uBT9bUD)79<*c=5B)7mfet0KmdoMX<h/<8G&U:I
%1"qNb4EpZlJ,/eKpq%F<q#7i#a-J1B>=5MR#\''5:,Jn[0R)Y#]iZ7kD<>S0^22X0_FR^aJLhGTLtKeKe!Vl(q."U#%d-;.jCdUo
%.LIN_)F_Uo6#qP,J8&!%K/PB)W!6.$'a`I%HYH%'9\;oML%1tCF%B)l:N_+XjO@aj<=qT6jP>\G=ATgPMA)hB/a*b5Zfc-"-Rp<B
%Mi$ZD*6nBfa4E[dU!JKZ_ifh!lQSU9h9RM,Us*4kg#25%iEUsY74^W?4Y5_n<"R16bQRT)=PcS@1Gr9r._s3iqQb]\Q?p"s-n/3;
%0O133OGp/GgM*7J>0cu8X9;r#K/jSp>a\1eV:\+H>Sn/?%&:^;Z8?2_(gST"N@1]nkS[QiTQE`7'':[cPaI7aJ;G(fC$3."[-3s>
%lXKkY'0Qh`g,ra0f2,R?6tat:E#JS3nDUf^nG#Hp:2"gL<)45Ub&$,+F(*STecb/bT$O+06-CAd)1*^g_\58H\pEoTQ1MG@m=7n&
%Gur_^;JgcOh_ni0+5cG%mF-EOD/Y7,3Gt8&lj,j78fM_lT`rNOA84DN1&oo#F^@o7I8(ah-^CCs=[+KLH%6uXooW$1QR](+arb+f
%fY^Ad>r%<'i1OULB@qGsa&UODe5[.-/F&^/O&QZpj./7=9."]Z`N"><cV%h>[B'fnD\`sp0OCfV-JZ4PUX+9#as+pIJ$BY0M^A!%
%eJG43TrNhI7jtj.GchBc`;D?,f](!3*EOgU;tGY5BC7F82pD)kKl2U1d+>`ZAQ:N1ahasB"%?(4=5b/tJg_igk/esS]*Qes]qQ9l
%DR;XQe(iE[`o;]0!/k?_i9\!T2+BRLGW2NY;E)KHbP)q1TM7f,)URs^Vo?kI'ff`qPgRWCn]UkrO%m\WWqW\9p-=h4X[3Dl[`uRE
%@ePOd.@32jH)ifYk6OT2aIA`QXcX6)]3&g:J'3aTY&c[QZ9>0KN4c$k?j'W"S'u`lVH>CU56'pp2nu^QcNe)c(U#>RPIp)VI$jP!
%>d='i#HeU)/_1<_I<bkV%Qnq-S*Y;C/r-#)oj&$JhO0/S7H.\?Bc]_fh4?D5Q0KLHedM&o"'B/&e8C!VgJR)<QFQ`R%Z+2LX5e51
%&lcLO>[K65'6\`$U61('R\Y?kW^REuXkM:%4\fFV\TH9F_p:(rb)dOC.O37eoLJ&^nEYW/kEb=_*_S$R4tpU#mnjj*.s;f/3nXm+
%1<aQ?s*=BaaPap/S0uPMJO_5Oke(u:loJ`<f9WccQ"bskYe+4kV>HU/QPF>`@7+D^18B;E:n=CV[(C2SoRoP`;Oipkg&BHU"Vq(%
%k8%"T]MO&`R!(k?-#)-8L;^TOGrq>nbt.*=d)Mo;kC75XIZ-lO=UKIJ--FM]\L!2)D5IHd)Y*/$jgHdCP+V7+%_)dc[_'*eo>_Z<
%"*Pk&<a5>I'^EbOUk3&0Y<o7MLcmDRg-rWc2L)<^$P#$7*5@(L^l8SZ(1Sc@(X;9A6(?6=)@l5:VUVW1f!ruPM)>p0N^kG;cS0;,
%T2^.`-1EOM4]1>8XC@d-6`,bT27cgsqlj'sQg/i_]WR0&Z+W_'2Fsamf=92/`<N>R?1Ec7l&&W/Q.aRCr'5>;g)P\'QldA:cWm22
%kITRsSp+soBe359E`fBe1?]1,g0f;F+s&Mc=Oeh]$atB04"d@JMJF.m_aph9RP!>*FFIA%N^W^sRCXA)A^4rf+0U+K(d-R>)-3Wu
%C"3B6@LeP'9'FQCU5*EYU+en:Q$aa6&=P2])a.8(d,+bE<2[!poRCQnP9/?IdVSKt)]:gAR^PM?ZrGH=SWQF#Q8N@3eLX3hbQ60.
%-<XL93LRpu;t47="WFFb/9I7M\nu#ek^7X-C<4ADJ@UJ"^0)TQWdBr4Cd;X:p,Xh4g7e]:>'/OT30p#>gctS3"IYT.]$M6mI+:+B
%[,S#nck.(\hO01P6._d@(S.+:!l^KbJ#^RW9[]quHPmK\e(5r<]M>E^2G":f3J<\/RtR:s87VIF1YY9LDt7mj\hoMm["QS-BrLrU
%4?;%ZF"tuE'\&DC@^DDt_WjteNE\tZVo$>J*lnY2AGH]I7jAa7\isDTH+c#s4dTt6c*Lj8kgcF\g&[>6NpEo&a@PSR5\gKIP`,mF
%&V`rJB%G!]dlhgJ-9YFccRMiM/YTJS%*R(lB4pi"M*\;bb39M(7mpF^+NmWGZU^NTTE1emj0CUj!--3ONWE%`Jnm'CQUFoO8.HVk
%EtKTjC^r96)-8:\J_jJ(O5]gC[.S1F+a!^&RRP"!QF'>Sin)</qKnF"90j+8/ssR-RKD`;'pXg",nf--,X0G@_>_b#YHG\%:qp7d
%Z3U4mMl[Aqk)qF"Im_)dM+r?78X478(9@qd8ob/kB&/VDI3U9k]D=ooZ9QEUWL52GM7>S9Ds"Y(pDuuZ>STA6a-N*P;?S<VH,9nc
%loDaK1FdY[M4F3dmtS=`HP8:W4<'fF)R2f-A4BOqN_0ip-.AE]W>d=)rH[X-:2>N:XqqqH]9M;QhL_J)*t5;qPoC%#MqKGCWf'fB
%Ph3J&g3\m_X4QVn+sp/GLk1j!)WiN>-Z,@8aH27XE&L".=.^^\O(Lr6'mhhMAW_54=IXucG9NpGXZsE_KZ\&gSg>1=i`$**XZ`f,
%V7sU8m-;Jf&c7J_FJUuK7`<:io/bJjHZ(Z`9hU'fWj%32r?8PJfb6j+>Xgj:M51^`m3HDJi!pNW5rC4^J-Brrc=NT+5q9K'8/289
%Yq6F=ocZ.^,P1>V@O:E)Al:PD<EEUOW-C:Zn]C<8kkoR>(+p"+lo1-A2>AeP="f5#6JOoprXc)3'6Ki<IqcH&9M8[53rQSnRmSoT
%Aj^#PQA&pM=M9?U`:5Vj&u1;ad-_F<H9oUpj^!VN1Apf"VO=qnfG8"X3t3krN491X:aMli'h=iCHY`+V"u!ihOVUSB1^)!"R:qZm
%*a7k)f8X*2D8dYS9se/VAO4$5]BY!f6K^a8QTN$;5t,BVfM<$%?@p=]-FP]^oD*c!>$->53@.s\_kHKkORZ<Sl@i+9TrFGA5&`BT
%O)JWWW:2r2YKjIPWMqN!1)iJI'NcMVYSV)q&sp=a[:XLqAqripQOE%B4DbP(@jkUPC9&LtM7Z4'hSiNG@c/!&lNbJDKJfZ<MMtJ@
%RMTB*+%)6Ec+s.Mg9cg%@7l-Cl^O<6g3\n/Mk51+!gZO?V\7^[4l6)2)<k^9[9Z?iD<imm4lB.Zm:EkFm15@f6*4>"O;6U\/3lLH
%gX$^%0JiuLV\E,l1$"`;)+V[Fos7^'G_1n58`S9>@ULA,Qs%AqdVu=91YpXdpq-@8U>i0,X:0t:)Hu7`O7r@2cU=gn-uN07+Nm2E
%o`ffRKZ*%b.$8,1kOc$4iH[,U[]Mh'*=5``*'.%WMP#ZK#N]i[Pf(J:_$q\l+it=j%hj7$qI("0=rAF>b]PH*D6C(FlDq-@b@&qX
%:^&B6)FBsa,HZi\]?r,g0:RoUX[<l7.tma5Xu-n057p\7\;<k=.-Th42!k[QekRc+AP8D%&W&bnl`W;-5#7/5O^pg.-_'8U(o#kR
%)PNR;-@9Fq:!t[m[)*[7\r:fl:mrXJr(=.5E\`J<GELerGtu_T\H]Z5gE.\MQN`Ob9RL7o(RF!m&9;Vlg1Z%jG4f"2B20_qPjAT[
%).]]X(O$=s"W9U`7]/Wp6SD(r$V%=8mD$fa2j6B]pa5l>-c@q:Y7g4<\O8Jb/?k_UO)R_q!qoPIadSX.!pbI'G,R9D3=Vgl#T!H6
%e/ZC=ln^&-F4t*SL0Csr;Agfi7cpKHe9ZUKF#O]2GLmrrB3??=<YJEO`q"\qcLoQA>=;kY\;0@1>bhu*#upthp.IAtM;#!8DPck'
%*DKdcfq<<[nq.f$I61'eF*\:R-:-&m6kY+B^4`9Yh*L-aJ[Z#f8`J7`JQ/>''`6ak&79sHYKFg1'W7]QTr9?eTVR(.m&e#]q7oN]
%BmV0EPOHOY.A!\`;hb%USJi2j;R1D0gm;ACA5!1F5=Pr59D+:]Q)BWtZ31c+*2qVP[[@u$Ud+^)(4m&&PBRjqs0/#TFRh3.qu:DU
%6&o3Dou#o'?!*p?l?08=rnc`?,F*$1NKdlEpp&1N/.I?_iM.j7B5%A]k4Wp7NSmV@SuJVQ@p:?)AsiHJ\L-BfL(K<,BOu\'$Id/s
%kc2uTN<S4QUd\N#["&R0P?ifT6"U45HptkmU%9Y`,ikI\=B3H6A[[@$hr=s2O!@P,[X"hccp03]155uc,\9$rAXn'DVmWA9"aHXa
%,s$db:tTe:Kf8=(egV6-m\@F"`q*bT)jV:^.2IIk-$.G4731GoIDqo04is!p`fV$oiQiLTKl0?Edlq+$HE6L?VQ^7`pGOCrb\.=l
%S,9%ES3DG8MpRh[QKX;_Q9c\Bk3CWP.h*fJod=k<_=66;qEr[:QPgLG0@_q9$)r)Z"R'&7=Juu>anYi!+Qs06$X$WTF*(s13Z=qS
%@qM7D(@E7dhotaoi4Gdnj?/ZDd6]H1"U^M*9&6$t\d-L&PljkU6`n$iWg5rjI9+GV<&(qW6Q%%=%ff2]"r<B1*?@6T!,@?`h0`T9
%dmF7fnn9P!.-j5ce`\89\h6GaTf%;O*:fD=/a-oS[g(`d&!NVbhr@&b&i<Q(k66Vf%hE+UC7Bug<,Ll)K>jN!g/Cs<r[X[eQ#Vb?
%GZ`s7EaS'[<_XTPGAPW8bq'ZO=<t$TU8(1bR?^pa[@lSQA:SuO#fVM#Br!&7,am9K*]e\09akC_0LfiAC%mG1XB)*lm`c8D3;h9$
%&C6r\"KoVSTX>'e;!\Q)QT=M_q6(?B%12(sfX>nkFJH!dI3tMeT[q%e`I*#p`")\$kjH18a4^`r,?$"VMl*110?!ClrFWe,3dcih
%%0(>"m\OaiF9A:;#Tq1$2UptdJK\U?O0tbZK">g=!pOXX+2m<`>snoMN;Q0h,11Q;g-I,$f57BoQFRgtrN:TEW,c6Qk.[.N<6Ehf
%/:o.3'uqSgV7&;%1d54n]CknVbF%R2[XU*^OlqLp?/_hM?5Kg&C"ehU4d3+si6>93OQma#edBr)%$s7S=6qOk3Y8_SD3$]m9;`gN
%'-6a'9=uJU0[Gr(Bl?;B]Cm)qeJF+nU1l'=!F_4)Ho'5=I;]aYWEa1bfJE3)58L9oPuq8[,W.=sQlW`eo#00kPR]=eT')rsoi".f
%Tq$D@M\Qj^EGTDVC"n4\<#-C@Q/!f?fu0k2-T.qaj'7FP60=-1!Tq&AJ.gC2]Xp-d87(J+..L$o1#Co,#C8/ggQ.&Gk@X.BTSEOG
%Bo;ck;VLQ$eeV4jLXRTqQJ`+mQ$OUKjs@,EL\<IdH1h;^P]_QYF!?d5e4_mSTD!V,H/8Ot])i9VoEEhB@5GtW$HqY&RGR4UPC/=E
%jOdm1ok=B1:gI1/S`]+>RpNMM?F:5tYcFr[aO7Xl\),@>:=2Luge*<a[!C4><4>#=q-t=B/qC)[TW*3n;n/epCWGQE*"+NkcGh4^
%>A.[l2@H(Ah5be7RI72opLqY;I>/d'cGOZ9%+V>RhJ[K(P#bjf_,I%r,[nePQks<-0I.^YWg`u;Ih(Kdc?IA;rpMqe>qToA@&T);
%/'OJ)PUmP"OY5>-Z=D<LXCTMo7\J;YMY<8=R?oaH_:P[Cg3]0HN9%^K53XE$a<`7AWR@,'m5='!?;%%YAD2)=h-=_J/M5%E@+C!M
%$WK/hFYA`M"nndcCR`drN<mMR2CD4R0hYN7BtB]_SGmg4D!KJ%aB,%rGO5q#K[\`Q(<=\t3o*/YDj$=7J]k<8j/D09ChT.F.02\f
%H?5_sW19/d?fgb]2,ckBYIM)=F_o%%aO)>Cq!JREM*Ah'E>kj:8Bm60$RAKV"!+Sp-c&cL(1`D^D1$>u3++TM%WW4A&'f**H`QXA
%Y-L[;pU]NcX<E:KdblqbLjW3i/*($V,fXD2;pgARR%"mD<V6GJFA?tmC@QR]Q\GfV:u:At'epT+;sI76`:.3p<0KcX^jPo0'p]#k
%=51a(/FeHb`FcBOV1kG']bU;pBc2*DfP.(J@^I3r<Q0F)cSigLAC+=4k\@h3fGA)CU^N\onlQ3_9ipl*7$eZ/W;B2oU4,IfAm?n/
%?a?,*2)N.hM<=Z8$gOTQfo^Q2mDEP/M?+%$#'uj*Tt`P^bAc<lS^]7FZl]Ze[8l(u]E*8I.7(>&-C.[9Dmj[*+MWc4MbbNj'fr6H
%D\[kg93UeElpPD\;_qC6]M$6,o7N4'3,b^n-7oU3O(<m=5Rf@u%&tUc+Qbf.Wqk\EWP5OMhoT=s\oQNT&/f]XO+m-lWJ`cL2m-"[
%^E1TIA(8'cb(;09\L_s:UMN8n).%`J_d.$(?4+Trc\\Y?GWo(44gbe6V_2U]D.;DWpZ@1:@JXJ]nmNCsQQ),"6_^@gT`/Q3[g(_8
%263b>l[(9&on&kgR;%LHr(gj96p7;;;q,sCZs'>YU2/+sarKLqD1n,<P#aNK^=4?k#&;BcH"Z;OK<VGQNr]hY>2Pc-'O?7u:L7^%
%k7Z8a>'FtV#N&5K<oBG]B=/G*?i)O\G)$?'4"0[[M=^>Ic!>4c7`JJ7QAd"-Jp\$E[%N]kL<aWq&+u$KTIafIJV&'=iiiE<UJ`8j
%'Tk:88<[&';(0t]-)2$,+CBa>T3RA1EbK6+9,\>ff@_2`I$=/\dpo="V$kg`cHmaM7Y9([pJ[3!pS4h*G4-ncLlimHU%:'VFC#,i
%bc$uKUgXZ=g/ZqrQuWo&5dW>W_Bgi0_3e_9LMtHGZ4MeN:JY7`dtc7$/o`%aHo'U)[oq'-`Gm)IEaddG#:]oHAL+1:=((J@G2]SB
%=(.^GXufr/U4tN>7CAc;*n5kfSSUjOp8g8S*0oeEYusVsOCi@Re/i+&0Uf]uX!t@5an.M+eS/cDM'K_"FgbLsY.VN'&<0("HQ\^n
%1Kjq(<@/%SkjKqQ:ms+_A&8K68o#A$Dl-.Xl3=03k\k-CCe;P21MHgVp'>_=9&o!$gXGFBd0/MDHa0u4=@gjEQhT[?U3p9ial9m\
%RHgKMhr$r($HV"P-6Jk4X<B@aYT#&,5nIQhE4ouU]8Fac>X]p-ldmt8/jKS]oWl^1?#[LpZqk@>)[>TaKD^958kJ'R7n&gaUUlc2
%L0R@i?eFSlY@_53BSd*=YI"2-V8\Ncq/`l+J+h9+M@lirD-0h)V*t,WG7PH@b\XGL]HM.iq'=m[mi+\MAE2ql2fX73qsO2aA#R+#
%d6<[u/TJaAfCa6kmgU6,n'qF(7a[0lZ)-QCDl3F-rsrP,''WP3oKaEA)^klEarN4[_J"p#-@-jN-UP^QfX#Fdhc8Kj!gR#9mY7>_
%`?>EC;?U:!Ro/6\VP9rGI9-B*'?N"+*MB`9jEs:qHmQlI4dpP3@?59D;mro.2F^oo7eQD>[#t7/2FLcKA5n4/B?gn.1ktnnDFgX$
%,4M)I%sIMNeaH.k`r+4`5VGku3,arsRp&_hMn!G#*'RBS$.Z$j"iZH(E522pIf:o'1i2lL!NjuB):5D;M,EH60KrHb>e+b#Ni=;P
%AOIFBrrI-,77.igj:75;j'MPh^Qm,h:9"sU%6"=An,MB3rOsq&HUZ/BlT=sL?Wl."mn)(gofi9jQV,k]1,qUC1)P-B\uO9mZ*`]_
%h1\l:93BrQ'U3.Q>ViL.`]S',&)mj)I\f_*$;Qqu+K8:s/P&'L<t]FO5$#/q>2XMQR>8bu,&FHEGXQ:'GmA9Kpp,lBnn#Y;/SNFj
%9O*O1H\jE>e'+:62N%BaXK]kdA5J9g(L,rt'uZ%paR!eJj;bJ6oI2pn8fO*F1:5%'*mO0*pqJb_g"*r:glLJC=P,83Fq=)/;h*]!
%a5=dG7U-?6X]n!LNs"DI\Cd._S00)GQdKLVM@5Z`n,u'=U?A/S9Nb9_,)bYt?I!M2B5t4,EJ3M:d7krse07:'Ika:$&lg1_UE"jL
%pbAMa3p%Lo$?@`[BlLC]CDU9'SBY='l>XpD8cj5Ra1lcpJ.bR`fs+S`G\O5OVtf34kjjV8].Pjn+L;dBbP]beaYTs<S_"\JKB)u_
%.;p+6fc#nT/EEh&AD!a+EXD,V^/9:SrX3.iA6C_'Jh@A&(VN[?Jq$c9$QFln*Y>T;WasCbi2UZPIdf52`+/!D624=[[C&#tk0C+^
%<@OrXCo\<E`p6TPS4CfBKD#.rVQ'<RGf9PnN0Q`)1@Cd'#3&XBbDm;l(Qko^"o`Om0e-nM)sDeN%/RH[PGM-=kMqA[U6,J^#9/X/
%<F>#IMKKE2MJ1CM*UWDj[rUX2=dg&I_9H*@BtCmd*tkg[bU4g1.KQHs'tl<ET]T7iZ9T27m7b#p'<d72Z1Z.f:`9r&g>C:.a%``2
%3;1cbLV(%:T%2[eHff[a*U;=)E[u.ugTBVO^%\`#Ba4p!!)6*7]%G%+X$*k)X6n@]WnX-,K^EhnK>2eTCAn)^CVP-)c7Mj!Rer56
%'F6cdQ-J7AC8*/Q*hS[%E@bING9#_0OXj@7.W0.r/e/@36*T]SbX!kX;P_k8Oc?Hs:'nu\qQu-<Q?RODm<CM]ZM#_"/Q#t$ETbqO
%0fuBDA2=&$.21<n^YGQY&#C0WG"=+MAO2[%5uHNLY+&*t@l@<r+p]L4*D<p5'3g'?^$)hkX7L.m@F7EEUe?@@V-'YY=I$24X$R!5
%iV=0ii6s-j.d([ak^WR?qR=iGV,5aP8&Es48RpHVVK;K3XK[&t/#n\@C2hK^@S6-Z/e(8%'>'U\01@XdJq:Fs*KB$ZgcnEt2fW']
%*<G+G4?/`EEN-4`H8LWu1(p6s9r&QB)NgJP^>@dr>0ObFEO9)hr/UkMDA-lRImmG!!juKQ(jkA9UYRGjZaWjN\9C5lrfV!`bn>c/
%.\/YIK>4slhe-$fXY%d@"Jb[SAJ8cbR#5a%\AbWE"h`nFH([@opr^ab[!l)9&EsaiV[138JXpG:/GQ6N*o`_Z'U@-lACE%H;2)kY
%7V[%J6VNF>hl]Y=m^7J1(e2:TK7^W'4<#(.Ba2FfAtCshqheB`D/h"'=rb;)06COlj]D3?\0A*.NX;qsUM+S+H/9K_J`fK3pm]A:
%oo5t9Ife62cr_0hefI?"iCHH.*cLDN)f4+k!uU5_cll]&3noR:K<_(I&O,-b]sromGH_?9XC.$n4UU*d.:H&hq+XQ8'Ij?aO)m?[
%jaHg++79@$Xi6bo_N=:Nk(!;e^##!r[(c^#Zdd9?^h,1$MfZD&7."a:iNj.I4EUpVk%bhTlIegI.rd5_V<>6upQ)"Bl74rpihc:.
%[J0js[P/'W/OHMsi)R&V#$^#8Aok^[ZM%Ll>=AqYbN>s"rSIF="GeEV_]0oi&<mQ9Kfk^_D:tf:Ln/$q)N#E'$ZL(Vb59&P69#h!
%PH9`#_0_AT0]IRSgW++_h3(FhB^A#j1>oBJSVYrk&#H3MG4c?u]6cith2//e'.%EUM'?Gf9.E*R5!H[s%_aFT__o0L4.q=McU!l'
%'boJ&eO:t2`t]41,h6bFF;?$qaOX/12#D+.hs.q:KrX,g>lsoLT0`LCTO(^*:OO@-]?<ddOcMHBTB)TL2(boV(j*ame752h+%q'^
%Lr3k1AuS$'5mH?(=0rd;m^M6Di%9I67se8RFpWA4C\D:9*mTHiEnj%dUYA;!6AeNl7\-O2e\hu[6lG'ubmQWD%oSUq,/2%I+,bB3
%mHbY&^&sP[M55J<*&.m(nT22ORa"L=lq)>?JuQZEoA2"l<6nn/>DmhACeaB3ErI2.8+#2ND7]\pY+<*>^seEdXGYmp;Vl$Sqop@>
%P)SV&LU2>t=;Gc">Sr]C\m$ahV]7[IBEtR8=Ds0Zbgen/)@AqOb*;sdaF;dI<*s*$aVn+H$5r-b=L7Kj'gb1W`BIu,P2p.QSV`d;
%%lrm8_o!W<*b7OZL0,i62PX[7if`jZbOa>kTTl"TLW>VLZ77>r!B.+7)^"[1/Jo!*`Y>L^oZs[4$_&&je838l,pqlXOK6(6X%[4f
%:;\'R4GI=])cP3rE$Uu@M59una""pt4E;52FQ1AG>P@$M5CN[c<s0S?r:k%E6!Qm#)sku#``iU@qGs4&%RfbrB(OSbW*-]PE4qKL
%#P(o(e9:4K#q\$T_Yk"%XoB=;IJ-'Yb-aZpO&^X/h@3)_d9BB-NiKPV/9KPR27d!MMiO+05X_e*["+[2mu>gXMS,WoEu()(r6EZ7
%#8pC(<*h(+S9ep^i:L^]6BlQ,$.Z\,`XNtZ)-0u;@RG!KrNV`aETuV5In):]id-YQ"LDs@Vr>L[GsSR:B18^*XhHsi:5qAIaesUG
%gf*!FBsC$s5sT*6H>gstpK1XDs(Hb'miQ]p!pB$ecO0K=0q%`L_?,ZuK_rue^X8be]FW!crau_\GF9e9Wi"P"_720?rGl'M'l7q8
%c1P<r[dW6h6X"q477"D:EplNgh70ZuXDe"nj$4G5k5r2=oT0BDp-c/]nl$>^lH%\(iinVr%8mpIq1SW9*/*!ghL\+:lkN-8$JaQh
%d*c,T=#YB*dCC#rrF4r.D#LWAji\LdpNL_jmEsp'NroJJi,(W44(qD/7_`TDFhMGenr)j>S%"4pF7_66oC?th;4/Oa#LL=9hhYor
%po9>rGsNMJM*^*gKlU]N/)G>])``E0Ka!ti:$tu`=^8R)8\e>:?Bmc7#B"_5h^%)+BC8Bj_l?U@2@`u7NMco_Qq[aR]@X&_Md4=N
%U7+!Qo=Q,Q:kD6%OpdQEaR:(Li;!BAKtp7nF:N_Sq&^!?QE8%%4&cX+#2d=K)Q#tgK70s@J<=^oHV1M7Zl4s=G:5Q:Nc]#KE"S10
%]9TmUgo]e,-#bE82n:R2#W3H'c;h8+])K\nIeuQOLLE1#X$9[N6g,L3GIL>oNlH?RA2t`u[#LTVC12ep<LF@^H%n"#W\k&`A;-pp
%fPNj9*<GFJde#`%Q3g5ffO^%UTU(2/"u]NG/jqn\/?8rGqU2rPk_^P..=ph;E*Z3mE^@%K.O]a.*oO_djqbJFD"fODJ,G5p(hD(=
%pNOE(XLbGqNgAU'TEE[ugnpgtX5:1O%srU3P^DO5Vl+"ULOqQM',mR/V8rQ3DI(#YJn&6&8H:dooiL%u@pptU;*F0@&`-B&3H*p*
%@QPCWK!_b$=NMOg-ncXHV/9oc3>^8`YTJ5RB2c8_<fDJ8S4O&K@6RNE^,Yj>..7j'K>d<_j!p-[NR;a&Lp1$\hAUAnceM?<$S7ZR
%V=-iIrIURQM+!'7e#W?@eWQ=-#ImhHXha53iicbha1llT6hJa3^4Xk+lPN'KC:)H^"tMcP5[!MR_V2kN]B7l`8kS2:0qNf7k\pL(
%>K8D3rk4u]A4.Fff7nG,=AK;LNZF>Y")'0aT(<\$(cp/n4Y94jBlL'4"-%&9d19q1H!4"(7BrPl0U=+>L6D/uWnW=fYRbT'Hh^gp
%b9XRNhBP?-5n#7'=_WmZaA]t!fG]$:Co!^h_)7gKk0U$rJ7$i);&hGdWPi#p7S]d3N$WPMWO=4gUq!E7V)]`rq9V%0LVH9k9_)6<
%Hi0don.7\TeCqb\&F!'Nd1j4$I_"RnQ7eXh(Wr3[Xg>6_8b<QdVK>*C3QAfgiadbK`[qK5R5/GnKe;B7(nZr$TKV]pk[epm]&"_q
%*BG\9WN_@Fe@CJpD4RJTV=t.YoGfo58?Yn]S'$Sf;%k[\/Su`1eeT%3U5;NZ;+)lhd?\!P$i)V3&.NK/Hh^gpb9V#>]hNQ/0CIJa
%:&9i4nFbbkVi-JM6g?2W#i?\L>EJJ(*p3W9fCW\RdnJC`::2Z)Op)Y9+6A[6($oBl[,qWt>6EX<*rM>r1<!I5Dc<.6DR&D(CC;@1
%W_uCrbB6d`.HrS,:3^Pk6(^UR1bS)flmRmQ@;I,?D'MhkF)4#D$,.;gO[S.^C;^;M=)R*J3q[0")r/?gU0]0lkj;).e#">.poHBo
%8<jJ?9i(q6-1WLR("/<"*0T"]0"6"sFRcrl#fq]Oi)H.4GSUYN;-OMHCVKXbpMAp>Lf-(4%IUK>;(j^fFnQl7.D/D_c8C@u.B+`s
%"M[O9M]muQkB-!,kgOhXFERH6.$V/+455I+i7-Dr_GDOHq:Ljp**(Fd0`sV!GZa!0fGaN#o6#)W/*qHnQ9r-AS)r/O_W5PdGXO=W
%HC\!`gduWNh44rM1p3WFLZ]VQHW94oLZ?f@EiNqa3:Sc,[Ok*#,NKEn3a7E)k!Rn]*rZrJ1<HZ-pN]B11P,,heD%h]lAd3W=*U&<
%G6U(#daKFg6.-^JNkF7.8jf+o9pJr:7S^WKN!M28'O)472i2n]<nfr)NBfrXgYa.OP4UNK6Yl.2P:#-nq>'_hfL+Hjrg5V;$.?K9
%4Sd@XK&gMf1.I4FUGs6VEj_4?NBCq"0p4HWS^p!5.)!NFGuC+V;O\26K7!AteB9*J]tMT[3o;I4\ea.K>M+R[,d(R%ieT8prsINe
%\(2>cBfo9#$Z;'OI+cC//nlQ.c5&>4Jn="\8U-@JZ-ccg$UJDhXGuV0Db2VR4&knh#q=hf8grpq@?-J80+&S;f#9QI)#UJsHpfRI
%dtm2i[Jq0k-BprW\O:;qeC_V>%3O54>>gu8A&Q''BZq'&bf@--4n^JmAVR\:hW,^E&>SskoN^;+"#<YcOm-h!c"V0+ol985+eQb;
%?V$)Y(gS5ABY'M*NLVJ&(f1&qQ[gA1WmIU`(XGRtfG`9EpW0h>QhfGUH^AF\p=t83j&F^K*Wt\,BMZP*TqlPJq4fV$e(D(hH<_;W
%Q.<=LbLsrkJW5?jXg>U[\Y(?sYAd`,)j/-f:`J0lhkFGSGA->;@Sp</a(KI'@h/Ws$@C0F2Q:bZW):iAk<bt"Qt/h$5oM"+U]5:1
%)gTl"A%4o2SH60p8--S-g8Qku5)jPQj4`E4q\Ji[_cpblZ\`ifK&OhKh:Mf?1h"NgM\4eU=q9@\>KGuq_mhs&])*d@_aSG'<8,1j
%RDtS^a13H.<'&R)\'c%Ddakod\Au<P^!,tHg=m%14oD*WqifGJ,?"g;\N@KW%TVR!*]eB'.Cir>ppN8LAkUPV:6k2W6$Fl7O!TTc
%/R8gpaqjP^]W2t%#4I[-;(qOQ<VA=^khJXY7%7+d$PS^HN+DQl&193kqJ`"'fg7m9LS4F=(J#cgI]+i4"/j9W[KC2I&C//nV>d/D
%7m;oH<Q!PK*r-TE1;?1fD_cuH73S8HN/_sPU$$Ps#;.WK\-"mJG8GkNK"C`Q)oNCZ#0@Lbrr(?56edO6V;MJlB.!3OUb!V8_Y0A+
%S<oY7bNh;<cslsU:K9DC6T5VeiHH*1#.#4D&^,l!;06eT;Nl`Tj:3G2/jUF9<OG&UMu$Lk3J"W7U7#1l[h4kdKA+s![EJA,Z)t#"
%3Bpr$i7pD:[BMpB3.*?L92E9kq'5$HC24u+MkVtHOtI;4kWj"5P-fcfD64?=^8??m$OYC2_cqMeb7U_sLUFsFj@e"Gr!o"*bO_.P
%^nX&nbV;.sd%#pGi@IHE6>PS6\Wch/q6V3?lE@QK3i>GFPa7sOS/U-(8h??I*E&"eePN"Ieuc01TWg;P%Gp,OP$VaE.-t57cU;5/
%GeP797ZtuG6E[H)K_*7!TOg.uk/aH?CI\^A2op&$Z.PA<%@e>@fR0UW*K)"D&<H'Tc4JGoUbX%C#5?3JW0d>9.XRN&1Puq8kn1Y7
%W"ph'5rHthial6VU4(&C%/D_4m4"gd@&>`416c%l##:.0$jUZZ)I$%*3`0q7Xg*RN@m6t'mZDEb0Cue5p+C20;>^'74"a4g?Q\p7
%]p+F99kt@**KD0A-qd!knids],HY[c%i;POp!hL.!mTpt,IXBN1.q-U=5!qK=sMbZ*qC*>19k%^mo+=O.jd5u[BQH4Ksnio`@;/O
%JpZ43$^&09mFhanC+OJ/=HYT3Ub]u0G":np/Vo)88<)r/1.S,q+4^YjaLA+7q&Lr3PEE268]kK3Ub]t5**'Qq]o1";T/PV(Mkb,"
%3InsRLB*GD`ul8&Zo_B!2K0(S@f[A%5"0?Lj:mW=O8EK5k\H/lK6u6TeB?ojID&@i8L78^[OO0^`X3J\&RXVo:nu<Z*5DsW2#?>i
%?`tC^k8S+]9?[T8I4["KK1n/^B$!oE\G5p/^)$9RKTR2%rNS6H/a?nf\%^^3gJhY-e$FC2,*!1C(CR<l!^=rF[fN*jf/tHk>hFFH
%>;LC<ZN'l&f"qKRL'3r_1"5KK\6f_W3V$lPDApq%e/InDoJ3[==+:I]Ao,fE`5Y?\VWB^@3V"iA5S!5HQu[_6='GT`)r&;'9?[T8
%FY,/g.j>VTflG0oIPUR3n7h5P)U\Q2)Y99d1:,Sdot+opTb)Ht$#L(d-$WlKFTIb,2M)8.FF-(<BcN//eMolZg*gttR#hb>C!&.Y
%C`;s'-3Vnc65@JAVhLeB24XPRCW&lkbHu.U^!2kbMs]2HfN=i]6S*p/hFjloN+qG"HZ4L,2s9C2(p%C=^Qt,Wn#)m"$Bt^k3QNe*
%_S8pm&CEtC.Nd%9Yr1Yql=FS:Y21MF,Vo:n.75N`TGr3R*0/APr'*sni<#gQ.cQtXM#e7oOsO]BVkt4fgon<.KKtCL)&V(`2!%*9
%5A"D3EkY64:t"+RQWQZGq$L@D^-*(KiO5Ki.oWsGO.U[uT>pdJ)m<tr3,cYF;m;,3^o=;e%8e.#O"H+X-GqfeBZ^oD[>&dQClNa4
%HC<LMq^e'RL@jLd[BqWtD!2oH=.OpG<7Bpo3&_Tq/O:4BIfdXt/HfaI[)?e=eC)3Q;dC8%;&9nqde'n=2Y(RpJ/Zl7Yr1eml"+U6
%9<P2-M9o/hJGsrL/W<V)Pbj$kk;08+.<o*?rpNMo+tUfl*MW/@HnEho@fQ=hC)hl[$RXFVKY$1XNdG49-tWp#IqXgbM0YN;TpOZr
%Xb?4qc#mc1@mm3DQ8KTHE2BQ3Z(:gM5E1u8;D%2Ggnpfk>r$<Ud)Ej_1a1O#5:$Kq%at2k>rWs4ph9AVep*OKQUuVU`Fc$$._=^(
%qe9R4+JpA3";,1<WSlnmg(s0l/?j[DgkD_k&P:eOapf?^?W`(nc08R]B$TJ3:?].B*V_H(9?+;&ZNe(<]Zf[4^DmF=1CIb:`u5/t
%#Hsgr'C)Q**gqZQV+64U#Ze3Up036T>4RJe3/FS17'E/%`0B5FMpj(L7eNbKUR0A1`QQtW%mm8X,Df$SVF8*1*oV%VI`Y5eNLtgf
%#fRJ,-kZ4&WJeH0*m0?+n"2&%_!NZ((tA8bCSu>E4f/FIig?NJ*`7VHOsoTXC4@H7<$E:G5m:^3`J#jt1@[_/>61'7$/SX,2>^=H
%i0P@&MLL/cST?F]Xg4.88W\buTSfIQ,gT&E`E8o^op/9'H"6Cl(B18po*SXIiBXNLRY]g.)A;4lr@OSGW4@4nBb_"h7",41PJc'F
%BRNLmHeuH4Ag96p5>Q$25qWNBQr0s*Okd1@Z:I$@M6&cO<E'V4[2F[2T0Js_bFEGcB9[.8ck-"O3;t!o,nBFjOPDHl6:,O?Pj\A!
%!Im!!Bd3K52))L8$48g14gRAe=cu#L(*0;&5n?"OVZ&.h-P9e:</VXrW\\%*C.i[U_>QQl)C\PZ4-tp?ElKGeb93VoU]4EqR/E?W
%4[Q[BlHREG``N3)GCFZk5-7FGkI77W!EL*R(")D%pEl'e+T"qT)QT;6iQ>6&o4jhk/fIaJ"KkUq`WdATe4P="WYt7_WOik_KX(BI
%cp.t^?-!PXoTEIMX!FfUkS7(WVd7[ViWNtT8TZKiR+CE^L&Bmq.HNZF[1K94_`OV&fYju0DLdX1gRe\3,ZuRqNtOq>l#RXj6'^_7
%O`>*5(ER]0#\DEqrFSup'0ZYF'R$91HVuV'1d]&m];r!b?)N:A9%C2ZXePlZ)(Mu"@?igt\kf0>2AhEM]rT\Y4O0:>.cB)Tii5t%
%Ol9r,\d,6D0"rhJ,=7ktP\<0<fi0),>fnld;@i-6bc?0(.VgFZHI+G')IbsjLI_>0DWajmA;$d`Pd3,c=&u&4GO7-Y/1#RV_8^Ze
%FSC2K]/u;27EX%e>Hn+]V![EYq3=7D).6`)$g";B:Pu\iGl><,bb+q6\Od<cn)*WTZ%b44b5q$.s7.Gn=5[#qgjIN%!9i?+FSsS;
%\j7=NdCGN[Y[,f^;.)*Kd3fJMZAVAhZ$OOJKmfpWn*3ph<MAEV&+$^b\NJZM79sN82B#h_Uq0Q10h&e6k:T^sYLX8uBsM@Og\q+J
%!2D'\Y>)?[^"2u%RQM\f1,ct#gWdB*&$##C<N=GOeY?YnVACY<I.1CNBQ()&+=>/7OTj0,o]O#ui<TX'ePQ?.038p+Usts=jFNf^
%OTui]W%E,[X2R6:BdBq(IGABck`3A.BNiBd3j5?O491+i1@5^gQg/hZm3pj_d<NOX]uE#TA+m(\@5otGjb?f#0Z54E70`S`l:e'Z
%2-AGY&5U"P>?DWY]kA2VbBGK$n)fUW(<QOI]K!l[Bq'[(`qTm-3o/<cX5ZnC7R<u;!P'P%0.B]X&t/XpP*ep)"KdIP"J,k@J?W=!
%TW$B`Z7]#UTOR5!JC`e^&9<,$%[)]/JuT3u:T>WagmsBtS4-!49\AI&Ih/deg?Fpfi0;`DWi4\+>_AhsW97:sF(k2'k["so^f@f"
%>Z^O*@BDdm9S1t#%JA.s&XLU6d<T>N\Joml)'nKm?<k(Di<9k=$?heVF5hR<edON;"cJ0k-+T;1ME35`W=P0?$eZ[O\Qps9;6ml^
%q(3Md1[6Gq<D=?2+j8`#<5F]*Qb4nCB%'iI)gO)q"hlNQ<m0ArF3(Ci>b]DB7o\f!$(@uWq:m&8.iF!f#X;SRSlc5WmP2edX4;JY
%i"h]GaY<A8+dVZ29!e0M:^WAi>gtKD^eAQ9H\*p9>@iq0m'd5Mp;8;XAHA`?Ol+gZrPX3Yl6UgW$p/'%E&%$#<Y#Nj[,Sffo&m-q
%2]:^$D'4)NRo$E8J(PWL(Bpo`_Bk(epiU._X%(f99s,$I$f5@P+TfPSLHEnoTn]ok;qCLYX&/h\$P0#jMR4?RJ`9t&o?JUZZSY7*
%MQFi(dCZP.l&j'B!ts&3XNH\"Na8NDqrolBbK>gB4M!gcVL7_">oKhZ.FN4f(O>'cqI-<2h^VB0i_L<`N)V]"VWS[;Z=0OaM2dl"
%bdg]g:^kpE;U!]h8q^\Eb7TUWI>,%1c!U"6C/1:s&'/1"f<a-)piUdd4SOH.;-dM&BP(=%AVeM$Ya]hPrAJoF?D>b@ij!&T^<ZLM
%j-ui+clLH=@(=Qm*R%o^YMJn\,X(msWcsZ]JZX^(7PPI+3H+KkP/q62dn':3ea&qX&\osW3C]Q@):#8EH5otF.G,M&e]pkDirej<
%()br#C2ki*7h$aYaVj+g"Y5!<fS`ijk3a#F:P)fObLuA?iEM4YZJ(-.>W7ONdTPplTpN=k=(Ot^^mp1+Pf4Bf)6UReCQQA]r?N'0
%e<m5=2`.NW2QO`<;JNAEdN,sdFrZm?<]`0I$;4JNOOt88Ha)l@;)*tEFe=Yp(I>0K'1j8.>o0*"kMc_&kt.0TSDBnZH_'`$`]&0J
%\1bH4%7t4e)]Wu!0]&7!Y?=UM4hR5^L>-Z1WjrR@ntb##lcY:"VP\7ri6-I5.]5)IAZ\kPC_M)k'Ub7Eb;H*9>(s^].<)u,m"7GH
%>Hkgor7=T&9?:Y7!=u1C/:G;<>rQZ33EaW3[QII%RId,n2gJ&po:(pR-8]hN(J1Oj`g7]Vapm@);/O6BjL7<I;C$!lj;DUb*tRR<
%_I[U+09;;1/#_\Q*n%*'6"7u=b=hJ0Q:47c67*h/AlW]2jrld8&@i@jkcLF:-o/l7e^Tc(ncaV.4XULYWR;8V"+r`3[utaeI@9]/
%a>`oUE$ZuoAhpD)4ePY6M-dq;>,5E2gANb/&iA+:B/3<K_=r)-jW@D=(=oY*:u2\9%#'IAdB3:m,1PV<D<ePe-]I(a$^.Pl1pN.[
%e4]ei#"q]rH;oIH]I/1!i&Hs<jt#\f^=C_sNI?f4JgC/1B"YPH*dn9hS(CZrMOKU8DE="^XZ=9W9(k>XX)a%pL,]$bl.5i\hC9a,
%hpY;!b_G7j/R3P=?k$/8%Wk<pPnMnlFP\79&b9MDHBjQh0R>m0UlgG8om8uW=_3dN&UWVGjrI^$/`&_rG>J]Qfu0*W;IB.BN,K`N
%a6#\*N+<sN&K/gH$0%HsehGe2r%r&h_De7(0rDlIgsqT]ndV_,3K>X'KoB@T)QH?Qq\0mL-&^Wu_l]ILNLX?`eb(f-s&3/!29K4@
%!BGY_V*e+6G#`>rK3IHK=U^PHJS?sK"MdTqMe]_-k'O&r9nn]O5>Z;$lLJhpTXi.C!`M%cT#pc1+!eF1Of:s0YbOo$mQX@^H:60K
%W4P(qP5.fW&JFb6*h%4//B,'I=PVO0^>p:\XO?dkJ7Fu#lOTB`5pWS\,I9)1^e%G10k*<(-bSpYL6Y1d`T`^9_<PUS[iXF<r!;9q
%F:1]lFOZ+V=CIa%=4_u4QYP5*4jppO/j1hcX>^E)RXs!>p`eKLVa)1jERiDbAS<[DfHk(;)9(\a20QRM2?0GCV7`8@"J"`pjB9(E
%=GKoH?e4ce4n=4N_j%-V8)M#i5I&Y[^<ZK(iOf"033c)TDEhEkVuJG-B!n[=j;+&-1.c"EEkGLU*0chtb8Z2/Po7YmhIMub5H;_3
%_83!<_,u1j9OQh:DDGg:la>2\a>_[i>0;1U9gLk:GnFAZ\ItBl^nf9*MmV5%iID$:4r=ZY2YF:[oZ`m:7D;7t&h&er563O7><5SX
%=N=$W,<m7)W+t-leR]pW4d)WtYrT*eHrECQ,h!MgW!OO->-kAd31;J%%nnsp^`a@!_u1LrqI7.sA/t<%/ejU"IKIiZ;-Td9`7>&1
%`Rq/7DNU\IpIM%/&Gc3E;)Rq^AXr;J9_q`L>:^p#$'IW%P0(H:@H]"IO&j>UL,o`I_%@kf7IMuGfnM@\K'YSo[\h9mW&Q;/D6)e)
%;\>VtK<%gR0>65BgPdGjXeQ,/f=[ea@(l.oNasG"i4lnfm:Uap<J4"*=Sd[TF?/!I4B9U(YB#d/GcuKNj4EDfHeCc*dEFO8Ytj#J
%]<r;_W2NdD0r5HndYkW`$DnWkU7C*d_q!Ig>Ecc>'WT!Ie!>d3)JW`9aE.P`5,'L2>#g7X>GI\&&[l%HY)p\:k9+@s2,0r:gTHWN
%2fhYj+-*X`<f8W%LTKdLYlHOZ-/VC@C[l6o&c-#Bo);=]FepJ79/@`@+lg=g:Sk#+6;cNG.1nq[WnC0iVo5ss3fR/f9Jm6U?;`il
%PG]0peZ`5/RuDFY\[c2k0A2b>7%cnI2e.Y6)KHRB::IB+7t`XE-`d&=6\hq`H.35.[4.5d:og0Vs78#)6]#_ZMi_/2+j`!4aiti;
%>[@b/%B:mBaPCN%:FHi^?&Q8sM/Tk6AVTcK<k>aG:/*YL'j6kaiUYD.2\6fG$IWAmbM'dnfl[.!`$h@Mm.:=D[h)?@6EQRNW;(1L
%Y7kh>A8<pF__7sE%&6m0iaKBf<jk;$VL7Ut9r\eo]#^b79_-Ou9T>#n/:<W2mSjMcl=37P5ui5]'WI[T@'NjcRt\T<doMW@e2gJd
%UCXc7%sk-&OsQ;qH;)N;JMi8$aF[>^cCI?>B>kp\;*7L2h9OV?oZ,+G/pXg60so4FT")JtXVH5N;kZ@kf,5Z6I#i]/35)N`50VYV
%2c8s,b?Ep&k09kn)R?CGB!Q-tN^*'/&)Yc+Z1h[GY)5$X8S`#NPW\P9E--47pI^3P=ZZc,7H4XG6*T'4-/Y_C.'*<NlS'4';YAMs
%V\D6\L^##^D@6"3fD+kpZ=%&%HRnSk/s=C5q+N'YFN(=i`GZN6V@`)[J@4YB`!0,oFAu?k3>A?$8Z=Ca+iIdX,mJ8HDE1]#$3q)h
%a5Rih@'"4u3HTD@qG#'@1!$1YYE,upVtu:UorPq[h>JtLSq$65P%ao"`.=[Xa)7c@"`_W8.Gn<VQ_+C1:)QunRE`kt-%dbb#FYTS
%Jjd^Y'LG_\B%3Zs/giO]Eq$1NW>sNl%7;m.]F)aD2Cb(]HB/&khVD:Mf<TD[X/#G98le+g_8+IBo1rB/E;sCNf'eOBRDf8n:u#:?
%=Q\oIBM+AM3:cH9o_EXDLCW3O/AVL[PTGY%(d,:!@%Z#0])&DX.1I,P`=Q2imTWY_+(9Hj`5p_Ll@b-e;6=e_NJ4'Tj(*t4j=e';
%g_T-.jqVldhb+P!,oXk",?r<b>(_L)V8P8SZk/soEKG2p/-i*dbU&BUZ"H)ZE(#hmq_I8;Msk\RPif(AaJ>WqLTjBDLH0(CoBbhB
%[m;pM^C1o-Z'a:2/EXIL\5l7fgVqqO/7\?TB?J3K$I^I@s/iYqh8TI*@b\_#WsfNE/;ng+i:]rJEl[1HUoIkB>OF2fJCPjNPBB,h
%hC+#2r\\6^]M/+OiOb=$\?G"KP/q5N:/M<D]8qjJWok2-5rLs8QsQT+Pe'06M0c;#D&hukN^8[#3iSY5[GYDs=:24sEk.anR]"F2
%(DV_SlXZH/hS;/#=(&bH8\MXh0;_YPkOhj+QXdtt88S2(Peh@/-t#,LO?-P%0,)'bpb'\1Zt.@9DDS\0p.^S4m.O7%92t\6Ge<(;
%cG%2%Mq.ZO?WCN$>75LBahruh<r3VmD3>SG@tVG,@/FDN_i5U?Yp7Gg9A?u'Q)I^<bD,I0QF9a0c&Gqa'/'%Ur)oMa%JtQK`9a$g
%mLeF#fD-IKI#mr2>$ln0PDMtFhiL'3HnRqUIuS?PR)=J[=l$d>i=ubNAb\A1Z0KIJU]hSMTlN':Q,[F5ontjKJ/-HnTuA'8IE!ZD
%ob`p?CT'0jOO[sg`g3pb2^@YY9W*O2L3gdR.SgVL4Y^!cL56q*deIF^ARB%s0#Y6_:j=cr^T#pu"qEd!M)mbrVC<cki5:`:*b>/G
%<8=NV\h]tDpMO64Nr\^7C`-\uG.BpUg9Z%Al.p*W6B'^`/!4eHlS)H0c:=0f=SEUlY$!Y?dA@J@%]_U0a]&SiT11*()d:q^Qj;oH
%#An_&P'EDbf&>@O.:frRlo%f0m_tliL1@1oVn1+/ckD2Tn)2gkH_ji!o#,9`98s(YW:n!A=mrpm!*8pkj@+g+V22NgAHP<f@eToN
%91E(T<]OJ<"2B^I$'/-Sh;*rUDdkDG&1u`r0D&,d#8FHn)_;P2iGe4if-qeVI$6Z=-uS'09dNgk#6\7!4AYaY\RNp`=pB2ipm)\t
%gG$@0lAl-)W%Tml(<Ano$oLp3VfiUW%+55[mEP%:hNs3h"$sWmW6$I]9gg@n;iELZeDeb-=o(BaWUbSF5Y22gL"[m?ohdi8/Fhc8
%cM,]ERsZ\']3Y\)16Y[nQBYiX8B-P?\h0ssX]!]Qm-[8_/:o`,m!+WUhA&g_1@6CN^7'c?"iQ==,fd'Rh+V)@"QaAPD_)T"<M"rj
%S)!p&3/jV^3VS&4dus5$2CZXl"&VY1Fs-^W*5e;sN#P*f0,)'Bpa3i"6_+Y;'<(Ikq&sk*RF<1ZPHL-&2C'.EH;%u?W(0=]6Z_t8
%S^iMO?es1q:pM(tn*]bD2N)!bQ>S"+CiMVMPIVrXPpnX!M(0CO[rb^qMT]>AU^LGq5SEC%E&8)*#'&Ig5e8!%[J_lF>ESCEY!A1K
%8+esY%'sq=e[)ZF&ZRkt&p1E;03q$5)1rimq#K!7mja].c&;iZ_n)`*W93W0`4>&g@6G,['rNqV7M9Fnb&3["Y@iO:'LkJN8dH7a
%?=rRE_-1o0VPpGfV[a,,=(aOi-f^ZEA6pX3lg\7]Q3S\de/"HKRc+,u1tsX[aQQN,T/m5E9N&&tEiV9+WtV<FNKnG*l!kXoT9SW;
%1(g&f$(G"318t2o2;+:t,JmSHH<$E!eT=<'JJ`g%7I3^3AN1IIJ)d^MgSMqe]Y(<jnDIrW.t#_Rq(h,#O`,9Jn0j\oG]oe6llDIq
%0>022Q"<NZlI*_X=-Un<'WFbIYb$bcca.;[Fh/sMBltVj8n"&GT6/%+\P#V[A#r1*GP9BW+-`r#1iZuJItNuk1(#Yj*l?WBoVls*
%eY?%gO)/2&^O-*Nau8@K^/"OUjLZrqZDuB:adr"?^oCIP&Q-6!h*b-*p2^Nj_^$&c@PTUK"lUM;!NTS$GcG"J<LdqZ24q:#$13%k
%YD^R;PL]&"VL@UG)jRp;n[jXNO)iIsQ53K>"?*H%qs$WP;I66/Xujj'Ka^t8W+XW'P]&Fn9C@D6V7+#`oJ2n+(7=['WHV;qlp6B8
%dMcXkk30OaXDD\]_@\=Kr",Eul90Ze;W38.L9u+Q6')<g/</TuQ7KSt,?S/Wh#aU!WkgKmk8OWej]Am2E@gQ5Gs#?>!A`(Mg/K"X
%Q!;YQXk[F?pFij:<;@m8$[e5al9%S@>-K*'p3`k:%aS,"`\oqs<Kt4)Q7CqV=>"Sn`o%uH_@Ct,lG:j+BQ8ThPRQ&TIVkNY.H5rE
%h+2sdHk<drC\HJsd9#U?Lq7k#,jFP2Uq:d*,;A=dh,l_=g`)YL*MqB&cM;TWr_?de#KaZZ#F<Tnk)\5?X3-`K+Y=WG6gBb=8buN_
%adDgun6#(LW#Z5k?u[\a9@Do>Ul8,6C6_78]8V"W-NEMWM7j>3XB%WY$E4X[OP)<--S$4f/SYVpMC/gT8dcW?`GS1P3*uKDJf,80
%B74Rd:#[!^V[#dk-Bf=A8b0nW_^u3cZ[bSbZLTh5Jd&nLPJ)=]0'>77J_,gK1]qA.CfDKWeVPJ(b3,WS`G5:q<sS2'.l]%lJGou"
%&!k;2J)]nH9?e/"Da_#lagN5$8gBh!5oC>0;:P9,@)sWirQD9\9tj1Lo2)GXF/pbq2h4G3</ij']LCG[ErXJn2b$>U8u<@D\lNif
%O@Q;s0+CtQ@Sh.@AFcH%oL5^\TWAiqh#:.eZ_<A;7Bad3OS_fMSXt&:USLH2-OKDBfEW!P74:F'k.[f9^RN"alf`K>LEbWOT$b(m
%+#cMbG7+\`.(A00?RP^anpi!(!s`K'IX<EPX22ra,RHr`_(.>[PsFl;3<E^A6Ba^@1g/W5d1NFsO`%9;*^E<(C0+/*0oh\Lm@hQ%
%.i&V&Pehr)Cb*KBkf6u*EZCEd#/3k/o5.YL=p];Y@?[q\V@TV?/.1?TKpRCK8X7=0BIaa^$5Fg$Q97i:^/7^/*Vcr*;&YbRj[8lp
%9FkQO)'P^N29!Do>R3Fron&o4Sk?'9lDYQ.@&)MG?o`J#3TEe=O*"c`MRog3?"0U7kaQj9-+Y#p(=noZKa#RoLQpWQ!N]>mIF2e5
%9UqOI4KV2fO*R:R0fiA$g5V6O$>%%N^9)c#!OkJ:@RhG!7@11[q=IC0f?.ESIABsnEr=G3:Y83VN(\Tm('<f.mD(uPD]sAh?=lB%
%`$X1K^AMR!L\?1LgLc=uIA$DM8\sd4_:=]MR_RPXA_&X-<+Xn@-]h;Y.Enp$^_9%6*hYgl1*KN+DM`t)!rm)(Wl[qCE>^ZL1X"k%
%:O3-fYKEu0]=:`:g_JM*@3,T[0db`<_!GlL,4\ap=Uk$_PQ%Sb7=R*X9>]cOG?l2+YS_2b&a#7JW7kMQ&[5"`=&A8W0ldBJ'M6^k
%G$7ljk>V,W5-2[YPA61";uN0!HrmWUb:/Rq8k=!U(mUc[Xc;UHF=bu*hQM&MWk5q1D;_A80BT%;.?R?^r]9_us)KqV-V'1f8;l2V
%OCi$P8+LLrGmjp:5t9r`=Jq+OiW,G^#7fjFC0g`n)7ak.Q7YDB10,GKm1HG:NJGPc7:f>FUIOU1$h7kM3R^b*l(6]aA\c/kauHuB
%3_K?q*U_7g6(amF0E)[Q;c9F+j\M9k#4,Cc@L2$u)4ZY*9Jpt]js6dHPb641;[E&Y=GM%MUFPKAqpV?BmG-S5.8E<Kk*4d!V18>)
%?^cmf1P;.4jCcaPPs@7t9[&\k0td=V^0:HB6INIIP12Q>&ZSV5d5b[WS]kKm6<Enr3:*)R-"LSAN/nOgPaIF<Vp3t=Xd>uFCT8s9
%NoI!BVW-^78tur=P&@SV/orDH?>+GX/5b-FkWQh8WHp:@ftip,^Pqo".H9,&rtiUKQu$U*:1m8O%Il:80e*DH)u1g`O!m--m6mnp
%DjKX.T\-,P9-;UE@lq-p3uq\?TMI4ZQ=K^hTE=JnT&OYOr8&Auj1D/T8\E@Bo=).?-"alN\eYL\,2[;`M#NU%^M!9ckeBeYie-HD
%<&gmFh-R?;[&3$X$nJ9oe>1URn,Bc]YrhDaGdJ-,n+T<J]jLZ7^\qp_10L'7qr6LK-QPE<_X/8C%$hfH\]6X$BXQ!Ffb;SY-ZK(U
%2bGt7Y/E[EXQ61Z*oFQ%:SU1r_t]eR#Bc*erOKo'd.t@6lGL5fm4#]np%)`6T)\_L;n)erhu%][J,KoXr1EuYci<H@rq^k5i#hrR
%5QB2>rhmO1q>^6O07Wr\+9(M3s87BHjl=\er6PE6Dh%bq^\j_q5CNIY?iT]#s7S*qrQE6rrpTmXs+'T/q[`\b+9'0-s53hG&-!_DDIo@~>
%AI9_PrivateDataEnd
